// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vizMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vizMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vizMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vizMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vizMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vizMessage_2eproto;
namespace vizProtobufferMessage {
class VizMessage;
struct VizMessageDefaultTypeInternal;
extern VizMessageDefaultTypeInternal _VizMessage_default_instance_;
class VizMessage_ActuatorSettings;
struct VizMessage_ActuatorSettingsDefaultTypeInternal;
extern VizMessage_ActuatorSettingsDefaultTypeInternal _VizMessage_ActuatorSettings_default_instance_;
class VizMessage_CameraConfig;
struct VizMessage_CameraConfigDefaultTypeInternal;
extern VizMessage_CameraConfigDefaultTypeInternal _VizMessage_CameraConfig_default_instance_;
class VizMessage_CelestialBody;
struct VizMessage_CelestialBodyDefaultTypeInternal;
extern VizMessage_CelestialBodyDefaultTypeInternal _VizMessage_CelestialBody_default_instance_;
class VizMessage_CoarseSunSensor;
struct VizMessage_CoarseSunSensorDefaultTypeInternal;
extern VizMessage_CoarseSunSensorDefaultTypeInternal _VizMessage_CoarseSunSensor_default_instance_;
class VizMessage_CustomModel;
struct VizMessage_CustomModelDefaultTypeInternal;
extern VizMessage_CustomModelDefaultTypeInternal _VizMessage_CustomModel_default_instance_;
class VizMessage_Ellipsoid;
struct VizMessage_EllipsoidDefaultTypeInternal;
extern VizMessage_EllipsoidDefaultTypeInternal _VizMessage_Ellipsoid_default_instance_;
class VizMessage_EpochDateTime;
struct VizMessage_EpochDateTimeDefaultTypeInternal;
extern VizMessage_EpochDateTimeDefaultTypeInternal _VizMessage_EpochDateTime_default_instance_;
class VizMessage_GenericSensor;
struct VizMessage_GenericSensorDefaultTypeInternal;
extern VizMessage_GenericSensorDefaultTypeInternal _VizMessage_GenericSensor_default_instance_;
class VizMessage_GenericStorage;
struct VizMessage_GenericStorageDefaultTypeInternal;
extern VizMessage_GenericStorageDefaultTypeInternal _VizMessage_GenericStorage_default_instance_;
class VizMessage_InstrumentSettings;
struct VizMessage_InstrumentSettingsDefaultTypeInternal;
extern VizMessage_InstrumentSettingsDefaultTypeInternal _VizMessage_InstrumentSettings_default_instance_;
class VizMessage_KeepOutInCone;
struct VizMessage_KeepOutInConeDefaultTypeInternal;
extern VizMessage_KeepOutInConeDefaultTypeInternal _VizMessage_KeepOutInCone_default_instance_;
class VizMessage_Light;
struct VizMessage_LightDefaultTypeInternal;
extern VizMessage_LightDefaultTypeInternal _VizMessage_Light_default_instance_;
class VizMessage_LiveVizSettingsPb;
struct VizMessage_LiveVizSettingsPbDefaultTypeInternal;
extern VizMessage_LiveVizSettingsPbDefaultTypeInternal _VizMessage_LiveVizSettingsPb_default_instance_;
class VizMessage_Location;
struct VizMessage_LocationDefaultTypeInternal;
extern VizMessage_LocationDefaultTypeInternal _VizMessage_Location_default_instance_;
class VizMessage_MultiSphere;
struct VizMessage_MultiSphereDefaultTypeInternal;
extern VizMessage_MultiSphereDefaultTypeInternal _VizMessage_MultiSphere_default_instance_;
class VizMessage_PointLine;
struct VizMessage_PointLineDefaultTypeInternal;
extern VizMessage_PointLineDefaultTypeInternal _VizMessage_PointLine_default_instance_;
class VizMessage_ReactionWheel;
struct VizMessage_ReactionWheelDefaultTypeInternal;
extern VizMessage_ReactionWheelDefaultTypeInternal _VizMessage_ReactionWheel_default_instance_;
class VizMessage_Spacecraft;
struct VizMessage_SpacecraftDefaultTypeInternal;
extern VizMessage_SpacecraftDefaultTypeInternal _VizMessage_Spacecraft_default_instance_;
class VizMessage_StandardCameraSettings;
struct VizMessage_StandardCameraSettingsDefaultTypeInternal;
extern VizMessage_StandardCameraSettingsDefaultTypeInternal _VizMessage_StandardCameraSettings_default_instance_;
class VizMessage_Thruster;
struct VizMessage_ThrusterDefaultTypeInternal;
extern VizMessage_ThrusterDefaultTypeInternal _VizMessage_Thruster_default_instance_;
class VizMessage_TimeStamp;
struct VizMessage_TimeStampDefaultTypeInternal;
extern VizMessage_TimeStampDefaultTypeInternal _VizMessage_TimeStamp_default_instance_;
class VizMessage_Transceiver;
struct VizMessage_TransceiverDefaultTypeInternal;
extern VizMessage_TransceiverDefaultTypeInternal _VizMessage_Transceiver_default_instance_;
class VizMessage_VizSettingsPb;
struct VizMessage_VizSettingsPbDefaultTypeInternal;
extern VizMessage_VizSettingsPbDefaultTypeInternal _VizMessage_VizSettingsPb_default_instance_;
}  // namespace vizProtobufferMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::vizProtobufferMessage::VizMessage* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_ActuatorSettings* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_ActuatorSettings>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_CameraConfig* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_CameraConfig>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_CelestialBody* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_CelestialBody>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_CoarseSunSensor* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_CoarseSunSensor>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_CustomModel* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_CustomModel>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_Ellipsoid* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_Ellipsoid>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_EpochDateTime* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_EpochDateTime>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_GenericSensor* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_GenericSensor>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_GenericStorage* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_GenericStorage>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_InstrumentSettings* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_InstrumentSettings>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_KeepOutInCone* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_KeepOutInCone>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_Light* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_Light>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_LiveVizSettingsPb>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_Location* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_Location>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_MultiSphere* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_MultiSphere>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_PointLine* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_PointLine>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_ReactionWheel* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_ReactionWheel>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_Spacecraft* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_Spacecraft>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_StandardCameraSettings* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_StandardCameraSettings>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_Thruster* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_Thruster>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_TimeStamp* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_TimeStamp>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_Transceiver* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_Transceiver>(Arena*);
template<> ::vizProtobufferMessage::VizMessage_VizSettingsPb* Arena::CreateMaybeMessage<::vizProtobufferMessage::VizMessage_VizSettingsPb>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vizProtobufferMessage {

// ===================================================================

class VizMessage_EpochDateTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.EpochDateTime) */ {
 public:
  inline VizMessage_EpochDateTime() : VizMessage_EpochDateTime(nullptr) {}
  ~VizMessage_EpochDateTime() override;
  explicit constexpr VizMessage_EpochDateTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_EpochDateTime(const VizMessage_EpochDateTime& from);
  VizMessage_EpochDateTime(VizMessage_EpochDateTime&& from) noexcept
    : VizMessage_EpochDateTime() {
    *this = ::std::move(from);
  }

  inline VizMessage_EpochDateTime& operator=(const VizMessage_EpochDateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_EpochDateTime& operator=(VizMessage_EpochDateTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_EpochDateTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_EpochDateTime* internal_default_instance() {
    return reinterpret_cast<const VizMessage_EpochDateTime*>(
               &_VizMessage_EpochDateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VizMessage_EpochDateTime& a, VizMessage_EpochDateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_EpochDateTime* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_EpochDateTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_EpochDateTime* New() const final {
    return new VizMessage_EpochDateTime();
  }

  VizMessage_EpochDateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_EpochDateTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_EpochDateTime& from);
  void MergeFrom(const VizMessage_EpochDateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_EpochDateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.EpochDateTime";
  }
  protected:
  explicit VizMessage_EpochDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
    kHoursFieldNumber = 4,
    kSecondsFieldNumber = 6,
    kMinutesFieldNumber = 5,
  };
  // int32 year = 1;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day = 3;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hours = 4;
  void clear_hours();
  ::PROTOBUF_NAMESPACE_ID::int32 hours() const;
  void set_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hours() const;
  void _internal_set_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double seconds = 6;
  void clear_seconds();
  double seconds() const;
  void set_seconds(double value);
  private:
  double _internal_seconds() const;
  void _internal_set_seconds(double value);
  public:

  // int32 minutes = 5;
  void clear_minutes();
  ::PROTOBUF_NAMESPACE_ID::int32 minutes() const;
  void set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minutes() const;
  void _internal_set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.EpochDateTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 hours_;
  double seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 minutes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_TimeStamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.TimeStamp) */ {
 public:
  inline VizMessage_TimeStamp() : VizMessage_TimeStamp(nullptr) {}
  ~VizMessage_TimeStamp() override;
  explicit constexpr VizMessage_TimeStamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_TimeStamp(const VizMessage_TimeStamp& from);
  VizMessage_TimeStamp(VizMessage_TimeStamp&& from) noexcept
    : VizMessage_TimeStamp() {
    *this = ::std::move(from);
  }

  inline VizMessage_TimeStamp& operator=(const VizMessage_TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_TimeStamp& operator=(VizMessage_TimeStamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_TimeStamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_TimeStamp* internal_default_instance() {
    return reinterpret_cast<const VizMessage_TimeStamp*>(
               &_VizMessage_TimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VizMessage_TimeStamp& a, VizMessage_TimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_TimeStamp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_TimeStamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_TimeStamp* New() const final {
    return new VizMessage_TimeStamp();
  }

  VizMessage_TimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_TimeStamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_TimeStamp& from);
  void MergeFrom(const VizMessage_TimeStamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_TimeStamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.TimeStamp";
  }
  protected:
  explicit VizMessage_TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameNumberFieldNumber = 1,
    kSimTimeElapsedFieldNumber = 2,
  };
  // int64 frameNumber = 1;
  void clear_framenumber();
  ::PROTOBUF_NAMESPACE_ID::int64 framenumber() const;
  void set_framenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_framenumber() const;
  void _internal_set_framenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double simTimeElapsed = 2;
  void clear_simtimeelapsed();
  double simtimeelapsed() const;
  void set_simtimeelapsed(double value);
  private:
  double _internal_simtimeelapsed() const;
  void _internal_set_simtimeelapsed(double value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.TimeStamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 framenumber_;
  double simtimeelapsed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_CelestialBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.CelestialBody) */ {
 public:
  inline VizMessage_CelestialBody() : VizMessage_CelestialBody(nullptr) {}
  ~VizMessage_CelestialBody() override;
  explicit constexpr VizMessage_CelestialBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_CelestialBody(const VizMessage_CelestialBody& from);
  VizMessage_CelestialBody(VizMessage_CelestialBody&& from) noexcept
    : VizMessage_CelestialBody() {
    *this = ::std::move(from);
  }

  inline VizMessage_CelestialBody& operator=(const VizMessage_CelestialBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_CelestialBody& operator=(VizMessage_CelestialBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_CelestialBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_CelestialBody* internal_default_instance() {
    return reinterpret_cast<const VizMessage_CelestialBody*>(
               &_VizMessage_CelestialBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VizMessage_CelestialBody& a, VizMessage_CelestialBody& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_CelestialBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_CelestialBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_CelestialBody* New() const final {
    return new VizMessage_CelestialBody();
  }

  VizMessage_CelestialBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_CelestialBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_CelestialBody& from);
  void MergeFrom(const VizMessage_CelestialBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_CelestialBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.CelestialBody";
  }
  protected:
  explicit VizMessage_CelestialBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kRotationFieldNumber = 4,
    kBodyNameFieldNumber = 1,
    kModelDictionaryKeyFieldNumber = 8,
    kMuFieldNumber = 5,
    kRadiusEqFieldNumber = 6,
    kRadiusRatioFieldNumber = 7,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double velocity = 3;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  double _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity() const;
  void _internal_add_velocity(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity();
  public:
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity();

  // repeated double rotation = 4;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  private:
  double _internal_rotation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rotation() const;
  void _internal_add_rotation(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rotation();
  public:
  double rotation(int index) const;
  void set_rotation(int index, double value);
  void add_rotation(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rotation();

  // string bodyName = 1;
  void clear_bodyname();
  const std::string& bodyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bodyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bodyname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bodyname();
  void set_allocated_bodyname(std::string* bodyname);
  private:
  const std::string& _internal_bodyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bodyname(const std::string& value);
  std::string* _internal_mutable_bodyname();
  public:

  // string modelDictionaryKey = 8;
  void clear_modeldictionarykey();
  const std::string& modeldictionarykey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modeldictionarykey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modeldictionarykey();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_modeldictionarykey();
  void set_allocated_modeldictionarykey(std::string* modeldictionarykey);
  private:
  const std::string& _internal_modeldictionarykey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modeldictionarykey(const std::string& value);
  std::string* _internal_mutable_modeldictionarykey();
  public:

  // double mu = 5;
  void clear_mu();
  double mu() const;
  void set_mu(double value);
  private:
  double _internal_mu() const;
  void _internal_set_mu(double value);
  public:

  // double radiusEq = 6;
  void clear_radiuseq();
  double radiuseq() const;
  void set_radiuseq(double value);
  private:
  double _internal_radiuseq() const;
  void _internal_set_radiuseq(double value);
  public:

  // double radiusRatio = 7;
  void clear_radiusratio();
  double radiusratio() const;
  void set_radiusratio(double value);
  private:
  double _internal_radiusratio() const;
  void _internal_set_radiusratio(double value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.CelestialBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rotation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modeldictionarykey_;
  double mu_;
  double radiuseq_;
  double radiusratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_Spacecraft final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.Spacecraft) */ {
 public:
  inline VizMessage_Spacecraft() : VizMessage_Spacecraft(nullptr) {}
  ~VizMessage_Spacecraft() override;
  explicit constexpr VizMessage_Spacecraft(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_Spacecraft(const VizMessage_Spacecraft& from);
  VizMessage_Spacecraft(VizMessage_Spacecraft&& from) noexcept
    : VizMessage_Spacecraft() {
    *this = ::std::move(from);
  }

  inline VizMessage_Spacecraft& operator=(const VizMessage_Spacecraft& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_Spacecraft& operator=(VizMessage_Spacecraft&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_Spacecraft& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_Spacecraft* internal_default_instance() {
    return reinterpret_cast<const VizMessage_Spacecraft*>(
               &_VizMessage_Spacecraft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VizMessage_Spacecraft& a, VizMessage_Spacecraft& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_Spacecraft* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_Spacecraft* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_Spacecraft* New() const final {
    return new VizMessage_Spacecraft();
  }

  VizMessage_Spacecraft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_Spacecraft>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_Spacecraft& from);
  void MergeFrom(const VizMessage_Spacecraft& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_Spacecraft* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.Spacecraft";
  }
  protected:
  explicit VizMessage_Spacecraft(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kRotationFieldNumber = 4,
    kReactionWheelsFieldNumber = 5,
    kThrustersFieldNumber = 6,
    kCSSFieldNumber = 7,
    kGenericSensorsFieldNumber = 8,
    kTransceiversFieldNumber = 10,
    kStorageDevicesFieldNumber = 11,
    kLightsFieldNumber = 12,
    kOscOrbitLineColorFieldNumber = 14,
    kTrueTrajectoryLineColorFieldNumber = 15,
    kMultiSpheresFieldNumber = 17,
    kEllipsoidsFieldNumber = 18,
    kSpacecraftNameFieldNumber = 1,
    kSpacecraftSpriteFieldNumber = 9,
    kModelDictionaryKeyFieldNumber = 13,
    kLogoTextureFieldNumber = 16,
    kParentSpacecraftNameFieldNumber = 19,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double velocity = 3;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  double _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity() const;
  void _internal_add_velocity(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity();
  public:
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity();

  // repeated double rotation = 4;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  private:
  double _internal_rotation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rotation() const;
  void _internal_add_rotation(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rotation();
  public:
  double rotation(int index) const;
  void set_rotation(int index, double value);
  void add_rotation(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rotation();

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  int reactionwheels_size() const;
  private:
  int _internal_reactionwheels_size() const;
  public:
  void clear_reactionwheels();
  ::vizProtobufferMessage::VizMessage_ReactionWheel* mutable_reactionwheels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel >*
      mutable_reactionwheels();
  private:
  const ::vizProtobufferMessage::VizMessage_ReactionWheel& _internal_reactionwheels(int index) const;
  ::vizProtobufferMessage::VizMessage_ReactionWheel* _internal_add_reactionwheels();
  public:
  const ::vizProtobufferMessage::VizMessage_ReactionWheel& reactionwheels(int index) const;
  ::vizProtobufferMessage::VizMessage_ReactionWheel* add_reactionwheels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel >&
      reactionwheels() const;

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  int thrusters_size() const;
  private:
  int _internal_thrusters_size() const;
  public:
  void clear_thrusters();
  ::vizProtobufferMessage::VizMessage_Thruster* mutable_thrusters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster >*
      mutable_thrusters();
  private:
  const ::vizProtobufferMessage::VizMessage_Thruster& _internal_thrusters(int index) const;
  ::vizProtobufferMessage::VizMessage_Thruster* _internal_add_thrusters();
  public:
  const ::vizProtobufferMessage::VizMessage_Thruster& thrusters(int index) const;
  ::vizProtobufferMessage::VizMessage_Thruster* add_thrusters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster >&
      thrusters() const;

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  int css_size() const;
  private:
  int _internal_css_size() const;
  public:
  void clear_css();
  ::vizProtobufferMessage::VizMessage_CoarseSunSensor* mutable_css(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >*
      mutable_css();
  private:
  const ::vizProtobufferMessage::VizMessage_CoarseSunSensor& _internal_css(int index) const;
  ::vizProtobufferMessage::VizMessage_CoarseSunSensor* _internal_add_css();
  public:
  const ::vizProtobufferMessage::VizMessage_CoarseSunSensor& css(int index) const;
  ::vizProtobufferMessage::VizMessage_CoarseSunSensor* add_css();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >&
      css() const;

  // repeated .vizProtobufferMessage.VizMessage.GenericSensor genericSensors = 8;
  int genericsensors_size() const;
  private:
  int _internal_genericsensors_size() const;
  public:
  void clear_genericsensors();
  ::vizProtobufferMessage::VizMessage_GenericSensor* mutable_genericsensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericSensor >*
      mutable_genericsensors();
  private:
  const ::vizProtobufferMessage::VizMessage_GenericSensor& _internal_genericsensors(int index) const;
  ::vizProtobufferMessage::VizMessage_GenericSensor* _internal_add_genericsensors();
  public:
  const ::vizProtobufferMessage::VizMessage_GenericSensor& genericsensors(int index) const;
  ::vizProtobufferMessage::VizMessage_GenericSensor* add_genericsensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericSensor >&
      genericsensors() const;

  // repeated .vizProtobufferMessage.VizMessage.Transceiver transceivers = 10;
  int transceivers_size() const;
  private:
  int _internal_transceivers_size() const;
  public:
  void clear_transceivers();
  ::vizProtobufferMessage::VizMessage_Transceiver* mutable_transceivers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Transceiver >*
      mutable_transceivers();
  private:
  const ::vizProtobufferMessage::VizMessage_Transceiver& _internal_transceivers(int index) const;
  ::vizProtobufferMessage::VizMessage_Transceiver* _internal_add_transceivers();
  public:
  const ::vizProtobufferMessage::VizMessage_Transceiver& transceivers(int index) const;
  ::vizProtobufferMessage::VizMessage_Transceiver* add_transceivers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Transceiver >&
      transceivers() const;

  // repeated .vizProtobufferMessage.VizMessage.GenericStorage storageDevices = 11;
  int storagedevices_size() const;
  private:
  int _internal_storagedevices_size() const;
  public:
  void clear_storagedevices();
  ::vizProtobufferMessage::VizMessage_GenericStorage* mutable_storagedevices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericStorage >*
      mutable_storagedevices();
  private:
  const ::vizProtobufferMessage::VizMessage_GenericStorage& _internal_storagedevices(int index) const;
  ::vizProtobufferMessage::VizMessage_GenericStorage* _internal_add_storagedevices();
  public:
  const ::vizProtobufferMessage::VizMessage_GenericStorage& storagedevices(int index) const;
  ::vizProtobufferMessage::VizMessage_GenericStorage* add_storagedevices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericStorage >&
      storagedevices() const;

  // repeated .vizProtobufferMessage.VizMessage.Light lights = 12;
  int lights_size() const;
  private:
  int _internal_lights_size() const;
  public:
  void clear_lights();
  ::vizProtobufferMessage::VizMessage_Light* mutable_lights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Light >*
      mutable_lights();
  private:
  const ::vizProtobufferMessage::VizMessage_Light& _internal_lights(int index) const;
  ::vizProtobufferMessage::VizMessage_Light* _internal_add_lights();
  public:
  const ::vizProtobufferMessage::VizMessage_Light& lights(int index) const;
  ::vizProtobufferMessage::VizMessage_Light* add_lights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Light >&
      lights() const;

  // repeated int32 oscOrbitLineColor = 14;
  int oscorbitlinecolor_size() const;
  private:
  int _internal_oscorbitlinecolor_size() const;
  public:
  void clear_oscorbitlinecolor();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oscorbitlinecolor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_oscorbitlinecolor() const;
  void _internal_add_oscorbitlinecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_oscorbitlinecolor();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 oscorbitlinecolor(int index) const;
  void set_oscorbitlinecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_oscorbitlinecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      oscorbitlinecolor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_oscorbitlinecolor();

  // repeated int32 trueTrajectoryLineColor = 15;
  int truetrajectorylinecolor_size() const;
  private:
  int _internal_truetrajectorylinecolor_size() const;
  public:
  void clear_truetrajectorylinecolor();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_truetrajectorylinecolor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_truetrajectorylinecolor() const;
  void _internal_add_truetrajectorylinecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_truetrajectorylinecolor();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 truetrajectorylinecolor(int index) const;
  void set_truetrajectorylinecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_truetrajectorylinecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      truetrajectorylinecolor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_truetrajectorylinecolor();

  // repeated .vizProtobufferMessage.VizMessage.MultiSphere multiSpheres = 17;
  int multispheres_size() const;
  private:
  int _internal_multispheres_size() const;
  public:
  void clear_multispheres();
  ::vizProtobufferMessage::VizMessage_MultiSphere* mutable_multispheres(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_MultiSphere >*
      mutable_multispheres();
  private:
  const ::vizProtobufferMessage::VizMessage_MultiSphere& _internal_multispheres(int index) const;
  ::vizProtobufferMessage::VizMessage_MultiSphere* _internal_add_multispheres();
  public:
  const ::vizProtobufferMessage::VizMessage_MultiSphere& multispheres(int index) const;
  ::vizProtobufferMessage::VizMessage_MultiSphere* add_multispheres();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_MultiSphere >&
      multispheres() const;

  // repeated .vizProtobufferMessage.VizMessage.Ellipsoid ellipsoids = 18;
  int ellipsoids_size() const;
  private:
  int _internal_ellipsoids_size() const;
  public:
  void clear_ellipsoids();
  ::vizProtobufferMessage::VizMessage_Ellipsoid* mutable_ellipsoids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Ellipsoid >*
      mutable_ellipsoids();
  private:
  const ::vizProtobufferMessage::VizMessage_Ellipsoid& _internal_ellipsoids(int index) const;
  ::vizProtobufferMessage::VizMessage_Ellipsoid* _internal_add_ellipsoids();
  public:
  const ::vizProtobufferMessage::VizMessage_Ellipsoid& ellipsoids(int index) const;
  ::vizProtobufferMessage::VizMessage_Ellipsoid* add_ellipsoids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Ellipsoid >&
      ellipsoids() const;

  // string spacecraftName = 1;
  void clear_spacecraftname();
  const std::string& spacecraftname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spacecraftname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spacecraftname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_spacecraftname();
  void set_allocated_spacecraftname(std::string* spacecraftname);
  private:
  const std::string& _internal_spacecraftname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spacecraftname(const std::string& value);
  std::string* _internal_mutable_spacecraftname();
  public:

  // string spacecraftSprite = 9;
  void clear_spacecraftsprite();
  const std::string& spacecraftsprite() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spacecraftsprite(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spacecraftsprite();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_spacecraftsprite();
  void set_allocated_spacecraftsprite(std::string* spacecraftsprite);
  private:
  const std::string& _internal_spacecraftsprite() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spacecraftsprite(const std::string& value);
  std::string* _internal_mutable_spacecraftsprite();
  public:

  // string modelDictionaryKey = 13;
  void clear_modeldictionarykey();
  const std::string& modeldictionarykey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modeldictionarykey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modeldictionarykey();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_modeldictionarykey();
  void set_allocated_modeldictionarykey(std::string* modeldictionarykey);
  private:
  const std::string& _internal_modeldictionarykey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modeldictionarykey(const std::string& value);
  std::string* _internal_mutable_modeldictionarykey();
  public:

  // string logoTexture = 16;
  void clear_logotexture();
  const std::string& logotexture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logotexture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logotexture();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_logotexture();
  void set_allocated_logotexture(std::string* logotexture);
  private:
  const std::string& _internal_logotexture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logotexture(const std::string& value);
  std::string* _internal_mutable_logotexture();
  public:

  // string parentSpacecraftName = 19;
  void clear_parentspacecraftname();
  const std::string& parentspacecraftname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentspacecraftname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentspacecraftname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_parentspacecraftname();
  void set_allocated_parentspacecraftname(std::string* parentspacecraftname);
  private:
  const std::string& _internal_parentspacecraftname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentspacecraftname(const std::string& value);
  std::string* _internal_mutable_parentspacecraftname();
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.Spacecraft)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel > reactionwheels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster > thrusters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor > css_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericSensor > genericsensors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Transceiver > transceivers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericStorage > storagedevices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Light > lights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > oscorbitlinecolor_;
  mutable std::atomic<int> _oscorbitlinecolor_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > truetrajectorylinecolor_;
  mutable std::atomic<int> _truetrajectorylinecolor_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_MultiSphere > multispheres_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Ellipsoid > ellipsoids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecraftname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecraftsprite_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modeldictionarykey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logotexture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentspacecraftname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_ReactionWheel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.ReactionWheel) */ {
 public:
  inline VizMessage_ReactionWheel() : VizMessage_ReactionWheel(nullptr) {}
  ~VizMessage_ReactionWheel() override;
  explicit constexpr VizMessage_ReactionWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_ReactionWheel(const VizMessage_ReactionWheel& from);
  VizMessage_ReactionWheel(VizMessage_ReactionWheel&& from) noexcept
    : VizMessage_ReactionWheel() {
    *this = ::std::move(from);
  }

  inline VizMessage_ReactionWheel& operator=(const VizMessage_ReactionWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_ReactionWheel& operator=(VizMessage_ReactionWheel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_ReactionWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_ReactionWheel* internal_default_instance() {
    return reinterpret_cast<const VizMessage_ReactionWheel*>(
               &_VizMessage_ReactionWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VizMessage_ReactionWheel& a, VizMessage_ReactionWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_ReactionWheel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_ReactionWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_ReactionWheel* New() const final {
    return new VizMessage_ReactionWheel();
  }

  VizMessage_ReactionWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_ReactionWheel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_ReactionWheel& from);
  void MergeFrom(const VizMessage_ReactionWheel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_ReactionWheel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.ReactionWheel";
  }
  protected:
  explicit VizMessage_ReactionWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kSpinAxisVectorFieldNumber = 4,
    kWheelSpeedFieldNumber = 5,
    kWheelTorqueFieldNumber = 6,
    kMaxSpeedFieldNumber = 7,
    kMaxTorqueFieldNumber = 8,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double spinAxisVector = 4;
  int spinaxisvector_size() const;
  private:
  int _internal_spinaxisvector_size() const;
  public:
  void clear_spinaxisvector();
  private:
  double _internal_spinaxisvector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_spinaxisvector() const;
  void _internal_add_spinaxisvector(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_spinaxisvector();
  public:
  double spinaxisvector(int index) const;
  void set_spinaxisvector(int index, double value);
  void add_spinaxisvector(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      spinaxisvector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_spinaxisvector();

  // double wheelSpeed = 5;
  void clear_wheelspeed();
  double wheelspeed() const;
  void set_wheelspeed(double value);
  private:
  double _internal_wheelspeed() const;
  void _internal_set_wheelspeed(double value);
  public:

  // double wheelTorque = 6;
  void clear_wheeltorque();
  double wheeltorque() const;
  void set_wheeltorque(double value);
  private:
  double _internal_wheeltorque() const;
  void _internal_set_wheeltorque(double value);
  public:

  // double maxSpeed = 7;
  void clear_maxspeed();
  double maxspeed() const;
  void set_maxspeed(double value);
  private:
  double _internal_maxspeed() const;
  void _internal_set_maxspeed(double value);
  public:

  // double maxTorque = 8;
  void clear_maxtorque();
  double maxtorque() const;
  void set_maxtorque(double value);
  private:
  double _internal_maxtorque() const;
  void _internal_set_maxtorque(double value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.ReactionWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > spinaxisvector_;
  double wheelspeed_;
  double wheeltorque_;
  double maxspeed_;
  double maxtorque_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_Thruster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.Thruster) */ {
 public:
  inline VizMessage_Thruster() : VizMessage_Thruster(nullptr) {}
  ~VizMessage_Thruster() override;
  explicit constexpr VizMessage_Thruster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_Thruster(const VizMessage_Thruster& from);
  VizMessage_Thruster(VizMessage_Thruster&& from) noexcept
    : VizMessage_Thruster() {
    *this = ::std::move(from);
  }

  inline VizMessage_Thruster& operator=(const VizMessage_Thruster& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_Thruster& operator=(VizMessage_Thruster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_Thruster& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_Thruster* internal_default_instance() {
    return reinterpret_cast<const VizMessage_Thruster*>(
               &_VizMessage_Thruster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VizMessage_Thruster& a, VizMessage_Thruster& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_Thruster* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_Thruster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_Thruster* New() const final {
    return new VizMessage_Thruster();
  }

  VizMessage_Thruster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_Thruster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_Thruster& from);
  void MergeFrom(const VizMessage_Thruster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_Thruster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.Thruster";
  }
  protected:
  explicit VizMessage_Thruster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kThrustVectorFieldNumber = 4,
    kColorFieldNumber = 9,
    kThrusterTagFieldNumber = 8,
    kCurrentThrustFieldNumber = 5,
    kMaxThrustFieldNumber = 6,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double thrustVector = 4;
  int thrustvector_size() const;
  private:
  int _internal_thrustvector_size() const;
  public:
  void clear_thrustvector();
  private:
  double _internal_thrustvector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_thrustvector() const;
  void _internal_add_thrustvector(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_thrustvector();
  public:
  double thrustvector(int index) const;
  void set_thrustvector(int index, double value);
  void add_thrustvector(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      thrustvector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_thrustvector();

  // repeated int32 color = 9;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_color() const;
  void _internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_color();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 color(int index) const;
  void set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_color();

  // string thrusterTag = 8;
  void clear_thrustertag();
  const std::string& thrustertag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thrustertag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thrustertag();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_thrustertag();
  void set_allocated_thrustertag(std::string* thrustertag);
  private:
  const std::string& _internal_thrustertag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thrustertag(const std::string& value);
  std::string* _internal_mutable_thrustertag();
  public:

  // double currentThrust = 5;
  void clear_currentthrust();
  double currentthrust() const;
  void set_currentthrust(double value);
  private:
  double _internal_currentthrust() const;
  void _internal_set_currentthrust(double value);
  public:

  // double maxThrust = 6;
  void clear_maxthrust();
  double maxthrust() const;
  void set_maxthrust(double value);
  private:
  double _internal_maxthrust() const;
  void _internal_set_maxthrust(double value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.Thruster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > thrustvector_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thrustertag_;
  double currentthrust_;
  double maxthrust_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_CoarseSunSensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.CoarseSunSensor) */ {
 public:
  inline VizMessage_CoarseSunSensor() : VizMessage_CoarseSunSensor(nullptr) {}
  ~VizMessage_CoarseSunSensor() override;
  explicit constexpr VizMessage_CoarseSunSensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_CoarseSunSensor(const VizMessage_CoarseSunSensor& from);
  VizMessage_CoarseSunSensor(VizMessage_CoarseSunSensor&& from) noexcept
    : VizMessage_CoarseSunSensor() {
    *this = ::std::move(from);
  }

  inline VizMessage_CoarseSunSensor& operator=(const VizMessage_CoarseSunSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_CoarseSunSensor& operator=(VizMessage_CoarseSunSensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_CoarseSunSensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_CoarseSunSensor* internal_default_instance() {
    return reinterpret_cast<const VizMessage_CoarseSunSensor*>(
               &_VizMessage_CoarseSunSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VizMessage_CoarseSunSensor& a, VizMessage_CoarseSunSensor& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_CoarseSunSensor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_CoarseSunSensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_CoarseSunSensor* New() const final {
    return new VizMessage_CoarseSunSensor();
  }

  VizMessage_CoarseSunSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_CoarseSunSensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_CoarseSunSensor& from);
  void MergeFrom(const VizMessage_CoarseSunSensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_CoarseSunSensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.CoarseSunSensor";
  }
  protected:
  explicit VizMessage_CoarseSunSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kNormalVectorFieldNumber = 4,
    kFieldOfViewFieldNumber = 3,
    kCurrentMsmtFieldNumber = 5,
    kMaxMsmtFieldNumber = 6,
    kMinMsmtFieldNumber = 8,
    kCSSGroupIDFieldNumber = 7,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double normalVector = 4;
  int normalvector_size() const;
  private:
  int _internal_normalvector_size() const;
  public:
  void clear_normalvector();
  private:
  double _internal_normalvector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_normalvector() const;
  void _internal_add_normalvector(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_normalvector();
  public:
  double normalvector(int index) const;
  void set_normalvector(int index, double value);
  void add_normalvector(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      normalvector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_normalvector();

  // double fieldOfView = 3;
  void clear_fieldofview();
  double fieldofview() const;
  void set_fieldofview(double value);
  private:
  double _internal_fieldofview() const;
  void _internal_set_fieldofview(double value);
  public:

  // double currentMsmt = 5;
  void clear_currentmsmt();
  double currentmsmt() const;
  void set_currentmsmt(double value);
  private:
  double _internal_currentmsmt() const;
  void _internal_set_currentmsmt(double value);
  public:

  // double maxMsmt = 6;
  void clear_maxmsmt();
  double maxmsmt() const;
  void set_maxmsmt(double value);
  private:
  double _internal_maxmsmt() const;
  void _internal_set_maxmsmt(double value);
  public:

  // double minMsmt = 8;
  void clear_minmsmt();
  double minmsmt() const;
  void set_minmsmt(double value);
  private:
  double _internal_minmsmt() const;
  void _internal_set_minmsmt(double value);
  public:

  // int32 CSSGroupID = 7;
  void clear_cssgroupid();
  ::PROTOBUF_NAMESPACE_ID::int32 cssgroupid() const;
  void set_cssgroupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cssgroupid() const;
  void _internal_set_cssgroupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.CoarseSunSensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > normalvector_;
  double fieldofview_;
  double currentmsmt_;
  double maxmsmt_;
  double minmsmt_;
  ::PROTOBUF_NAMESPACE_ID::int32 cssgroupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_GenericSensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.GenericSensor) */ {
 public:
  inline VizMessage_GenericSensor() : VizMessage_GenericSensor(nullptr) {}
  ~VizMessage_GenericSensor() override;
  explicit constexpr VizMessage_GenericSensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_GenericSensor(const VizMessage_GenericSensor& from);
  VizMessage_GenericSensor(VizMessage_GenericSensor&& from) noexcept
    : VizMessage_GenericSensor() {
    *this = ::std::move(from);
  }

  inline VizMessage_GenericSensor& operator=(const VizMessage_GenericSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_GenericSensor& operator=(VizMessage_GenericSensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_GenericSensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_GenericSensor* internal_default_instance() {
    return reinterpret_cast<const VizMessage_GenericSensor*>(
               &_VizMessage_GenericSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VizMessage_GenericSensor& a, VizMessage_GenericSensor& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_GenericSensor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_GenericSensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_GenericSensor* New() const final {
    return new VizMessage_GenericSensor();
  }

  VizMessage_GenericSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_GenericSensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_GenericSensor& from);
  void MergeFrom(const VizMessage_GenericSensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_GenericSensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.GenericSensor";
  }
  protected:
  explicit VizMessage_GenericSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kFieldOfViewFieldNumber = 3,
    kNormalVectorFieldNumber = 4,
    kColorFieldNumber = 8,
    kLabelFieldNumber = 9,
    kIsHiddenFieldNumber = 5,
    kActivityStatusFieldNumber = 6,
    kSizeFieldNumber = 7,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double fieldOfView = 3;
  int fieldofview_size() const;
  private:
  int _internal_fieldofview_size() const;
  public:
  void clear_fieldofview();
  private:
  double _internal_fieldofview(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_fieldofview() const;
  void _internal_add_fieldofview(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_fieldofview();
  public:
  double fieldofview(int index) const;
  void set_fieldofview(int index, double value);
  void add_fieldofview(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      fieldofview() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_fieldofview();

  // repeated double normalVector = 4;
  int normalvector_size() const;
  private:
  int _internal_normalvector_size() const;
  public:
  void clear_normalvector();
  private:
  double _internal_normalvector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_normalvector() const;
  void _internal_add_normalvector(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_normalvector();
  public:
  double normalvector(int index) const;
  void set_normalvector(int index, double value);
  void add_normalvector(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      normalvector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_normalvector();

  // repeated int32 color = 8;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_color() const;
  void _internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_color();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 color(int index) const;
  void set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_color();

  // string label = 9;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // bool isHidden = 5;
  void clear_ishidden();
  bool ishidden() const;
  void set_ishidden(bool value);
  private:
  bool _internal_ishidden() const;
  void _internal_set_ishidden(bool value);
  public:

  // int32 activityStatus = 6;
  void clear_activitystatus();
  ::PROTOBUF_NAMESPACE_ID::int32 activitystatus() const;
  void set_activitystatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activitystatus() const;
  void _internal_set_activitystatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double size = 7;
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.GenericSensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > fieldofview_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > normalvector_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  bool ishidden_;
  ::PROTOBUF_NAMESPACE_ID::int32 activitystatus_;
  double size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_GenericStorage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.GenericStorage) */ {
 public:
  inline VizMessage_GenericStorage() : VizMessage_GenericStorage(nullptr) {}
  ~VizMessage_GenericStorage() override;
  explicit constexpr VizMessage_GenericStorage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_GenericStorage(const VizMessage_GenericStorage& from);
  VizMessage_GenericStorage(VizMessage_GenericStorage&& from) noexcept
    : VizMessage_GenericStorage() {
    *this = ::std::move(from);
  }

  inline VizMessage_GenericStorage& operator=(const VizMessage_GenericStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_GenericStorage& operator=(VizMessage_GenericStorage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_GenericStorage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_GenericStorage* internal_default_instance() {
    return reinterpret_cast<const VizMessage_GenericStorage*>(
               &_VizMessage_GenericStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VizMessage_GenericStorage& a, VizMessage_GenericStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_GenericStorage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_GenericStorage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_GenericStorage* New() const final {
    return new VizMessage_GenericStorage();
  }

  VizMessage_GenericStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_GenericStorage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_GenericStorage& from);
  void MergeFrom(const VizMessage_GenericStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_GenericStorage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.GenericStorage";
  }
  protected:
  explicit VizMessage_GenericStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 6,
    kThresholdsFieldNumber = 7,
    kLabelFieldNumber = 2,
    kUnitsFieldNumber = 5,
    kCurrentValueFieldNumber = 3,
    kMaxValueFieldNumber = 4,
  };
  // repeated int32 color = 6;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_color() const;
  void _internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_color();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 color(int index) const;
  void set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_color();

  // repeated int32 thresholds = 7;
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thresholds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_thresholds() const;
  void _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_thresholds();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 thresholds(int index) const;
  void set_thresholds(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_thresholds(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      thresholds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_thresholds();

  // string label = 2;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string units = 5;
  void clear_units();
  const std::string& units() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_units(ArgT0&& arg0, ArgT... args);
  std::string* mutable_units();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // double currentValue = 3;
  void clear_currentvalue();
  double currentvalue() const;
  void set_currentvalue(double value);
  private:
  double _internal_currentvalue() const;
  void _internal_set_currentvalue(double value);
  public:

  // double maxValue = 4;
  void clear_maxvalue();
  double maxvalue() const;
  void set_maxvalue(double value);
  private:
  double _internal_maxvalue() const;
  void _internal_set_maxvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.GenericStorage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > thresholds_;
  mutable std::atomic<int> _thresholds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  double currentvalue_;
  double maxvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_Light final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.Light) */ {
 public:
  inline VizMessage_Light() : VizMessage_Light(nullptr) {}
  ~VizMessage_Light() override;
  explicit constexpr VizMessage_Light(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_Light(const VizMessage_Light& from);
  VizMessage_Light(VizMessage_Light&& from) noexcept
    : VizMessage_Light() {
    *this = ::std::move(from);
  }

  inline VizMessage_Light& operator=(const VizMessage_Light& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_Light& operator=(VizMessage_Light&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_Light& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_Light* internal_default_instance() {
    return reinterpret_cast<const VizMessage_Light*>(
               &_VizMessage_Light_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VizMessage_Light& a, VizMessage_Light& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_Light* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_Light* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_Light* New() const final {
    return new VizMessage_Light();
  }

  VizMessage_Light* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_Light>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_Light& from);
  void MergeFrom(const VizMessage_Light& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_Light* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.Light";
  }
  protected:
  explicit VizMessage_Light(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kNormalVectorFieldNumber = 4,
    kColorFieldNumber = 10,
    kLabelFieldNumber = 1,
    kFieldOfViewFieldNumber = 3,
    kRangeFieldNumber = 6,
    kLightOnFieldNumber = 5,
    kShowLightMarkerFieldNumber = 8,
    kIntensityFieldNumber = 7,
    kMarkerDiameterFieldNumber = 9,
    kGammaSaturationFieldNumber = 11,
    kLensFlareBrightnessFieldNumber = 13,
    kLensFlareFadeSpeedFieldNumber = 14,
    kShowLensFlareFieldNumber = 12,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double normalVector = 4;
  int normalvector_size() const;
  private:
  int _internal_normalvector_size() const;
  public:
  void clear_normalvector();
  private:
  double _internal_normalvector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_normalvector() const;
  void _internal_add_normalvector(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_normalvector();
  public:
  double normalvector(int index) const;
  void set_normalvector(int index, double value);
  void add_normalvector(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      normalvector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_normalvector();

  // repeated int32 color = 10;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_color() const;
  void _internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_color();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 color(int index) const;
  void set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_color();

  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // double fieldOfView = 3;
  void clear_fieldofview();
  double fieldofview() const;
  void set_fieldofview(double value);
  private:
  double _internal_fieldofview() const;
  void _internal_set_fieldofview(double value);
  public:

  // double range = 6;
  void clear_range();
  double range() const;
  void set_range(double value);
  private:
  double _internal_range() const;
  void _internal_set_range(double value);
  public:

  // int32 lightOn = 5;
  void clear_lighton();
  ::PROTOBUF_NAMESPACE_ID::int32 lighton() const;
  void set_lighton(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lighton() const;
  void _internal_set_lighton(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showLightMarker = 8;
  void clear_showlightmarker();
  ::PROTOBUF_NAMESPACE_ID::int32 showlightmarker() const;
  void set_showlightmarker(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showlightmarker() const;
  void _internal_set_showlightmarker(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double intensity = 7;
  void clear_intensity();
  double intensity() const;
  void set_intensity(double value);
  private:
  double _internal_intensity() const;
  void _internal_set_intensity(double value);
  public:

  // double markerDiameter = 9;
  void clear_markerdiameter();
  double markerdiameter() const;
  void set_markerdiameter(double value);
  private:
  double _internal_markerdiameter() const;
  void _internal_set_markerdiameter(double value);
  public:

  // double gammaSaturation = 11;
  void clear_gammasaturation();
  double gammasaturation() const;
  void set_gammasaturation(double value);
  private:
  double _internal_gammasaturation() const;
  void _internal_set_gammasaturation(double value);
  public:

  // double lensFlareBrightness = 13;
  void clear_lensflarebrightness();
  double lensflarebrightness() const;
  void set_lensflarebrightness(double value);
  private:
  double _internal_lensflarebrightness() const;
  void _internal_set_lensflarebrightness(double value);
  public:

  // double lensFlareFadeSpeed = 14;
  void clear_lensflarefadespeed();
  double lensflarefadespeed() const;
  void set_lensflarefadespeed(double value);
  private:
  double _internal_lensflarefadespeed() const;
  void _internal_set_lensflarefadespeed(double value);
  public:

  // int32 showLensFlare = 12;
  void clear_showlensflare();
  ::PROTOBUF_NAMESPACE_ID::int32 showlensflare() const;
  void set_showlensflare(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showlensflare() const;
  void _internal_set_showlensflare(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.Light)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > normalvector_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  double fieldofview_;
  double range_;
  ::PROTOBUF_NAMESPACE_ID::int32 lighton_;
  ::PROTOBUF_NAMESPACE_ID::int32 showlightmarker_;
  double intensity_;
  double markerdiameter_;
  double gammasaturation_;
  double lensflarebrightness_;
  double lensflarefadespeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 showlensflare_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_Transceiver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.Transceiver) */ {
 public:
  inline VizMessage_Transceiver() : VizMessage_Transceiver(nullptr) {}
  ~VizMessage_Transceiver() override;
  explicit constexpr VizMessage_Transceiver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_Transceiver(const VizMessage_Transceiver& from);
  VizMessage_Transceiver(VizMessage_Transceiver&& from) noexcept
    : VizMessage_Transceiver() {
    *this = ::std::move(from);
  }

  inline VizMessage_Transceiver& operator=(const VizMessage_Transceiver& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_Transceiver& operator=(VizMessage_Transceiver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_Transceiver& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_Transceiver* internal_default_instance() {
    return reinterpret_cast<const VizMessage_Transceiver*>(
               &_VizMessage_Transceiver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VizMessage_Transceiver& a, VizMessage_Transceiver& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_Transceiver* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_Transceiver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_Transceiver* New() const final {
    return new VizMessage_Transceiver();
  }

  VizMessage_Transceiver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_Transceiver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_Transceiver& from);
  void MergeFrom(const VizMessage_Transceiver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_Transceiver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.Transceiver";
  }
  protected:
  explicit VizMessage_Transceiver(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kNormalVectorFieldNumber = 4,
    kColorFieldNumber = 8,
    kLabelFieldNumber = 9,
    kFieldOfViewFieldNumber = 3,
    kIsHiddenFieldNumber = 5,
    kTransmitStatusFieldNumber = 6,
    kAnimationSpeedFieldNumber = 10,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double normalVector = 4;
  int normalvector_size() const;
  private:
  int _internal_normalvector_size() const;
  public:
  void clear_normalvector();
  private:
  double _internal_normalvector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_normalvector() const;
  void _internal_add_normalvector(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_normalvector();
  public:
  double normalvector(int index) const;
  void set_normalvector(int index, double value);
  void add_normalvector(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      normalvector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_normalvector();

  // repeated int32 color = 8;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_color() const;
  void _internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_color();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 color(int index) const;
  void set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_color();

  // string label = 9;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // double fieldOfView = 3;
  void clear_fieldofview();
  double fieldofview() const;
  void set_fieldofview(double value);
  private:
  double _internal_fieldofview() const;
  void _internal_set_fieldofview(double value);
  public:

  // bool isHidden = 5;
  void clear_ishidden();
  bool ishidden() const;
  void set_ishidden(bool value);
  private:
  bool _internal_ishidden() const;
  void _internal_set_ishidden(bool value);
  public:

  // int32 transmitStatus = 6;
  void clear_transmitstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 transmitstatus() const;
  void set_transmitstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transmitstatus() const;
  void _internal_set_transmitstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 animationSpeed = 10;
  void clear_animationspeed();
  ::PROTOBUF_NAMESPACE_ID::int32 animationspeed() const;
  void set_animationspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_animationspeed() const;
  void _internal_set_animationspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.Transceiver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > normalvector_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  double fieldofview_;
  bool ishidden_;
  ::PROTOBUF_NAMESPACE_ID::int32 transmitstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 animationspeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_CameraConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.CameraConfig) */ {
 public:
  inline VizMessage_CameraConfig() : VizMessage_CameraConfig(nullptr) {}
  ~VizMessage_CameraConfig() override;
  explicit constexpr VizMessage_CameraConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_CameraConfig(const VizMessage_CameraConfig& from);
  VizMessage_CameraConfig(VizMessage_CameraConfig&& from) noexcept
    : VizMessage_CameraConfig() {
    *this = ::std::move(from);
  }

  inline VizMessage_CameraConfig& operator=(const VizMessage_CameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_CameraConfig& operator=(VizMessage_CameraConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_CameraConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_CameraConfig* internal_default_instance() {
    return reinterpret_cast<const VizMessage_CameraConfig*>(
               &_VizMessage_CameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VizMessage_CameraConfig& a, VizMessage_CameraConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_CameraConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_CameraConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_CameraConfig* New() const final {
    return new VizMessage_CameraConfig();
  }

  VizMessage_CameraConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_CameraConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_CameraConfig& from);
  void MergeFrom(const VizMessage_CameraConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_CameraConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.CameraConfig";
  }
  protected:
  explicit VizMessage_CameraConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionFieldNumber = 4,
    kCameraPosBFieldNumber = 7,
    kCameraDirBFieldNumber = 8,
    kParentNameFieldNumber = 2,
    kSkyboxFieldNumber = 10,
    kCameraIDFieldNumber = 1,
    kFieldOfViewFieldNumber = 3,
    kRenderRateFieldNumber = 9,
    kPostProcessingOnFieldNumber = 11,
    kPpFocusDistanceFieldNumber = 12,
    kPpApertureFieldNumber = 13,
    kPpFocalLengthFieldNumber = 14,
    kPpMaxBlurSizeFieldNumber = 15,
    kUpdateCameraParametersFieldNumber = 5,
  };
  // repeated int64 resolution = 4;
  int resolution_size() const;
  private:
  int _internal_resolution_size() const;
  public:
  void clear_resolution();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_resolution(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_resolution() const;
  void _internal_add_resolution(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_resolution();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 resolution(int index) const;
  void set_resolution(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_resolution(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      resolution() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_resolution();

  // repeated double cameraPos_B = 7;
  int camerapos_b_size() const;
  private:
  int _internal_camerapos_b_size() const;
  public:
  void clear_camerapos_b();
  private:
  double _internal_camerapos_b(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_camerapos_b() const;
  void _internal_add_camerapos_b(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_camerapos_b();
  public:
  double camerapos_b(int index) const;
  void set_camerapos_b(int index, double value);
  void add_camerapos_b(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      camerapos_b() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_camerapos_b();

  // repeated double cameraDir_B = 8;
  int cameradir_b_size() const;
  private:
  int _internal_cameradir_b_size() const;
  public:
  void clear_cameradir_b();
  private:
  double _internal_cameradir_b(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_cameradir_b() const;
  void _internal_add_cameradir_b(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_cameradir_b();
  public:
  double cameradir_b(int index) const;
  void set_cameradir_b(int index, double value);
  void add_cameradir_b(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      cameradir_b() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_cameradir_b();

  // string parentName = 2;
  void clear_parentname();
  const std::string& parentname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_parentname();
  void set_allocated_parentname(std::string* parentname);
  private:
  const std::string& _internal_parentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentname(const std::string& value);
  std::string* _internal_mutable_parentname();
  public:

  // string skybox = 10;
  void clear_skybox();
  const std::string& skybox() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skybox(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skybox();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_skybox();
  void set_allocated_skybox(std::string* skybox);
  private:
  const std::string& _internal_skybox() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skybox(const std::string& value);
  std::string* _internal_mutable_skybox();
  public:

  // int64 cameraID = 1;
  void clear_cameraid();
  ::PROTOBUF_NAMESPACE_ID::int64 cameraid() const;
  void set_cameraid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cameraid() const;
  void _internal_set_cameraid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double fieldOfView = 3;
  void clear_fieldofview();
  double fieldofview() const;
  void set_fieldofview(double value);
  private:
  double _internal_fieldofview() const;
  void _internal_set_fieldofview(double value);
  public:

  // uint64 renderRate = 9;
  void clear_renderrate();
  ::PROTOBUF_NAMESPACE_ID::uint64 renderrate() const;
  void set_renderrate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_renderrate() const;
  void _internal_set_renderrate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 postProcessingOn = 11;
  void clear_postprocessingon();
  ::PROTOBUF_NAMESPACE_ID::int64 postprocessingon() const;
  void set_postprocessingon(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_postprocessingon() const;
  void _internal_set_postprocessingon(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double ppFocusDistance = 12;
  void clear_ppfocusdistance();
  double ppfocusdistance() const;
  void set_ppfocusdistance(double value);
  private:
  double _internal_ppfocusdistance() const;
  void _internal_set_ppfocusdistance(double value);
  public:

  // double ppAperture = 13;
  void clear_ppaperture();
  double ppaperture() const;
  void set_ppaperture(double value);
  private:
  double _internal_ppaperture() const;
  void _internal_set_ppaperture(double value);
  public:

  // double ppFocalLength = 14;
  void clear_ppfocallength();
  double ppfocallength() const;
  void set_ppfocallength(double value);
  private:
  double _internal_ppfocallength() const;
  void _internal_set_ppfocallength(double value);
  public:

  // int64 ppMaxBlurSize = 15;
  void clear_ppmaxblursize();
  ::PROTOBUF_NAMESPACE_ID::int64 ppmaxblursize() const;
  void set_ppmaxblursize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ppmaxblursize() const;
  void _internal_set_ppmaxblursize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool updateCameraParameters = 5;
  void clear_updatecameraparameters();
  bool updatecameraparameters() const;
  void set_updatecameraparameters(bool value);
  private:
  bool _internal_updatecameraparameters() const;
  void _internal_set_updatecameraparameters(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.CameraConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > resolution_;
  mutable std::atomic<int> _resolution_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > camerapos_b_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > cameradir_b_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skybox_;
  ::PROTOBUF_NAMESPACE_ID::int64 cameraid_;
  double fieldofview_;
  ::PROTOBUF_NAMESPACE_ID::uint64 renderrate_;
  ::PROTOBUF_NAMESPACE_ID::int64 postprocessingon_;
  double ppfocusdistance_;
  double ppaperture_;
  double ppfocallength_;
  ::PROTOBUF_NAMESPACE_ID::int64 ppmaxblursize_;
  bool updatecameraparameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_PointLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.PointLine) */ {
 public:
  inline VizMessage_PointLine() : VizMessage_PointLine(nullptr) {}
  ~VizMessage_PointLine() override;
  explicit constexpr VizMessage_PointLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_PointLine(const VizMessage_PointLine& from);
  VizMessage_PointLine(VizMessage_PointLine&& from) noexcept
    : VizMessage_PointLine() {
    *this = ::std::move(from);
  }

  inline VizMessage_PointLine& operator=(const VizMessage_PointLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_PointLine& operator=(VizMessage_PointLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_PointLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_PointLine* internal_default_instance() {
    return reinterpret_cast<const VizMessage_PointLine*>(
               &_VizMessage_PointLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VizMessage_PointLine& a, VizMessage_PointLine& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_PointLine* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_PointLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_PointLine* New() const final {
    return new VizMessage_PointLine();
  }

  VizMessage_PointLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_PointLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_PointLine& from);
  void MergeFrom(const VizMessage_PointLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_PointLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.PointLine";
  }
  protected:
  explicit VizMessage_PointLine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineColorFieldNumber = 3,
    kFromBodyNameFieldNumber = 1,
    kToBodyNameFieldNumber = 2,
  };
  // repeated int32 lineColor = 3;
  int linecolor_size() const;
  private:
  int _internal_linecolor_size() const;
  public:
  void clear_linecolor();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_linecolor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_linecolor() const;
  void _internal_add_linecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_linecolor();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 linecolor(int index) const;
  void set_linecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_linecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      linecolor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_linecolor();

  // string fromBodyName = 1;
  void clear_frombodyname();
  const std::string& frombodyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frombodyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frombodyname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_frombodyname();
  void set_allocated_frombodyname(std::string* frombodyname);
  private:
  const std::string& _internal_frombodyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frombodyname(const std::string& value);
  std::string* _internal_mutable_frombodyname();
  public:

  // string toBodyName = 2;
  void clear_tobodyname();
  const std::string& tobodyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tobodyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tobodyname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tobodyname();
  void set_allocated_tobodyname(std::string* tobodyname);
  private:
  const std::string& _internal_tobodyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tobodyname(const std::string& value);
  std::string* _internal_mutable_tobodyname();
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.PointLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > linecolor_;
  mutable std::atomic<int> _linecolor_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frombodyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tobodyname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_KeepOutInCone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.KeepOutInCone) */ {
 public:
  inline VizMessage_KeepOutInCone() : VizMessage_KeepOutInCone(nullptr) {}
  ~VizMessage_KeepOutInCone() override;
  explicit constexpr VizMessage_KeepOutInCone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_KeepOutInCone(const VizMessage_KeepOutInCone& from);
  VizMessage_KeepOutInCone(VizMessage_KeepOutInCone&& from) noexcept
    : VizMessage_KeepOutInCone() {
    *this = ::std::move(from);
  }

  inline VizMessage_KeepOutInCone& operator=(const VizMessage_KeepOutInCone& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_KeepOutInCone& operator=(VizMessage_KeepOutInCone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_KeepOutInCone& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_KeepOutInCone* internal_default_instance() {
    return reinterpret_cast<const VizMessage_KeepOutInCone*>(
               &_VizMessage_KeepOutInCone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VizMessage_KeepOutInCone& a, VizMessage_KeepOutInCone& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_KeepOutInCone* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_KeepOutInCone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_KeepOutInCone* New() const final {
    return new VizMessage_KeepOutInCone();
  }

  VizMessage_KeepOutInCone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_KeepOutInCone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_KeepOutInCone& from);
  void MergeFrom(const VizMessage_KeepOutInCone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_KeepOutInCone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.KeepOutInCone";
  }
  protected:
  explicit VizMessage_KeepOutInCone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kNormalVectorFieldNumber = 3,
    kConeColorFieldNumber = 8,
    kFromBodyNameFieldNumber = 6,
    kToBodyNameFieldNumber = 7,
    kConeNameFieldNumber = 9,
    kIncidenceAngleFieldNumber = 4,
    kConeHeightFieldNumber = 5,
    kIsKeepInFieldNumber = 1,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double normalVector = 3;
  int normalvector_size() const;
  private:
  int _internal_normalvector_size() const;
  public:
  void clear_normalvector();
  private:
  double _internal_normalvector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_normalvector() const;
  void _internal_add_normalvector(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_normalvector();
  public:
  double normalvector(int index) const;
  void set_normalvector(int index, double value);
  void add_normalvector(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      normalvector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_normalvector();

  // repeated int32 coneColor = 8;
  int conecolor_size() const;
  private:
  int _internal_conecolor_size() const;
  public:
  void clear_conecolor();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_conecolor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_conecolor() const;
  void _internal_add_conecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_conecolor();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 conecolor(int index) const;
  void set_conecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_conecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      conecolor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_conecolor();

  // string fromBodyName = 6;
  void clear_frombodyname();
  const std::string& frombodyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frombodyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frombodyname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_frombodyname();
  void set_allocated_frombodyname(std::string* frombodyname);
  private:
  const std::string& _internal_frombodyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frombodyname(const std::string& value);
  std::string* _internal_mutable_frombodyname();
  public:

  // string toBodyName = 7;
  void clear_tobodyname();
  const std::string& tobodyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tobodyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tobodyname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tobodyname();
  void set_allocated_tobodyname(std::string* tobodyname);
  private:
  const std::string& _internal_tobodyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tobodyname(const std::string& value);
  std::string* _internal_mutable_tobodyname();
  public:

  // string coneName = 9;
  void clear_conename();
  const std::string& conename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conename();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_conename();
  void set_allocated_conename(std::string* conename);
  private:
  const std::string& _internal_conename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conename(const std::string& value);
  std::string* _internal_mutable_conename();
  public:

  // double incidenceAngle = 4;
  void clear_incidenceangle();
  double incidenceangle() const;
  void set_incidenceangle(double value);
  private:
  double _internal_incidenceangle() const;
  void _internal_set_incidenceangle(double value);
  public:

  // double coneHeight = 5;
  void clear_coneheight();
  double coneheight() const;
  void set_coneheight(double value);
  private:
  double _internal_coneheight() const;
  void _internal_set_coneheight(double value);
  public:

  // bool isKeepIn = 1;
  void clear_iskeepin();
  bool iskeepin() const;
  void set_iskeepin(bool value);
  private:
  bool _internal_iskeepin() const;
  void _internal_set_iskeepin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.KeepOutInCone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > normalvector_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > conecolor_;
  mutable std::atomic<int> _conecolor_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frombodyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tobodyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conename_;
  double incidenceangle_;
  double coneheight_;
  bool iskeepin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_StandardCameraSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.StandardCameraSettings) */ {
 public:
  inline VizMessage_StandardCameraSettings() : VizMessage_StandardCameraSettings(nullptr) {}
  ~VizMessage_StandardCameraSettings() override;
  explicit constexpr VizMessage_StandardCameraSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_StandardCameraSettings(const VizMessage_StandardCameraSettings& from);
  VizMessage_StandardCameraSettings(VizMessage_StandardCameraSettings&& from) noexcept
    : VizMessage_StandardCameraSettings() {
    *this = ::std::move(from);
  }

  inline VizMessage_StandardCameraSettings& operator=(const VizMessage_StandardCameraSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_StandardCameraSettings& operator=(VizMessage_StandardCameraSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_StandardCameraSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_StandardCameraSettings* internal_default_instance() {
    return reinterpret_cast<const VizMessage_StandardCameraSettings*>(
               &_VizMessage_StandardCameraSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VizMessage_StandardCameraSettings& a, VizMessage_StandardCameraSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_StandardCameraSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_StandardCameraSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_StandardCameraSettings* New() const final {
    return new VizMessage_StandardCameraSettings();
  }

  VizMessage_StandardCameraSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_StandardCameraSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_StandardCameraSettings& from);
  void MergeFrom(const VizMessage_StandardCameraSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_StandardCameraSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.StandardCameraSettings";
  }
  protected:
  explicit VizMessage_StandardCameraSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointingVectorFieldNumber = 8,
    kPositionFieldNumber = 9,
    kSpacecraftNameFieldNumber = 1,
    kBodyTargetFieldNumber = 6,
    kDisplayNameFieldNumber = 10,
    kFieldOfViewFieldNumber = 5,
    kSetModeFieldNumber = 3,
    kSetViewFieldNumber = 7,
  };
  // repeated double pointingVector = 8;
  int pointingvector_size() const;
  private:
  int _internal_pointingvector_size() const;
  public:
  void clear_pointingvector();
  private:
  double _internal_pointingvector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_pointingvector() const;
  void _internal_add_pointingvector(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_pointingvector();
  public:
  double pointingvector(int index) const;
  void set_pointingvector(int index, double value);
  void add_pointingvector(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      pointingvector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_pointingvector();

  // repeated double position = 9;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // string spacecraftName = 1;
  void clear_spacecraftname();
  const std::string& spacecraftname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spacecraftname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spacecraftname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_spacecraftname();
  void set_allocated_spacecraftname(std::string* spacecraftname);
  private:
  const std::string& _internal_spacecraftname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spacecraftname(const std::string& value);
  std::string* _internal_mutable_spacecraftname();
  public:

  // string bodyTarget = 6;
  void clear_bodytarget();
  const std::string& bodytarget() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bodytarget(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bodytarget();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bodytarget();
  void set_allocated_bodytarget(std::string* bodytarget);
  private:
  const std::string& _internal_bodytarget() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bodytarget(const std::string& value);
  std::string* _internal_mutable_bodytarget();
  public:

  // string displayName = 10;
  void clear_displayname();
  const std::string& displayname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_displayname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_displayname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // double fieldOfView = 5;
  void clear_fieldofview();
  double fieldofview() const;
  void set_fieldofview(double value);
  private:
  double _internal_fieldofview() const;
  void _internal_set_fieldofview(double value);
  public:

  // int32 setMode = 3;
  void clear_setmode();
  ::PROTOBUF_NAMESPACE_ID::int32 setmode() const;
  void set_setmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_setmode() const;
  void _internal_set_setmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 setView = 7;
  void clear_setview();
  ::PROTOBUF_NAMESPACE_ID::int32 setview() const;
  void set_setview(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_setview() const;
  void _internal_set_setview(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.StandardCameraSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > pointingvector_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecraftname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodytarget_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
  double fieldofview_;
  ::PROTOBUF_NAMESPACE_ID::int32 setmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 setview_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_ActuatorSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.ActuatorSettings) */ {
 public:
  inline VizMessage_ActuatorSettings() : VizMessage_ActuatorSettings(nullptr) {}
  ~VizMessage_ActuatorSettings() override;
  explicit constexpr VizMessage_ActuatorSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_ActuatorSettings(const VizMessage_ActuatorSettings& from);
  VizMessage_ActuatorSettings(VizMessage_ActuatorSettings&& from) noexcept
    : VizMessage_ActuatorSettings() {
    *this = ::std::move(from);
  }

  inline VizMessage_ActuatorSettings& operator=(const VizMessage_ActuatorSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_ActuatorSettings& operator=(VizMessage_ActuatorSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_ActuatorSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_ActuatorSettings* internal_default_instance() {
    return reinterpret_cast<const VizMessage_ActuatorSettings*>(
               &_VizMessage_ActuatorSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VizMessage_ActuatorSettings& a, VizMessage_ActuatorSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_ActuatorSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_ActuatorSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_ActuatorSettings* New() const final {
    return new VizMessage_ActuatorSettings();
  }

  VizMessage_ActuatorSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_ActuatorSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_ActuatorSettings& from);
  void MergeFrom(const VizMessage_ActuatorSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_ActuatorSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.ActuatorSettings";
  }
  protected:
  explicit VizMessage_ActuatorSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpacecraftNameFieldNumber = 1,
    kViewThrusterPanelFieldNumber = 2,
    kViewThrusterHUDFieldNumber = 3,
    kViewRWPanelFieldNumber = 4,
    kViewRWHUDFieldNumber = 5,
    kShowThrusterLabelsFieldNumber = 6,
    kShowRWLabelsFieldNumber = 7,
  };
  // string spacecraftName = 1;
  void clear_spacecraftname();
  const std::string& spacecraftname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spacecraftname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spacecraftname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_spacecraftname();
  void set_allocated_spacecraftname(std::string* spacecraftname);
  private:
  const std::string& _internal_spacecraftname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spacecraftname(const std::string& value);
  std::string* _internal_mutable_spacecraftname();
  public:

  // int32 viewThrusterPanel = 2;
  void clear_viewthrusterpanel();
  ::PROTOBUF_NAMESPACE_ID::int32 viewthrusterpanel() const;
  void set_viewthrusterpanel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viewthrusterpanel() const;
  void _internal_set_viewthrusterpanel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 viewThrusterHUD = 3;
  void clear_viewthrusterhud();
  ::PROTOBUF_NAMESPACE_ID::int32 viewthrusterhud() const;
  void set_viewthrusterhud(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viewthrusterhud() const;
  void _internal_set_viewthrusterhud(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 viewRWPanel = 4;
  void clear_viewrwpanel();
  ::PROTOBUF_NAMESPACE_ID::int32 viewrwpanel() const;
  void set_viewrwpanel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viewrwpanel() const;
  void _internal_set_viewrwpanel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 viewRWHUD = 5;
  void clear_viewrwhud();
  ::PROTOBUF_NAMESPACE_ID::int32 viewrwhud() const;
  void set_viewrwhud(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viewrwhud() const;
  void _internal_set_viewrwhud(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showThrusterLabels = 6;
  void clear_showthrusterlabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showthrusterlabels() const;
  void set_showthrusterlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showthrusterlabels() const;
  void _internal_set_showthrusterlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showRWLabels = 7;
  void clear_showrwlabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showrwlabels() const;
  void set_showrwlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showrwlabels() const;
  void _internal_set_showrwlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.ActuatorSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecraftname_;
  ::PROTOBUF_NAMESPACE_ID::int32 viewthrusterpanel_;
  ::PROTOBUF_NAMESPACE_ID::int32 viewthrusterhud_;
  ::PROTOBUF_NAMESPACE_ID::int32 viewrwpanel_;
  ::PROTOBUF_NAMESPACE_ID::int32 viewrwhud_;
  ::PROTOBUF_NAMESPACE_ID::int32 showthrusterlabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 showrwlabels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_InstrumentSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.InstrumentSettings) */ {
 public:
  inline VizMessage_InstrumentSettings() : VizMessage_InstrumentSettings(nullptr) {}
  ~VizMessage_InstrumentSettings() override;
  explicit constexpr VizMessage_InstrumentSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_InstrumentSettings(const VizMessage_InstrumentSettings& from);
  VizMessage_InstrumentSettings(VizMessage_InstrumentSettings&& from) noexcept
    : VizMessage_InstrumentSettings() {
    *this = ::std::move(from);
  }

  inline VizMessage_InstrumentSettings& operator=(const VizMessage_InstrumentSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_InstrumentSettings& operator=(VizMessage_InstrumentSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_InstrumentSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_InstrumentSettings* internal_default_instance() {
    return reinterpret_cast<const VizMessage_InstrumentSettings*>(
               &_VizMessage_InstrumentSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VizMessage_InstrumentSettings& a, VizMessage_InstrumentSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_InstrumentSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_InstrumentSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_InstrumentSettings* New() const final {
    return new VizMessage_InstrumentSettings();
  }

  VizMessage_InstrumentSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_InstrumentSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_InstrumentSettings& from);
  void MergeFrom(const VizMessage_InstrumentSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_InstrumentSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.InstrumentSettings";
  }
  protected:
  explicit VizMessage_InstrumentSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpacecraftNameFieldNumber = 1,
    kViewCSSPanelFieldNumber = 2,
    kViewCSSCoverageFieldNumber = 3,
    kShowCSSLabelsFieldNumber = 4,
    kViewCSSBoresightFieldNumber = 5,
    kShowGenericSensorLabelsFieldNumber = 6,
    kShowTransceiverLabelsFieldNumber = 7,
    kShowTransceiverFrustrumFieldNumber = 8,
    kShowGenericStoragePanelFieldNumber = 9,
    kShowMultiSphereLabelsFieldNumber = 10,
  };
  // string spacecraftName = 1;
  void clear_spacecraftname();
  const std::string& spacecraftname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spacecraftname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spacecraftname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_spacecraftname();
  void set_allocated_spacecraftname(std::string* spacecraftname);
  private:
  const std::string& _internal_spacecraftname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spacecraftname(const std::string& value);
  std::string* _internal_mutable_spacecraftname();
  public:

  // int32 viewCSSPanel = 2;
  void clear_viewcsspanel();
  ::PROTOBUF_NAMESPACE_ID::int32 viewcsspanel() const;
  void set_viewcsspanel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viewcsspanel() const;
  void _internal_set_viewcsspanel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 viewCSSCoverage = 3;
  void clear_viewcsscoverage();
  ::PROTOBUF_NAMESPACE_ID::int32 viewcsscoverage() const;
  void set_viewcsscoverage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viewcsscoverage() const;
  void _internal_set_viewcsscoverage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showCSSLabels = 4;
  void clear_showcsslabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showcsslabels() const;
  void set_showcsslabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showcsslabels() const;
  void _internal_set_showcsslabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 viewCSSBoresight = 5;
  void clear_viewcssboresight();
  ::PROTOBUF_NAMESPACE_ID::int32 viewcssboresight() const;
  void set_viewcssboresight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viewcssboresight() const;
  void _internal_set_viewcssboresight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showGenericSensorLabels = 6;
  void clear_showgenericsensorlabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showgenericsensorlabels() const;
  void set_showgenericsensorlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showgenericsensorlabels() const;
  void _internal_set_showgenericsensorlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showTransceiverLabels = 7;
  void clear_showtransceiverlabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showtransceiverlabels() const;
  void set_showtransceiverlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showtransceiverlabels() const;
  void _internal_set_showtransceiverlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showTransceiverFrustrum = 8;
  void clear_showtransceiverfrustrum();
  ::PROTOBUF_NAMESPACE_ID::int32 showtransceiverfrustrum() const;
  void set_showtransceiverfrustrum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showtransceiverfrustrum() const;
  void _internal_set_showtransceiverfrustrum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showGenericStoragePanel = 9;
  void clear_showgenericstoragepanel();
  ::PROTOBUF_NAMESPACE_ID::int32 showgenericstoragepanel() const;
  void set_showgenericstoragepanel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showgenericstoragepanel() const;
  void _internal_set_showgenericstoragepanel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showMultiSphereLabels = 10;
  void clear_showmultispherelabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showmultispherelabels() const;
  void set_showmultispherelabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showmultispherelabels() const;
  void _internal_set_showmultispherelabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.InstrumentSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecraftname_;
  ::PROTOBUF_NAMESPACE_ID::int32 viewcsspanel_;
  ::PROTOBUF_NAMESPACE_ID::int32 viewcsscoverage_;
  ::PROTOBUF_NAMESPACE_ID::int32 showcsslabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 viewcssboresight_;
  ::PROTOBUF_NAMESPACE_ID::int32 showgenericsensorlabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 showtransceiverlabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 showtransceiverfrustrum_;
  ::PROTOBUF_NAMESPACE_ID::int32 showgenericstoragepanel_;
  ::PROTOBUF_NAMESPACE_ID::int32 showmultispherelabels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_CustomModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.CustomModel) */ {
 public:
  inline VizMessage_CustomModel() : VizMessage_CustomModel(nullptr) {}
  ~VizMessage_CustomModel() override;
  explicit constexpr VizMessage_CustomModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_CustomModel(const VizMessage_CustomModel& from);
  VizMessage_CustomModel(VizMessage_CustomModel&& from) noexcept
    : VizMessage_CustomModel() {
    *this = ::std::move(from);
  }

  inline VizMessage_CustomModel& operator=(const VizMessage_CustomModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_CustomModel& operator=(VizMessage_CustomModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_CustomModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_CustomModel* internal_default_instance() {
    return reinterpret_cast<const VizMessage_CustomModel*>(
               &_VizMessage_CustomModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VizMessage_CustomModel& a, VizMessage_CustomModel& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_CustomModel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_CustomModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_CustomModel* New() const final {
    return new VizMessage_CustomModel();
  }

  VizMessage_CustomModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_CustomModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_CustomModel& from);
  void MergeFrom(const VizMessage_CustomModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_CustomModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.CustomModel";
  }
  protected:
  explicit VizMessage_CustomModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimBodiesToModifyFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kRotationFieldNumber = 4,
    kScaleFieldNumber = 5,
    kColorFieldNumber = 9,
    kModelPathFieldNumber = 1,
    kCustomTexturePathFieldNumber = 6,
    kNormalMapPathFieldNumber = 7,
    kShaderFieldNumber = 8,
  };
  // repeated string simBodiesToModify = 2;
  int simbodiestomodify_size() const;
  private:
  int _internal_simbodiestomodify_size() const;
  public:
  void clear_simbodiestomodify();
  const std::string& simbodiestomodify(int index) const;
  std::string* mutable_simbodiestomodify(int index);
  void set_simbodiestomodify(int index, const std::string& value);
  void set_simbodiestomodify(int index, std::string&& value);
  void set_simbodiestomodify(int index, const char* value);
  void set_simbodiestomodify(int index, const char* value, size_t size);
  std::string* add_simbodiestomodify();
  void add_simbodiestomodify(const std::string& value);
  void add_simbodiestomodify(std::string&& value);
  void add_simbodiestomodify(const char* value);
  void add_simbodiestomodify(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& simbodiestomodify() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_simbodiestomodify();
  private:
  const std::string& _internal_simbodiestomodify(int index) const;
  std::string* _internal_add_simbodiestomodify();
  public:

  // repeated double offset = 3;
  int offset_size() const;
  private:
  int _internal_offset_size() const;
  public:
  void clear_offset();
  private:
  double _internal_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_offset() const;
  void _internal_add_offset(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_offset();
  public:
  double offset(int index) const;
  void set_offset(int index, double value);
  void add_offset(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_offset();

  // repeated double rotation = 4;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  private:
  double _internal_rotation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rotation() const;
  void _internal_add_rotation(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rotation();
  public:
  double rotation(int index) const;
  void set_rotation(int index, double value);
  void add_rotation(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rotation();

  // repeated double scale = 5;
  int scale_size() const;
  private:
  int _internal_scale_size() const;
  public:
  void clear_scale();
  private:
  double _internal_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_scale() const;
  void _internal_add_scale(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_scale();
  public:
  double scale(int index) const;
  void set_scale(int index, double value);
  void add_scale(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_scale();

  // repeated int32 color = 9;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_color() const;
  void _internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_color();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 color(int index) const;
  void set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_color();

  // string modelPath = 1;
  void clear_modelpath();
  const std::string& modelpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modelpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modelpath();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_modelpath();
  void set_allocated_modelpath(std::string* modelpath);
  private:
  const std::string& _internal_modelpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modelpath(const std::string& value);
  std::string* _internal_mutable_modelpath();
  public:

  // string customTexturePath = 6;
  void clear_customtexturepath();
  const std::string& customtexturepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customtexturepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customtexturepath();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_customtexturepath();
  void set_allocated_customtexturepath(std::string* customtexturepath);
  private:
  const std::string& _internal_customtexturepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customtexturepath(const std::string& value);
  std::string* _internal_mutable_customtexturepath();
  public:

  // string normalMapPath = 7;
  void clear_normalmappath();
  const std::string& normalmappath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_normalmappath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_normalmappath();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_normalmappath();
  void set_allocated_normalmappath(std::string* normalmappath);
  private:
  const std::string& _internal_normalmappath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_normalmappath(const std::string& value);
  std::string* _internal_mutable_normalmappath();
  public:

  // int32 shader = 8;
  void clear_shader();
  ::PROTOBUF_NAMESPACE_ID::int32 shader() const;
  void set_shader(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shader() const;
  void _internal_set_shader(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.CustomModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> simbodiestomodify_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > offset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > scale_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customtexturepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr normalmappath_;
  ::PROTOBUF_NAMESPACE_ID::int32 shader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_LiveVizSettingsPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.LiveVizSettingsPb) */ {
 public:
  inline VizMessage_LiveVizSettingsPb() : VizMessage_LiveVizSettingsPb(nullptr) {}
  ~VizMessage_LiveVizSettingsPb() override;
  explicit constexpr VizMessage_LiveVizSettingsPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_LiveVizSettingsPb(const VizMessage_LiveVizSettingsPb& from);
  VizMessage_LiveVizSettingsPb(VizMessage_LiveVizSettingsPb&& from) noexcept
    : VizMessage_LiveVizSettingsPb() {
    *this = ::std::move(from);
  }

  inline VizMessage_LiveVizSettingsPb& operator=(const VizMessage_LiveVizSettingsPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_LiveVizSettingsPb& operator=(VizMessage_LiveVizSettingsPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_LiveVizSettingsPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_LiveVizSettingsPb* internal_default_instance() {
    return reinterpret_cast<const VizMessage_LiveVizSettingsPb*>(
               &_VizMessage_LiveVizSettingsPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VizMessage_LiveVizSettingsPb& a, VizMessage_LiveVizSettingsPb& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_LiveVizSettingsPb* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_LiveVizSettingsPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_LiveVizSettingsPb* New() const final {
    return new VizMessage_LiveVizSettingsPb();
  }

  VizMessage_LiveVizSettingsPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_LiveVizSettingsPb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_LiveVizSettingsPb& from);
  void MergeFrom(const VizMessage_LiveVizSettingsPb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_LiveVizSettingsPb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.LiveVizSettingsPb";
  }
  protected:
  explicit VizMessage_LiveVizSettingsPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetLinesFieldNumber = 1,
    kRelativeOrbitChiefFieldNumber = 2,
  };
  // repeated .vizProtobufferMessage.VizMessage.PointLine targetLines = 1;
  int targetlines_size() const;
  private:
  int _internal_targetlines_size() const;
  public:
  void clear_targetlines();
  ::vizProtobufferMessage::VizMessage_PointLine* mutable_targetlines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine >*
      mutable_targetlines();
  private:
  const ::vizProtobufferMessage::VizMessage_PointLine& _internal_targetlines(int index) const;
  ::vizProtobufferMessage::VizMessage_PointLine* _internal_add_targetlines();
  public:
  const ::vizProtobufferMessage::VizMessage_PointLine& targetlines(int index) const;
  ::vizProtobufferMessage::VizMessage_PointLine* add_targetlines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine >&
      targetlines() const;

  // string relativeOrbitChief = 2;
  void clear_relativeorbitchief();
  const std::string& relativeorbitchief() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relativeorbitchief(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relativeorbitchief();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_relativeorbitchief();
  void set_allocated_relativeorbitchief(std::string* relativeorbitchief);
  private:
  const std::string& _internal_relativeorbitchief() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relativeorbitchief(const std::string& value);
  std::string* _internal_mutable_relativeorbitchief();
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine > targetlines_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relativeorbitchief_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_VizSettingsPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.VizSettingsPb) */ {
 public:
  inline VizMessage_VizSettingsPb() : VizMessage_VizSettingsPb(nullptr) {}
  ~VizMessage_VizSettingsPb() override;
  explicit constexpr VizMessage_VizSettingsPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_VizSettingsPb(const VizMessage_VizSettingsPb& from);
  VizMessage_VizSettingsPb(VizMessage_VizSettingsPb&& from) noexcept
    : VizMessage_VizSettingsPb() {
    *this = ::std::move(from);
  }

  inline VizMessage_VizSettingsPb& operator=(const VizMessage_VizSettingsPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_VizSettingsPb& operator=(VizMessage_VizSettingsPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_VizSettingsPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_VizSettingsPb* internal_default_instance() {
    return reinterpret_cast<const VizMessage_VizSettingsPb*>(
               &_VizMessage_VizSettingsPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(VizMessage_VizSettingsPb& a, VizMessage_VizSettingsPb& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_VizSettingsPb* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_VizSettingsPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_VizSettingsPb* New() const final {
    return new VizMessage_VizSettingsPb();
  }

  VizMessage_VizSettingsPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_VizSettingsPb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_VizSettingsPb& from);
  void MergeFrom(const VizMessage_VizSettingsPb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_VizSettingsPb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.VizSettingsPb";
  }
  protected:
  explicit VizMessage_VizSettingsPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointLinesFieldNumber = 5,
    kKeepOutInConesFieldNumber = 6,
    kStandardCameraSettingsFieldNumber = 7,
    kInstrumentSettingsFieldNumber = 9,
    kActuatorSettingsFieldNumber = 10,
    kCustomModelsFieldNumber = 12,
    kDefaultThrusterColorFieldNumber = 27,
    kSkyboxFieldNumber = 11,
    kDefaultSpacecraftSpriteFieldNumber = 20,
    kMainCameraTargetFieldNumber = 34,
    kAmbientFieldNumber = 1,
    kOrbitLinesOnFieldNumber = 2,
    kSpacecraftCSonFieldNumber = 3,
    kPlanetCSonFieldNumber = 4,
    kViewCameraBoresightHUDFieldNumber = 13,
    kViewCameraConeHUDFieldNumber = 14,
    kShowCSLabelsFieldNumber = 15,
    kShowCelestialBodyLabelsFieldNumber = 16,
    kShowSpacecraftLabelsFieldNumber = 17,
    kCustomGUIScaleFieldNumber = 19,
    kShowCameraLabelsFieldNumber = 18,
    kShowSpacecraftAsSpritesFieldNumber = 21,
    kShowCelestialBodiesAsSpritesFieldNumber = 22,
    kShow24HrClockFieldNumber = 23,
    kKeyboardAngularRateFieldNumber = 25,
    kKeyboardZoomRateFieldNumber = 26,
    kShowDataRateDisplayFieldNumber = 24,
    kOrbitLineSegmentsFieldNumber = 29,
    kDefaultThrusterPlumeLifeScalarFieldNumber = 28,
    kRelativeOrbitRangeFieldNumber = 30,
    kShowHillFrameFieldNumber = 31,
    kShowVelocityFrameFieldNumber = 32,
    kRelativeOrbitFrameFieldNumber = 33,
    kSpacecraftShadowBrightnessFieldNumber = 35,
    kSpacecraftSizeMultiplierFieldNumber = 36,
    kShowLocationCommLinesFieldNumber = 37,
    kShowLocationConesFieldNumber = 38,
    kShowLocationLabelsFieldNumber = 39,
    kTrueTrajectoryLinesOnFieldNumber = 40,
    kAtmospheresOffFieldNumber = 41,
    kScViewToPlanetViewBoundaryMultiplierFieldNumber = 42,
    kSunIntensityFieldNumber = 44,
    kPlanetViewToHelioViewBoundaryMultiplierFieldNumber = 43,
    kAttenuateSunLightWithDistanceFieldNumber = 45,
    kCelestialBodyHelioViewSizeMultiplierFieldNumber = 47,
    kShowLightLabelsFieldNumber = 46,
    kShowMissionTimeFieldNumber = 48,
    kSpacecraftHelioViewSizeMultiplierFieldNumber = 49,
    kForceStartAtSpacecraftLocalViewFieldNumber = 50,
  };
  // repeated .vizProtobufferMessage.VizMessage.PointLine pointLines = 5;
  int pointlines_size() const;
  private:
  int _internal_pointlines_size() const;
  public:
  void clear_pointlines();
  ::vizProtobufferMessage::VizMessage_PointLine* mutable_pointlines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine >*
      mutable_pointlines();
  private:
  const ::vizProtobufferMessage::VizMessage_PointLine& _internal_pointlines(int index) const;
  ::vizProtobufferMessage::VizMessage_PointLine* _internal_add_pointlines();
  public:
  const ::vizProtobufferMessage::VizMessage_PointLine& pointlines(int index) const;
  ::vizProtobufferMessage::VizMessage_PointLine* add_pointlines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine >&
      pointlines() const;

  // repeated .vizProtobufferMessage.VizMessage.KeepOutInCone keepOutInCones = 6;
  int keepoutincones_size() const;
  private:
  int _internal_keepoutincones_size() const;
  public:
  void clear_keepoutincones();
  ::vizProtobufferMessage::VizMessage_KeepOutInCone* mutable_keepoutincones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_KeepOutInCone >*
      mutable_keepoutincones();
  private:
  const ::vizProtobufferMessage::VizMessage_KeepOutInCone& _internal_keepoutincones(int index) const;
  ::vizProtobufferMessage::VizMessage_KeepOutInCone* _internal_add_keepoutincones();
  public:
  const ::vizProtobufferMessage::VizMessage_KeepOutInCone& keepoutincones(int index) const;
  ::vizProtobufferMessage::VizMessage_KeepOutInCone* add_keepoutincones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_KeepOutInCone >&
      keepoutincones() const;

  // repeated .vizProtobufferMessage.VizMessage.StandardCameraSettings standardCameraSettings = 7;
  int standardcamerasettings_size() const;
  private:
  int _internal_standardcamerasettings_size() const;
  public:
  void clear_standardcamerasettings();
  ::vizProtobufferMessage::VizMessage_StandardCameraSettings* mutable_standardcamerasettings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StandardCameraSettings >*
      mutable_standardcamerasettings();
  private:
  const ::vizProtobufferMessage::VizMessage_StandardCameraSettings& _internal_standardcamerasettings(int index) const;
  ::vizProtobufferMessage::VizMessage_StandardCameraSettings* _internal_add_standardcamerasettings();
  public:
  const ::vizProtobufferMessage::VizMessage_StandardCameraSettings& standardcamerasettings(int index) const;
  ::vizProtobufferMessage::VizMessage_StandardCameraSettings* add_standardcamerasettings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StandardCameraSettings >&
      standardcamerasettings() const;

  // repeated .vizProtobufferMessage.VizMessage.InstrumentSettings instrumentSettings = 9;
  int instrumentsettings_size() const;
  private:
  int _internal_instrumentsettings_size() const;
  public:
  void clear_instrumentsettings();
  ::vizProtobufferMessage::VizMessage_InstrumentSettings* mutable_instrumentsettings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_InstrumentSettings >*
      mutable_instrumentsettings();
  private:
  const ::vizProtobufferMessage::VizMessage_InstrumentSettings& _internal_instrumentsettings(int index) const;
  ::vizProtobufferMessage::VizMessage_InstrumentSettings* _internal_add_instrumentsettings();
  public:
  const ::vizProtobufferMessage::VizMessage_InstrumentSettings& instrumentsettings(int index) const;
  ::vizProtobufferMessage::VizMessage_InstrumentSettings* add_instrumentsettings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_InstrumentSettings >&
      instrumentsettings() const;

  // repeated .vizProtobufferMessage.VizMessage.ActuatorSettings actuatorSettings = 10;
  int actuatorsettings_size() const;
  private:
  int _internal_actuatorsettings_size() const;
  public:
  void clear_actuatorsettings();
  ::vizProtobufferMessage::VizMessage_ActuatorSettings* mutable_actuatorsettings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ActuatorSettings >*
      mutable_actuatorsettings();
  private:
  const ::vizProtobufferMessage::VizMessage_ActuatorSettings& _internal_actuatorsettings(int index) const;
  ::vizProtobufferMessage::VizMessage_ActuatorSettings* _internal_add_actuatorsettings();
  public:
  const ::vizProtobufferMessage::VizMessage_ActuatorSettings& actuatorsettings(int index) const;
  ::vizProtobufferMessage::VizMessage_ActuatorSettings* add_actuatorsettings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ActuatorSettings >&
      actuatorsettings() const;

  // repeated .vizProtobufferMessage.VizMessage.CustomModel customModels = 12;
  int custommodels_size() const;
  private:
  int _internal_custommodels_size() const;
  public:
  void clear_custommodels();
  ::vizProtobufferMessage::VizMessage_CustomModel* mutable_custommodels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CustomModel >*
      mutable_custommodels();
  private:
  const ::vizProtobufferMessage::VizMessage_CustomModel& _internal_custommodels(int index) const;
  ::vizProtobufferMessage::VizMessage_CustomModel* _internal_add_custommodels();
  public:
  const ::vizProtobufferMessage::VizMessage_CustomModel& custommodels(int index) const;
  ::vizProtobufferMessage::VizMessage_CustomModel* add_custommodels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CustomModel >&
      custommodels() const;

  // repeated int32 defaultThrusterColor = 27;
  int defaultthrustercolor_size() const;
  private:
  int _internal_defaultthrustercolor_size() const;
  public:
  void clear_defaultthrustercolor();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_defaultthrustercolor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_defaultthrustercolor() const;
  void _internal_add_defaultthrustercolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_defaultthrustercolor();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 defaultthrustercolor(int index) const;
  void set_defaultthrustercolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_defaultthrustercolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      defaultthrustercolor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_defaultthrustercolor();

  // string skybox = 11;
  void clear_skybox();
  const std::string& skybox() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skybox(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skybox();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_skybox();
  void set_allocated_skybox(std::string* skybox);
  private:
  const std::string& _internal_skybox() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skybox(const std::string& value);
  std::string* _internal_mutable_skybox();
  public:

  // string defaultSpacecraftSprite = 20;
  void clear_defaultspacecraftsprite();
  const std::string& defaultspacecraftsprite() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_defaultspacecraftsprite(ArgT0&& arg0, ArgT... args);
  std::string* mutable_defaultspacecraftsprite();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_defaultspacecraftsprite();
  void set_allocated_defaultspacecraftsprite(std::string* defaultspacecraftsprite);
  private:
  const std::string& _internal_defaultspacecraftsprite() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_defaultspacecraftsprite(const std::string& value);
  std::string* _internal_mutable_defaultspacecraftsprite();
  public:

  // string mainCameraTarget = 34;
  void clear_maincameratarget();
  const std::string& maincameratarget() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maincameratarget(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maincameratarget();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_maincameratarget();
  void set_allocated_maincameratarget(std::string* maincameratarget);
  private:
  const std::string& _internal_maincameratarget() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maincameratarget(const std::string& value);
  std::string* _internal_mutable_maincameratarget();
  public:

  // double ambient = 1;
  void clear_ambient();
  double ambient() const;
  void set_ambient(double value);
  private:
  double _internal_ambient() const;
  void _internal_set_ambient(double value);
  public:

  // int32 orbitLinesOn = 2;
  void clear_orbitlineson();
  ::PROTOBUF_NAMESPACE_ID::int32 orbitlineson() const;
  void set_orbitlineson(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orbitlineson() const;
  void _internal_set_orbitlineson(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spacecraftCSon = 3;
  void clear_spacecraftcson();
  ::PROTOBUF_NAMESPACE_ID::int32 spacecraftcson() const;
  void set_spacecraftcson(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacecraftcson() const;
  void _internal_set_spacecraftcson(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 planetCSon = 4;
  void clear_planetcson();
  ::PROTOBUF_NAMESPACE_ID::int32 planetcson() const;
  void set_planetcson(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_planetcson() const;
  void _internal_set_planetcson(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 viewCameraBoresightHUD = 13;
  void clear_viewcameraboresighthud();
  ::PROTOBUF_NAMESPACE_ID::int32 viewcameraboresighthud() const;
  void set_viewcameraboresighthud(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viewcameraboresighthud() const;
  void _internal_set_viewcameraboresighthud(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 viewCameraConeHUD = 14;
  void clear_viewcameraconehud();
  ::PROTOBUF_NAMESPACE_ID::int32 viewcameraconehud() const;
  void set_viewcameraconehud(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_viewcameraconehud() const;
  void _internal_set_viewcameraconehud(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showCSLabels = 15;
  void clear_showcslabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showcslabels() const;
  void set_showcslabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showcslabels() const;
  void _internal_set_showcslabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showCelestialBodyLabels = 16;
  void clear_showcelestialbodylabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showcelestialbodylabels() const;
  void set_showcelestialbodylabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showcelestialbodylabels() const;
  void _internal_set_showcelestialbodylabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showSpacecraftLabels = 17;
  void clear_showspacecraftlabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showspacecraftlabels() const;
  void set_showspacecraftlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showspacecraftlabels() const;
  void _internal_set_showspacecraftlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double customGUIScale = 19;
  void clear_customguiscale();
  double customguiscale() const;
  void set_customguiscale(double value);
  private:
  double _internal_customguiscale() const;
  void _internal_set_customguiscale(double value);
  public:

  // int32 showCameraLabels = 18;
  void clear_showcameralabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showcameralabels() const;
  void set_showcameralabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showcameralabels() const;
  void _internal_set_showcameralabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showSpacecraftAsSprites = 21;
  void clear_showspacecraftassprites();
  ::PROTOBUF_NAMESPACE_ID::int32 showspacecraftassprites() const;
  void set_showspacecraftassprites(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showspacecraftassprites() const;
  void _internal_set_showspacecraftassprites(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showCelestialBodiesAsSprites = 22;
  void clear_showcelestialbodiesassprites();
  ::PROTOBUF_NAMESPACE_ID::int32 showcelestialbodiesassprites() const;
  void set_showcelestialbodiesassprites(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showcelestialbodiesassprites() const;
  void _internal_set_showcelestialbodiesassprites(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 show24hrClock = 23;
  void clear_show24hrclock();
  ::PROTOBUF_NAMESPACE_ID::int32 show24hrclock() const;
  void set_show24hrclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_show24hrclock() const;
  void _internal_set_show24hrclock(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double keyboardAngularRate = 25;
  void clear_keyboardangularrate();
  double keyboardangularrate() const;
  void set_keyboardangularrate(double value);
  private:
  double _internal_keyboardangularrate() const;
  void _internal_set_keyboardangularrate(double value);
  public:

  // double keyboardZoomRate = 26;
  void clear_keyboardzoomrate();
  double keyboardzoomrate() const;
  void set_keyboardzoomrate(double value);
  private:
  double _internal_keyboardzoomrate() const;
  void _internal_set_keyboardzoomrate(double value);
  public:

  // int32 showDataRateDisplay = 24;
  void clear_showdataratedisplay();
  ::PROTOBUF_NAMESPACE_ID::int32 showdataratedisplay() const;
  void set_showdataratedisplay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showdataratedisplay() const;
  void _internal_set_showdataratedisplay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 orbitLineSegments = 29;
  void clear_orbitlinesegments();
  ::PROTOBUF_NAMESPACE_ID::int32 orbitlinesegments() const;
  void set_orbitlinesegments(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orbitlinesegments() const;
  void _internal_set_orbitlinesegments(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double defaultThrusterPlumeLifeScalar = 28;
  void clear_defaultthrusterplumelifescalar();
  double defaultthrusterplumelifescalar() const;
  void set_defaultthrusterplumelifescalar(double value);
  private:
  double _internal_defaultthrusterplumelifescalar() const;
  void _internal_set_defaultthrusterplumelifescalar(double value);
  public:

  // int32 relativeOrbitRange = 30;
  void clear_relativeorbitrange();
  ::PROTOBUF_NAMESPACE_ID::int32 relativeorbitrange() const;
  void set_relativeorbitrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relativeorbitrange() const;
  void _internal_set_relativeorbitrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showHillFrame = 31;
  void clear_showhillframe();
  ::PROTOBUF_NAMESPACE_ID::int32 showhillframe() const;
  void set_showhillframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showhillframe() const;
  void _internal_set_showhillframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showVelocityFrame = 32;
  void clear_showvelocityframe();
  ::PROTOBUF_NAMESPACE_ID::int32 showvelocityframe() const;
  void set_showvelocityframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showvelocityframe() const;
  void _internal_set_showvelocityframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 relativeOrbitFrame = 33;
  void clear_relativeorbitframe();
  ::PROTOBUF_NAMESPACE_ID::int32 relativeorbitframe() const;
  void set_relativeorbitframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relativeorbitframe() const;
  void _internal_set_relativeorbitframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double spacecraftShadowBrightness = 35;
  void clear_spacecraftshadowbrightness();
  double spacecraftshadowbrightness() const;
  void set_spacecraftshadowbrightness(double value);
  private:
  double _internal_spacecraftshadowbrightness() const;
  void _internal_set_spacecraftshadowbrightness(double value);
  public:

  // double spacecraftSizeMultiplier = 36;
  void clear_spacecraftsizemultiplier();
  double spacecraftsizemultiplier() const;
  void set_spacecraftsizemultiplier(double value);
  private:
  double _internal_spacecraftsizemultiplier() const;
  void _internal_set_spacecraftsizemultiplier(double value);
  public:

  // int32 showLocationCommLines = 37;
  void clear_showlocationcommlines();
  ::PROTOBUF_NAMESPACE_ID::int32 showlocationcommlines() const;
  void set_showlocationcommlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showlocationcommlines() const;
  void _internal_set_showlocationcommlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showLocationCones = 38;
  void clear_showlocationcones();
  ::PROTOBUF_NAMESPACE_ID::int32 showlocationcones() const;
  void set_showlocationcones(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showlocationcones() const;
  void _internal_set_showlocationcones(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showLocationLabels = 39;
  void clear_showlocationlabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showlocationlabels() const;
  void set_showlocationlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showlocationlabels() const;
  void _internal_set_showlocationlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trueTrajectoryLinesOn = 40;
  void clear_truetrajectorylineson();
  ::PROTOBUF_NAMESPACE_ID::int32 truetrajectorylineson() const;
  void set_truetrajectorylineson(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_truetrajectorylineson() const;
  void _internal_set_truetrajectorylineson(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 atmospheresOff = 41;
  void clear_atmospheresoff();
  ::PROTOBUF_NAMESPACE_ID::int32 atmospheresoff() const;
  void set_atmospheresoff(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_atmospheresoff() const;
  void _internal_set_atmospheresoff(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scViewToPlanetViewBoundaryMultiplier = 42;
  void clear_scviewtoplanetviewboundarymultiplier();
  ::PROTOBUF_NAMESPACE_ID::int32 scviewtoplanetviewboundarymultiplier() const;
  void set_scviewtoplanetviewboundarymultiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scviewtoplanetviewboundarymultiplier() const;
  void _internal_set_scviewtoplanetviewboundarymultiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double sunIntensity = 44;
  void clear_sunintensity();
  double sunintensity() const;
  void set_sunintensity(double value);
  private:
  double _internal_sunintensity() const;
  void _internal_set_sunintensity(double value);
  public:

  // int32 planetViewToHelioViewBoundaryMultiplier = 43;
  void clear_planetviewtohelioviewboundarymultiplier();
  ::PROTOBUF_NAMESPACE_ID::int32 planetviewtohelioviewboundarymultiplier() const;
  void set_planetviewtohelioviewboundarymultiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_planetviewtohelioviewboundarymultiplier() const;
  void _internal_set_planetviewtohelioviewboundarymultiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attenuateSunLightWithDistance = 45;
  void clear_attenuatesunlightwithdistance();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuatesunlightwithdistance() const;
  void set_attenuatesunlightwithdistance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuatesunlightwithdistance() const;
  void _internal_set_attenuatesunlightwithdistance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double celestialBodyHelioViewSizeMultiplier = 47;
  void clear_celestialbodyhelioviewsizemultiplier();
  double celestialbodyhelioviewsizemultiplier() const;
  void set_celestialbodyhelioviewsizemultiplier(double value);
  private:
  double _internal_celestialbodyhelioviewsizemultiplier() const;
  void _internal_set_celestialbodyhelioviewsizemultiplier(double value);
  public:

  // int32 showLightLabels = 46;
  void clear_showlightlabels();
  ::PROTOBUF_NAMESPACE_ID::int32 showlightlabels() const;
  void set_showlightlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showlightlabels() const;
  void _internal_set_showlightlabels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showMissionTime = 48;
  void clear_showmissiontime();
  ::PROTOBUF_NAMESPACE_ID::int32 showmissiontime() const;
  void set_showmissiontime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showmissiontime() const;
  void _internal_set_showmissiontime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double spacecraftHelioViewSizeMultiplier = 49;
  void clear_spacecrafthelioviewsizemultiplier();
  double spacecrafthelioviewsizemultiplier() const;
  void set_spacecrafthelioviewsizemultiplier(double value);
  private:
  double _internal_spacecrafthelioviewsizemultiplier() const;
  void _internal_set_spacecrafthelioviewsizemultiplier(double value);
  public:

  // int32 forceStartAtSpacecraftLocalView = 50;
  void clear_forcestartatspacecraftlocalview();
  ::PROTOBUF_NAMESPACE_ID::int32 forcestartatspacecraftlocalview() const;
  void set_forcestartatspacecraftlocalview(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_forcestartatspacecraftlocalview() const;
  void _internal_set_forcestartatspacecraftlocalview(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.VizSettingsPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine > pointlines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_KeepOutInCone > keepoutincones_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StandardCameraSettings > standardcamerasettings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_InstrumentSettings > instrumentsettings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ActuatorSettings > actuatorsettings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CustomModel > custommodels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > defaultthrustercolor_;
  mutable std::atomic<int> _defaultthrustercolor_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skybox_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defaultspacecraftsprite_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maincameratarget_;
  double ambient_;
  ::PROTOBUF_NAMESPACE_ID::int32 orbitlineson_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacecraftcson_;
  ::PROTOBUF_NAMESPACE_ID::int32 planetcson_;
  ::PROTOBUF_NAMESPACE_ID::int32 viewcameraboresighthud_;
  ::PROTOBUF_NAMESPACE_ID::int32 viewcameraconehud_;
  ::PROTOBUF_NAMESPACE_ID::int32 showcslabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 showcelestialbodylabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 showspacecraftlabels_;
  double customguiscale_;
  ::PROTOBUF_NAMESPACE_ID::int32 showcameralabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 showspacecraftassprites_;
  ::PROTOBUF_NAMESPACE_ID::int32 showcelestialbodiesassprites_;
  ::PROTOBUF_NAMESPACE_ID::int32 show24hrclock_;
  double keyboardangularrate_;
  double keyboardzoomrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 showdataratedisplay_;
  ::PROTOBUF_NAMESPACE_ID::int32 orbitlinesegments_;
  double defaultthrusterplumelifescalar_;
  ::PROTOBUF_NAMESPACE_ID::int32 relativeorbitrange_;
  ::PROTOBUF_NAMESPACE_ID::int32 showhillframe_;
  ::PROTOBUF_NAMESPACE_ID::int32 showvelocityframe_;
  ::PROTOBUF_NAMESPACE_ID::int32 relativeorbitframe_;
  double spacecraftshadowbrightness_;
  double spacecraftsizemultiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 showlocationcommlines_;
  ::PROTOBUF_NAMESPACE_ID::int32 showlocationcones_;
  ::PROTOBUF_NAMESPACE_ID::int32 showlocationlabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 truetrajectorylineson_;
  ::PROTOBUF_NAMESPACE_ID::int32 atmospheresoff_;
  ::PROTOBUF_NAMESPACE_ID::int32 scviewtoplanetviewboundarymultiplier_;
  double sunintensity_;
  ::PROTOBUF_NAMESPACE_ID::int32 planetviewtohelioviewboundarymultiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuatesunlightwithdistance_;
  double celestialbodyhelioviewsizemultiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 showlightlabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 showmissiontime_;
  double spacecrafthelioviewsizemultiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 forcestartatspacecraftlocalview_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_MultiSphere final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.MultiSphere) */ {
 public:
  inline VizMessage_MultiSphere() : VizMessage_MultiSphere(nullptr) {}
  ~VizMessage_MultiSphere() override;
  explicit constexpr VizMessage_MultiSphere(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_MultiSphere(const VizMessage_MultiSphere& from);
  VizMessage_MultiSphere(VizMessage_MultiSphere&& from) noexcept
    : VizMessage_MultiSphere() {
    *this = ::std::move(from);
  }

  inline VizMessage_MultiSphere& operator=(const VizMessage_MultiSphere& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_MultiSphere& operator=(VizMessage_MultiSphere&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_MultiSphere& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_MultiSphere* internal_default_instance() {
    return reinterpret_cast<const VizMessage_MultiSphere*>(
               &_VizMessage_MultiSphere_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(VizMessage_MultiSphere& a, VizMessage_MultiSphere& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_MultiSphere* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_MultiSphere* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_MultiSphere* New() const final {
    return new VizMessage_MultiSphere();
  }

  VizMessage_MultiSphere* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_MultiSphere>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_MultiSphere& from);
  void MergeFrom(const VizMessage_MultiSphere& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_MultiSphere* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.MultiSphere";
  }
  protected:
  explicit VizMessage_MultiSphere(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kPositiveColorFieldNumber = 6,
    kNegativeColorFieldNumber = 7,
    kRadiusFieldNumber = 3,
    kCurrentValueFieldNumber = 4,
    kIsOnFieldNumber = 1,
    kNeutralOpacityFieldNumber = 8,
    kMaxValueFieldNumber = 5,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated int32 positiveColor = 6;
  int positivecolor_size() const;
  private:
  int _internal_positivecolor_size() const;
  public:
  void clear_positivecolor();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positivecolor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_positivecolor() const;
  void _internal_add_positivecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_positivecolor();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 positivecolor(int index) const;
  void set_positivecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_positivecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      positivecolor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_positivecolor();

  // repeated int32 negativeColor = 7;
  int negativecolor_size() const;
  private:
  int _internal_negativecolor_size() const;
  public:
  void clear_negativecolor();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_negativecolor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_negativecolor() const;
  void _internal_add_negativecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_negativecolor();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 negativecolor(int index) const;
  void set_negativecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_negativecolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      negativecolor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_negativecolor();

  // double radius = 3;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // double currentValue = 4;
  void clear_currentvalue();
  double currentvalue() const;
  void set_currentvalue(double value);
  private:
  double _internal_currentvalue() const;
  void _internal_set_currentvalue(double value);
  public:

  // int32 isOn = 1;
  void clear_ison();
  ::PROTOBUF_NAMESPACE_ID::int32 ison() const;
  void set_ison(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ison() const;
  void _internal_set_ison(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 neutralOpacity = 8;
  void clear_neutralopacity();
  ::PROTOBUF_NAMESPACE_ID::int32 neutralopacity() const;
  void set_neutralopacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_neutralopacity() const;
  void _internal_set_neutralopacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double maxValue = 5;
  void clear_maxvalue();
  double maxvalue() const;
  void set_maxvalue(double value);
  private:
  double _internal_maxvalue() const;
  void _internal_set_maxvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.MultiSphere)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > positivecolor_;
  mutable std::atomic<int> _positivecolor_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > negativecolor_;
  mutable std::atomic<int> _negativecolor_cached_byte_size_;
  double radius_;
  double currentvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 ison_;
  ::PROTOBUF_NAMESPACE_ID::int32 neutralopacity_;
  double maxvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.Location) */ {
 public:
  inline VizMessage_Location() : VizMessage_Location(nullptr) {}
  ~VizMessage_Location() override;
  explicit constexpr VizMessage_Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_Location(const VizMessage_Location& from);
  VizMessage_Location(VizMessage_Location&& from) noexcept
    : VizMessage_Location() {
    *this = ::std::move(from);
  }

  inline VizMessage_Location& operator=(const VizMessage_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_Location& operator=(VizMessage_Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_Location* internal_default_instance() {
    return reinterpret_cast<const VizMessage_Location*>(
               &_VizMessage_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(VizMessage_Location& a, VizMessage_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_Location* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_Location* New() const final {
    return new VizMessage_Location();
  }

  VizMessage_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_Location& from);
  void MergeFrom(const VizMessage_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.Location";
  }
  protected:
  explicit VizMessage_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRGPPFieldNumber = 3,
    kGHatPFieldNumber = 4,
    kColorFieldNumber = 6,
    kStationNameFieldNumber = 1,
    kParentBodyNameFieldNumber = 2,
    kFieldOfViewFieldNumber = 5,
    kRangeFieldNumber = 7,
  };
  // repeated double r_GP_P = 3;
  int r_gp_p_size() const;
  private:
  int _internal_r_gp_p_size() const;
  public:
  void clear_r_gp_p();
  private:
  double _internal_r_gp_p(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_r_gp_p() const;
  void _internal_add_r_gp_p(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_r_gp_p();
  public:
  double r_gp_p(int index) const;
  void set_r_gp_p(int index, double value);
  void add_r_gp_p(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      r_gp_p() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_r_gp_p();

  // repeated double gHat_P = 4;
  int ghat_p_size() const;
  private:
  int _internal_ghat_p_size() const;
  public:
  void clear_ghat_p();
  private:
  double _internal_ghat_p(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ghat_p() const;
  void _internal_add_ghat_p(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ghat_p();
  public:
  double ghat_p(int index) const;
  void set_ghat_p(int index, double value);
  void add_ghat_p(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ghat_p() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ghat_p();

  // repeated int32 color = 6;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_color() const;
  void _internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_color();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 color(int index) const;
  void set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_color();

  // string stationName = 1;
  void clear_stationname();
  const std::string& stationname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stationname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stationname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_stationname();
  void set_allocated_stationname(std::string* stationname);
  private:
  const std::string& _internal_stationname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stationname(const std::string& value);
  std::string* _internal_mutable_stationname();
  public:

  // string parentBodyName = 2;
  void clear_parentbodyname();
  const std::string& parentbodyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentbodyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentbodyname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_parentbodyname();
  void set_allocated_parentbodyname(std::string* parentbodyname);
  private:
  const std::string& _internal_parentbodyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentbodyname(const std::string& value);
  std::string* _internal_mutable_parentbodyname();
  public:

  // double fieldOfView = 5;
  void clear_fieldofview();
  double fieldofview() const;
  void set_fieldofview(double value);
  private:
  double _internal_fieldofview() const;
  void _internal_set_fieldofview(double value);
  public:

  // double range = 7;
  void clear_range();
  double range() const;
  void set_range(double value);
  private:
  double _internal_range() const;
  void _internal_set_range(double value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > r_gp_p_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ghat_p_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stationname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentbodyname_;
  double fieldofview_;
  double range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage_Ellipsoid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage.Ellipsoid) */ {
 public:
  inline VizMessage_Ellipsoid() : VizMessage_Ellipsoid(nullptr) {}
  ~VizMessage_Ellipsoid() override;
  explicit constexpr VizMessage_Ellipsoid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage_Ellipsoid(const VizMessage_Ellipsoid& from);
  VizMessage_Ellipsoid(VizMessage_Ellipsoid&& from) noexcept
    : VizMessage_Ellipsoid() {
    *this = ::std::move(from);
  }

  inline VizMessage_Ellipsoid& operator=(const VizMessage_Ellipsoid& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage_Ellipsoid& operator=(VizMessage_Ellipsoid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage_Ellipsoid& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage_Ellipsoid* internal_default_instance() {
    return reinterpret_cast<const VizMessage_Ellipsoid*>(
               &_VizMessage_Ellipsoid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(VizMessage_Ellipsoid& a, VizMessage_Ellipsoid& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage_Ellipsoid* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage_Ellipsoid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage_Ellipsoid* New() const final {
    return new VizMessage_Ellipsoid();
  }

  VizMessage_Ellipsoid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage_Ellipsoid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage_Ellipsoid& from);
  void MergeFrom(const VizMessage_Ellipsoid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage_Ellipsoid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage.Ellipsoid";
  }
  protected:
  explicit VizMessage_Ellipsoid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kSemiMajorAxesFieldNumber = 4,
    kColorFieldNumber = 5,
    kIsOnFieldNumber = 1,
    kUseBodyFrameFieldNumber = 2,
    kShowGridLinesFieldNumber = 6,
  };
  // repeated double position = 3;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double semiMajorAxes = 4;
  int semimajoraxes_size() const;
  private:
  int _internal_semimajoraxes_size() const;
  public:
  void clear_semimajoraxes();
  private:
  double _internal_semimajoraxes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_semimajoraxes() const;
  void _internal_add_semimajoraxes(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_semimajoraxes();
  public:
  double semimajoraxes(int index) const;
  void set_semimajoraxes(int index, double value);
  void add_semimajoraxes(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      semimajoraxes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_semimajoraxes();

  // repeated int32 color = 5;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_color() const;
  void _internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_color();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 color(int index) const;
  void set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_color();

  // int32 isOn = 1;
  void clear_ison();
  ::PROTOBUF_NAMESPACE_ID::int32 ison() const;
  void set_ison(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ison() const;
  void _internal_set_ison(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 useBodyFrame = 2;
  void clear_usebodyframe();
  ::PROTOBUF_NAMESPACE_ID::int32 usebodyframe() const;
  void set_usebodyframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usebodyframe() const;
  void _internal_set_usebodyframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 showGridLines = 6;
  void clear_showgridlines();
  ::PROTOBUF_NAMESPACE_ID::int32 showgridlines() const;
  void set_showgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_showgridlines() const;
  void _internal_set_showgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage.Ellipsoid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > semimajoraxes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ison_;
  ::PROTOBUF_NAMESPACE_ID::int32 usebodyframe_;
  ::PROTOBUF_NAMESPACE_ID::int32 showgridlines_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// -------------------------------------------------------------------

class VizMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vizProtobufferMessage.VizMessage) */ {
 public:
  inline VizMessage() : VizMessage(nullptr) {}
  ~VizMessage() override;
  explicit constexpr VizMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VizMessage(const VizMessage& from);
  VizMessage(VizMessage&& from) noexcept
    : VizMessage() {
    *this = ::std::move(from);
  }

  inline VizMessage& operator=(const VizMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VizMessage& operator=(VizMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VizMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VizMessage* internal_default_instance() {
    return reinterpret_cast<const VizMessage*>(
               &_VizMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VizMessage& a, VizMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VizMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VizMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VizMessage* New() const final {
    return new VizMessage();
  }

  VizMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VizMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VizMessage& from);
  void MergeFrom(const VizMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VizMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vizProtobufferMessage.VizMessage";
  }
  protected:
  explicit VizMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VizMessage_EpochDateTime EpochDateTime;
  typedef VizMessage_TimeStamp TimeStamp;
  typedef VizMessage_CelestialBody CelestialBody;
  typedef VizMessage_Spacecraft Spacecraft;
  typedef VizMessage_ReactionWheel ReactionWheel;
  typedef VizMessage_Thruster Thruster;
  typedef VizMessage_CoarseSunSensor CoarseSunSensor;
  typedef VizMessage_GenericSensor GenericSensor;
  typedef VizMessage_GenericStorage GenericStorage;
  typedef VizMessage_Light Light;
  typedef VizMessage_Transceiver Transceiver;
  typedef VizMessage_CameraConfig CameraConfig;
  typedef VizMessage_PointLine PointLine;
  typedef VizMessage_KeepOutInCone KeepOutInCone;
  typedef VizMessage_StandardCameraSettings StandardCameraSettings;
  typedef VizMessage_ActuatorSettings ActuatorSettings;
  typedef VizMessage_InstrumentSettings InstrumentSettings;
  typedef VizMessage_CustomModel CustomModel;
  typedef VizMessage_LiveVizSettingsPb LiveVizSettingsPb;
  typedef VizMessage_VizSettingsPb VizSettingsPb;
  typedef VizMessage_MultiSphere MultiSphere;
  typedef VizMessage_Location Location;
  typedef VizMessage_Ellipsoid Ellipsoid;

  // accessors -------------------------------------------------------

  enum : int {
    kCelestialBodiesFieldNumber = 2,
    kSpacecraftFieldNumber = 3,
    kCamerasFieldNumber = 4,
    kLocationsFieldNumber = 9,
    kCurrentTimeFieldNumber = 1,
    kSettingsFieldNumber = 7,
    kEpochFieldNumber = 8,
    kLiveSettingsFieldNumber = 10,
  };
  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  int celestialbodies_size() const;
  private:
  int _internal_celestialbodies_size() const;
  public:
  void clear_celestialbodies();
  ::vizProtobufferMessage::VizMessage_CelestialBody* mutable_celestialbodies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody >*
      mutable_celestialbodies();
  private:
  const ::vizProtobufferMessage::VizMessage_CelestialBody& _internal_celestialbodies(int index) const;
  ::vizProtobufferMessage::VizMessage_CelestialBody* _internal_add_celestialbodies();
  public:
  const ::vizProtobufferMessage::VizMessage_CelestialBody& celestialbodies(int index) const;
  ::vizProtobufferMessage::VizMessage_CelestialBody* add_celestialbodies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody >&
      celestialbodies() const;

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  int spacecraft_size() const;
  private:
  int _internal_spacecraft_size() const;
  public:
  void clear_spacecraft();
  ::vizProtobufferMessage::VizMessage_Spacecraft* mutable_spacecraft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft >*
      mutable_spacecraft();
  private:
  const ::vizProtobufferMessage::VizMessage_Spacecraft& _internal_spacecraft(int index) const;
  ::vizProtobufferMessage::VizMessage_Spacecraft* _internal_add_spacecraft();
  public:
  const ::vizProtobufferMessage::VizMessage_Spacecraft& spacecraft(int index) const;
  ::vizProtobufferMessage::VizMessage_Spacecraft* add_spacecraft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft >&
      spacecraft() const;

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  int cameras_size() const;
  private:
  int _internal_cameras_size() const;
  public:
  void clear_cameras();
  ::vizProtobufferMessage::VizMessage_CameraConfig* mutable_cameras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig >*
      mutable_cameras();
  private:
  const ::vizProtobufferMessage::VizMessage_CameraConfig& _internal_cameras(int index) const;
  ::vizProtobufferMessage::VizMessage_CameraConfig* _internal_add_cameras();
  public:
  const ::vizProtobufferMessage::VizMessage_CameraConfig& cameras(int index) const;
  ::vizProtobufferMessage::VizMessage_CameraConfig* add_cameras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig >&
      cameras() const;

  // repeated .vizProtobufferMessage.VizMessage.Location locations = 9;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  ::vizProtobufferMessage::VizMessage_Location* mutable_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Location >*
      mutable_locations();
  private:
  const ::vizProtobufferMessage::VizMessage_Location& _internal_locations(int index) const;
  ::vizProtobufferMessage::VizMessage_Location* _internal_add_locations();
  public:
  const ::vizProtobufferMessage::VizMessage_Location& locations(int index) const;
  ::vizProtobufferMessage::VizMessage_Location* add_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Location >&
      locations() const;

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  bool has_currenttime() const;
  private:
  bool _internal_has_currenttime() const;
  public:
  void clear_currenttime();
  const ::vizProtobufferMessage::VizMessage_TimeStamp& currenttime() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::vizProtobufferMessage::VizMessage_TimeStamp* release_currenttime();
  ::vizProtobufferMessage::VizMessage_TimeStamp* mutable_currenttime();
  void set_allocated_currenttime(::vizProtobufferMessage::VizMessage_TimeStamp* currenttime);
  private:
  const ::vizProtobufferMessage::VizMessage_TimeStamp& _internal_currenttime() const;
  ::vizProtobufferMessage::VizMessage_TimeStamp* _internal_mutable_currenttime();
  public:
  void unsafe_arena_set_allocated_currenttime(
      ::vizProtobufferMessage::VizMessage_TimeStamp* currenttime);
  ::vizProtobufferMessage::VizMessage_TimeStamp* unsafe_arena_release_currenttime();

  // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::vizProtobufferMessage::VizMessage_VizSettingsPb& settings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::vizProtobufferMessage::VizMessage_VizSettingsPb* release_settings();
  ::vizProtobufferMessage::VizMessage_VizSettingsPb* mutable_settings();
  void set_allocated_settings(::vizProtobufferMessage::VizMessage_VizSettingsPb* settings);
  private:
  const ::vizProtobufferMessage::VizMessage_VizSettingsPb& _internal_settings() const;
  ::vizProtobufferMessage::VizMessage_VizSettingsPb* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::vizProtobufferMessage::VizMessage_VizSettingsPb* settings);
  ::vizProtobufferMessage::VizMessage_VizSettingsPb* unsafe_arena_release_settings();

  // .vizProtobufferMessage.VizMessage.EpochDateTime epoch = 8;
  bool has_epoch() const;
  private:
  bool _internal_has_epoch() const;
  public:
  void clear_epoch();
  const ::vizProtobufferMessage::VizMessage_EpochDateTime& epoch() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::vizProtobufferMessage::VizMessage_EpochDateTime* release_epoch();
  ::vizProtobufferMessage::VizMessage_EpochDateTime* mutable_epoch();
  void set_allocated_epoch(::vizProtobufferMessage::VizMessage_EpochDateTime* epoch);
  private:
  const ::vizProtobufferMessage::VizMessage_EpochDateTime& _internal_epoch() const;
  ::vizProtobufferMessage::VizMessage_EpochDateTime* _internal_mutable_epoch();
  public:
  void unsafe_arena_set_allocated_epoch(
      ::vizProtobufferMessage::VizMessage_EpochDateTime* epoch);
  ::vizProtobufferMessage::VizMessage_EpochDateTime* unsafe_arena_release_epoch();

  // .vizProtobufferMessage.VizMessage.LiveVizSettingsPb liveSettings = 10;
  bool has_livesettings() const;
  private:
  bool _internal_has_livesettings() const;
  public:
  void clear_livesettings();
  const ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb& livesettings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* release_livesettings();
  ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* mutable_livesettings();
  void set_allocated_livesettings(::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* livesettings);
  private:
  const ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb& _internal_livesettings() const;
  ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* _internal_mutable_livesettings();
  public:
  void unsafe_arena_set_allocated_livesettings(
      ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* livesettings);
  ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* unsafe_arena_release_livesettings();

  // @@protoc_insertion_point(class_scope:vizProtobufferMessage.VizMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody > celestialbodies_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft > spacecraft_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig > cameras_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Location > locations_;
  ::vizProtobufferMessage::VizMessage_TimeStamp* currenttime_;
  ::vizProtobufferMessage::VizMessage_VizSettingsPb* settings_;
  ::vizProtobufferMessage::VizMessage_EpochDateTime* epoch_;
  ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* livesettings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vizMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VizMessage_EpochDateTime

// int32 year = 1;
inline void VizMessage_EpochDateTime::clear_year() {
  year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::year() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.EpochDateTime.year)
  return _internal_year();
}
inline void VizMessage_EpochDateTime::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  year_ = value;
}
inline void VizMessage_EpochDateTime::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.EpochDateTime.year)
}

// int32 month = 2;
inline void VizMessage_EpochDateTime::clear_month() {
  month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::month() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.EpochDateTime.month)
  return _internal_month();
}
inline void VizMessage_EpochDateTime::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  month_ = value;
}
inline void VizMessage_EpochDateTime::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.EpochDateTime.month)
}

// int32 day = 3;
inline void VizMessage_EpochDateTime::clear_day() {
  day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::day() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.EpochDateTime.day)
  return _internal_day();
}
inline void VizMessage_EpochDateTime::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_ = value;
}
inline void VizMessage_EpochDateTime::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.EpochDateTime.day)
}

// int32 hours = 4;
inline void VizMessage_EpochDateTime::clear_hours() {
  hours_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::_internal_hours() const {
  return hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::hours() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.EpochDateTime.hours)
  return _internal_hours();
}
inline void VizMessage_EpochDateTime::_internal_set_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hours_ = value;
}
inline void VizMessage_EpochDateTime::set_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hours(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.EpochDateTime.hours)
}

// int32 minutes = 5;
inline void VizMessage_EpochDateTime::clear_minutes() {
  minutes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::_internal_minutes() const {
  return minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_EpochDateTime::minutes() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.EpochDateTime.minutes)
  return _internal_minutes();
}
inline void VizMessage_EpochDateTime::_internal_set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minutes_ = value;
}
inline void VizMessage_EpochDateTime::set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minutes(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.EpochDateTime.minutes)
}

// double seconds = 6;
inline void VizMessage_EpochDateTime::clear_seconds() {
  seconds_ = 0;
}
inline double VizMessage_EpochDateTime::_internal_seconds() const {
  return seconds_;
}
inline double VizMessage_EpochDateTime::seconds() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.EpochDateTime.seconds)
  return _internal_seconds();
}
inline void VizMessage_EpochDateTime::_internal_set_seconds(double value) {
  
  seconds_ = value;
}
inline void VizMessage_EpochDateTime::set_seconds(double value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.EpochDateTime.seconds)
}

// -------------------------------------------------------------------

// VizMessage_TimeStamp

// int64 frameNumber = 1;
inline void VizMessage_TimeStamp::clear_framenumber() {
  framenumber_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_TimeStamp::_internal_framenumber() const {
  return framenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_TimeStamp::framenumber() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.TimeStamp.frameNumber)
  return _internal_framenumber();
}
inline void VizMessage_TimeStamp::_internal_set_framenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  framenumber_ = value;
}
inline void VizMessage_TimeStamp::set_framenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_framenumber(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.TimeStamp.frameNumber)
}

// double simTimeElapsed = 2;
inline void VizMessage_TimeStamp::clear_simtimeelapsed() {
  simtimeelapsed_ = 0;
}
inline double VizMessage_TimeStamp::_internal_simtimeelapsed() const {
  return simtimeelapsed_;
}
inline double VizMessage_TimeStamp::simtimeelapsed() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.TimeStamp.simTimeElapsed)
  return _internal_simtimeelapsed();
}
inline void VizMessage_TimeStamp::_internal_set_simtimeelapsed(double value) {
  
  simtimeelapsed_ = value;
}
inline void VizMessage_TimeStamp::set_simtimeelapsed(double value) {
  _internal_set_simtimeelapsed(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.TimeStamp.simTimeElapsed)
}

// -------------------------------------------------------------------

// VizMessage_CelestialBody

// string bodyName = 1;
inline void VizMessage_CelestialBody::clear_bodyname() {
  bodyname_.ClearToEmpty();
}
inline const std::string& VizMessage_CelestialBody::bodyname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
  return _internal_bodyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_CelestialBody::set_bodyname(ArgT0&& arg0, ArgT... args) {
 
 bodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
}
inline std::string* VizMessage_CelestialBody::mutable_bodyname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
  return _internal_mutable_bodyname();
}
inline const std::string& VizMessage_CelestialBody::_internal_bodyname() const {
  return bodyname_.Get();
}
inline void VizMessage_CelestialBody::_internal_set_bodyname(const std::string& value) {
  
  bodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_CelestialBody::_internal_mutable_bodyname() {
  
  return bodyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_CelestialBody::release_bodyname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
  return bodyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_CelestialBody::set_allocated_bodyname(std::string* bodyname) {
  if (bodyname != nullptr) {
    
  } else {
    
  }
  bodyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bodyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CelestialBody.bodyName)
}

// repeated double position = 2;
inline int VizMessage_CelestialBody::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_CelestialBody::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_CelestialBody::clear_position() {
  position_.Clear();
}
inline double VizMessage_CelestialBody::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_CelestialBody::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.position)
  return _internal_position(index);
}
inline void VizMessage_CelestialBody::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.position)
}
inline void VizMessage_CelestialBody::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_CelestialBody::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CelestialBody.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CelestialBody::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CelestialBody::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CelestialBody.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CelestialBody::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CelestialBody::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CelestialBody.position)
  return _internal_mutable_position();
}

// repeated double velocity = 3;
inline int VizMessage_CelestialBody::_internal_velocity_size() const {
  return velocity_.size();
}
inline int VizMessage_CelestialBody::velocity_size() const {
  return _internal_velocity_size();
}
inline void VizMessage_CelestialBody::clear_velocity() {
  velocity_.Clear();
}
inline double VizMessage_CelestialBody::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline double VizMessage_CelestialBody::velocity(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
  return _internal_velocity(index);
}
inline void VizMessage_CelestialBody::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
}
inline void VizMessage_CelestialBody::_internal_add_velocity(double value) {
  velocity_.Add(value);
}
inline void VizMessage_CelestialBody::add_velocity(double value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CelestialBody::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CelestialBody::velocity() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CelestialBody::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CelestialBody::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CelestialBody.velocity)
  return _internal_mutable_velocity();
}

// repeated double rotation = 4;
inline int VizMessage_CelestialBody::_internal_rotation_size() const {
  return rotation_.size();
}
inline int VizMessage_CelestialBody::rotation_size() const {
  return _internal_rotation_size();
}
inline void VizMessage_CelestialBody::clear_rotation() {
  rotation_.Clear();
}
inline double VizMessage_CelestialBody::_internal_rotation(int index) const {
  return rotation_.Get(index);
}
inline double VizMessage_CelestialBody::rotation(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
  return _internal_rotation(index);
}
inline void VizMessage_CelestialBody::set_rotation(int index, double value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
}
inline void VizMessage_CelestialBody::_internal_add_rotation(double value) {
  rotation_.Add(value);
}
inline void VizMessage_CelestialBody::add_rotation(double value) {
  _internal_add_rotation(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CelestialBody::_internal_rotation() const {
  return rotation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CelestialBody::rotation() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
  return _internal_rotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CelestialBody::_internal_mutable_rotation() {
  return &rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CelestialBody::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CelestialBody.rotation)
  return _internal_mutable_rotation();
}

// double mu = 5;
inline void VizMessage_CelestialBody::clear_mu() {
  mu_ = 0;
}
inline double VizMessage_CelestialBody::_internal_mu() const {
  return mu_;
}
inline double VizMessage_CelestialBody::mu() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.mu)
  return _internal_mu();
}
inline void VizMessage_CelestialBody::_internal_set_mu(double value) {
  
  mu_ = value;
}
inline void VizMessage_CelestialBody::set_mu(double value) {
  _internal_set_mu(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.mu)
}

// double radiusEq = 6;
inline void VizMessage_CelestialBody::clear_radiuseq() {
  radiuseq_ = 0;
}
inline double VizMessage_CelestialBody::_internal_radiuseq() const {
  return radiuseq_;
}
inline double VizMessage_CelestialBody::radiuseq() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.radiusEq)
  return _internal_radiuseq();
}
inline void VizMessage_CelestialBody::_internal_set_radiuseq(double value) {
  
  radiuseq_ = value;
}
inline void VizMessage_CelestialBody::set_radiuseq(double value) {
  _internal_set_radiuseq(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.radiusEq)
}

// double radiusRatio = 7;
inline void VizMessage_CelestialBody::clear_radiusratio() {
  radiusratio_ = 0;
}
inline double VizMessage_CelestialBody::_internal_radiusratio() const {
  return radiusratio_;
}
inline double VizMessage_CelestialBody::radiusratio() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.radiusRatio)
  return _internal_radiusratio();
}
inline void VizMessage_CelestialBody::_internal_set_radiusratio(double value) {
  
  radiusratio_ = value;
}
inline void VizMessage_CelestialBody::set_radiusratio(double value) {
  _internal_set_radiusratio(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.radiusRatio)
}

// string modelDictionaryKey = 8;
inline void VizMessage_CelestialBody::clear_modeldictionarykey() {
  modeldictionarykey_.ClearToEmpty();
}
inline const std::string& VizMessage_CelestialBody::modeldictionarykey() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CelestialBody.modelDictionaryKey)
  return _internal_modeldictionarykey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_CelestialBody::set_modeldictionarykey(ArgT0&& arg0, ArgT... args) {
 
 modeldictionarykey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CelestialBody.modelDictionaryKey)
}
inline std::string* VizMessage_CelestialBody::mutable_modeldictionarykey() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CelestialBody.modelDictionaryKey)
  return _internal_mutable_modeldictionarykey();
}
inline const std::string& VizMessage_CelestialBody::_internal_modeldictionarykey() const {
  return modeldictionarykey_.Get();
}
inline void VizMessage_CelestialBody::_internal_set_modeldictionarykey(const std::string& value) {
  
  modeldictionarykey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_CelestialBody::_internal_mutable_modeldictionarykey() {
  
  return modeldictionarykey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_CelestialBody::release_modeldictionarykey() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CelestialBody.modelDictionaryKey)
  return modeldictionarykey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_CelestialBody::set_allocated_modeldictionarykey(std::string* modeldictionarykey) {
  if (modeldictionarykey != nullptr) {
    
  } else {
    
  }
  modeldictionarykey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modeldictionarykey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CelestialBody.modelDictionaryKey)
}

// -------------------------------------------------------------------

// VizMessage_Spacecraft

// string spacecraftName = 1;
inline void VizMessage_Spacecraft::clear_spacecraftname() {
  spacecraftname_.ClearToEmpty();
}
inline const std::string& VizMessage_Spacecraft::spacecraftname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
  return _internal_spacecraftname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Spacecraft::set_spacecraftname(ArgT0&& arg0, ArgT... args) {
 
 spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
}
inline std::string* VizMessage_Spacecraft::mutable_spacecraftname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
  return _internal_mutable_spacecraftname();
}
inline const std::string& VizMessage_Spacecraft::_internal_spacecraftname() const {
  return spacecraftname_.Get();
}
inline void VizMessage_Spacecraft::_internal_set_spacecraftname(const std::string& value) {
  
  spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::_internal_mutable_spacecraftname() {
  
  return spacecraftname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::release_spacecraftname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
  return spacecraftname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Spacecraft::set_allocated_spacecraftname(std::string* spacecraftname) {
  if (spacecraftname != nullptr) {
    
  } else {
    
  }
  spacecraftname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecraftname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName)
}

// repeated double position = 2;
inline int VizMessage_Spacecraft::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_Spacecraft::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_Spacecraft::clear_position() {
  position_.Clear();
}
inline double VizMessage_Spacecraft::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_Spacecraft::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.position)
  return _internal_position(index);
}
inline void VizMessage_Spacecraft::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.position)
}
inline void VizMessage_Spacecraft::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_Spacecraft::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Spacecraft::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Spacecraft::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Spacecraft::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Spacecraft::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.position)
  return _internal_mutable_position();
}

// repeated double velocity = 3;
inline int VizMessage_Spacecraft::_internal_velocity_size() const {
  return velocity_.size();
}
inline int VizMessage_Spacecraft::velocity_size() const {
  return _internal_velocity_size();
}
inline void VizMessage_Spacecraft::clear_velocity() {
  velocity_.Clear();
}
inline double VizMessage_Spacecraft::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline double VizMessage_Spacecraft::velocity(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
  return _internal_velocity(index);
}
inline void VizMessage_Spacecraft::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
}
inline void VizMessage_Spacecraft::_internal_add_velocity(double value) {
  velocity_.Add(value);
}
inline void VizMessage_Spacecraft::add_velocity(double value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Spacecraft::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Spacecraft::velocity() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Spacecraft::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Spacecraft::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.velocity)
  return _internal_mutable_velocity();
}

// repeated double rotation = 4;
inline int VizMessage_Spacecraft::_internal_rotation_size() const {
  return rotation_.size();
}
inline int VizMessage_Spacecraft::rotation_size() const {
  return _internal_rotation_size();
}
inline void VizMessage_Spacecraft::clear_rotation() {
  rotation_.Clear();
}
inline double VizMessage_Spacecraft::_internal_rotation(int index) const {
  return rotation_.Get(index);
}
inline double VizMessage_Spacecraft::rotation(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
  return _internal_rotation(index);
}
inline void VizMessage_Spacecraft::set_rotation(int index, double value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
}
inline void VizMessage_Spacecraft::_internal_add_rotation(double value) {
  rotation_.Add(value);
}
inline void VizMessage_Spacecraft::add_rotation(double value) {
  _internal_add_rotation(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Spacecraft::_internal_rotation() const {
  return rotation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Spacecraft::rotation() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
  return _internal_rotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Spacecraft::_internal_mutable_rotation() {
  return &rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Spacecraft::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.rotation)
  return _internal_mutable_rotation();
}

// repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
inline int VizMessage_Spacecraft::_internal_reactionwheels_size() const {
  return reactionwheels_.size();
}
inline int VizMessage_Spacecraft::reactionwheels_size() const {
  return _internal_reactionwheels_size();
}
inline void VizMessage_Spacecraft::clear_reactionwheels() {
  reactionwheels_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_ReactionWheel* VizMessage_Spacecraft::mutable_reactionwheels(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return reactionwheels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel >*
VizMessage_Spacecraft::mutable_reactionwheels() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return &reactionwheels_;
}
inline const ::vizProtobufferMessage::VizMessage_ReactionWheel& VizMessage_Spacecraft::_internal_reactionwheels(int index) const {
  return reactionwheels_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_ReactionWheel& VizMessage_Spacecraft::reactionwheels(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return _internal_reactionwheels(index);
}
inline ::vizProtobufferMessage::VizMessage_ReactionWheel* VizMessage_Spacecraft::_internal_add_reactionwheels() {
  return reactionwheels_.Add();
}
inline ::vizProtobufferMessage::VizMessage_ReactionWheel* VizMessage_Spacecraft::add_reactionwheels() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return _internal_add_reactionwheels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ReactionWheel >&
VizMessage_Spacecraft::reactionwheels() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.reactionWheels)
  return reactionwheels_;
}

// repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
inline int VizMessage_Spacecraft::_internal_thrusters_size() const {
  return thrusters_.size();
}
inline int VizMessage_Spacecraft::thrusters_size() const {
  return _internal_thrusters_size();
}
inline void VizMessage_Spacecraft::clear_thrusters() {
  thrusters_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_Thruster* VizMessage_Spacecraft::mutable_thrusters(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return thrusters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster >*
VizMessage_Spacecraft::mutable_thrusters() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return &thrusters_;
}
inline const ::vizProtobufferMessage::VizMessage_Thruster& VizMessage_Spacecraft::_internal_thrusters(int index) const {
  return thrusters_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_Thruster& VizMessage_Spacecraft::thrusters(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return _internal_thrusters(index);
}
inline ::vizProtobufferMessage::VizMessage_Thruster* VizMessage_Spacecraft::_internal_add_thrusters() {
  return thrusters_.Add();
}
inline ::vizProtobufferMessage::VizMessage_Thruster* VizMessage_Spacecraft::add_thrusters() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return _internal_add_thrusters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Thruster >&
VizMessage_Spacecraft::thrusters() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.thrusters)
  return thrusters_;
}

// repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
inline int VizMessage_Spacecraft::_internal_css_size() const {
  return css_.size();
}
inline int VizMessage_Spacecraft::css_size() const {
  return _internal_css_size();
}
inline void VizMessage_Spacecraft::clear_css() {
  css_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_CoarseSunSensor* VizMessage_Spacecraft::mutable_css(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return css_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >*
VizMessage_Spacecraft::mutable_css() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return &css_;
}
inline const ::vizProtobufferMessage::VizMessage_CoarseSunSensor& VizMessage_Spacecraft::_internal_css(int index) const {
  return css_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_CoarseSunSensor& VizMessage_Spacecraft::css(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return _internal_css(index);
}
inline ::vizProtobufferMessage::VizMessage_CoarseSunSensor* VizMessage_Spacecraft::_internal_add_css() {
  return css_.Add();
}
inline ::vizProtobufferMessage::VizMessage_CoarseSunSensor* VizMessage_Spacecraft::add_css() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return _internal_add_css();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >&
VizMessage_Spacecraft::css() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.CSS)
  return css_;
}

// repeated .vizProtobufferMessage.VizMessage.GenericSensor genericSensors = 8;
inline int VizMessage_Spacecraft::_internal_genericsensors_size() const {
  return genericsensors_.size();
}
inline int VizMessage_Spacecraft::genericsensors_size() const {
  return _internal_genericsensors_size();
}
inline void VizMessage_Spacecraft::clear_genericsensors() {
  genericsensors_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_GenericSensor* VizMessage_Spacecraft::mutable_genericsensors(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.genericSensors)
  return genericsensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericSensor >*
VizMessage_Spacecraft::mutable_genericsensors() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.genericSensors)
  return &genericsensors_;
}
inline const ::vizProtobufferMessage::VizMessage_GenericSensor& VizMessage_Spacecraft::_internal_genericsensors(int index) const {
  return genericsensors_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_GenericSensor& VizMessage_Spacecraft::genericsensors(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.genericSensors)
  return _internal_genericsensors(index);
}
inline ::vizProtobufferMessage::VizMessage_GenericSensor* VizMessage_Spacecraft::_internal_add_genericsensors() {
  return genericsensors_.Add();
}
inline ::vizProtobufferMessage::VizMessage_GenericSensor* VizMessage_Spacecraft::add_genericsensors() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.genericSensors)
  return _internal_add_genericsensors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericSensor >&
VizMessage_Spacecraft::genericsensors() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.genericSensors)
  return genericsensors_;
}

// string spacecraftSprite = 9;
inline void VizMessage_Spacecraft::clear_spacecraftsprite() {
  spacecraftsprite_.ClearToEmpty();
}
inline const std::string& VizMessage_Spacecraft::spacecraftsprite() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftSprite)
  return _internal_spacecraftsprite();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Spacecraft::set_spacecraftsprite(ArgT0&& arg0, ArgT... args) {
 
 spacecraftsprite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftSprite)
}
inline std::string* VizMessage_Spacecraft::mutable_spacecraftsprite() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftSprite)
  return _internal_mutable_spacecraftsprite();
}
inline const std::string& VizMessage_Spacecraft::_internal_spacecraftsprite() const {
  return spacecraftsprite_.Get();
}
inline void VizMessage_Spacecraft::_internal_set_spacecraftsprite(const std::string& value) {
  
  spacecraftsprite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::_internal_mutable_spacecraftsprite() {
  
  return spacecraftsprite_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::release_spacecraftsprite() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftSprite)
  return spacecraftsprite_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Spacecraft::set_allocated_spacecraftsprite(std::string* spacecraftsprite) {
  if (spacecraftsprite != nullptr) {
    
  } else {
    
  }
  spacecraftsprite_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecraftsprite,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Spacecraft.spacecraftSprite)
}

// repeated .vizProtobufferMessage.VizMessage.Transceiver transceivers = 10;
inline int VizMessage_Spacecraft::_internal_transceivers_size() const {
  return transceivers_.size();
}
inline int VizMessage_Spacecraft::transceivers_size() const {
  return _internal_transceivers_size();
}
inline void VizMessage_Spacecraft::clear_transceivers() {
  transceivers_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_Transceiver* VizMessage_Spacecraft::mutable_transceivers(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.transceivers)
  return transceivers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Transceiver >*
VizMessage_Spacecraft::mutable_transceivers() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.transceivers)
  return &transceivers_;
}
inline const ::vizProtobufferMessage::VizMessage_Transceiver& VizMessage_Spacecraft::_internal_transceivers(int index) const {
  return transceivers_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_Transceiver& VizMessage_Spacecraft::transceivers(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.transceivers)
  return _internal_transceivers(index);
}
inline ::vizProtobufferMessage::VizMessage_Transceiver* VizMessage_Spacecraft::_internal_add_transceivers() {
  return transceivers_.Add();
}
inline ::vizProtobufferMessage::VizMessage_Transceiver* VizMessage_Spacecraft::add_transceivers() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.transceivers)
  return _internal_add_transceivers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Transceiver >&
VizMessage_Spacecraft::transceivers() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.transceivers)
  return transceivers_;
}

// repeated .vizProtobufferMessage.VizMessage.GenericStorage storageDevices = 11;
inline int VizMessage_Spacecraft::_internal_storagedevices_size() const {
  return storagedevices_.size();
}
inline int VizMessage_Spacecraft::storagedevices_size() const {
  return _internal_storagedevices_size();
}
inline void VizMessage_Spacecraft::clear_storagedevices() {
  storagedevices_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_GenericStorage* VizMessage_Spacecraft::mutable_storagedevices(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.storageDevices)
  return storagedevices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericStorage >*
VizMessage_Spacecraft::mutable_storagedevices() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.storageDevices)
  return &storagedevices_;
}
inline const ::vizProtobufferMessage::VizMessage_GenericStorage& VizMessage_Spacecraft::_internal_storagedevices(int index) const {
  return storagedevices_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_GenericStorage& VizMessage_Spacecraft::storagedevices(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.storageDevices)
  return _internal_storagedevices(index);
}
inline ::vizProtobufferMessage::VizMessage_GenericStorage* VizMessage_Spacecraft::_internal_add_storagedevices() {
  return storagedevices_.Add();
}
inline ::vizProtobufferMessage::VizMessage_GenericStorage* VizMessage_Spacecraft::add_storagedevices() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.storageDevices)
  return _internal_add_storagedevices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_GenericStorage >&
VizMessage_Spacecraft::storagedevices() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.storageDevices)
  return storagedevices_;
}

// repeated .vizProtobufferMessage.VizMessage.Light lights = 12;
inline int VizMessage_Spacecraft::_internal_lights_size() const {
  return lights_.size();
}
inline int VizMessage_Spacecraft::lights_size() const {
  return _internal_lights_size();
}
inline void VizMessage_Spacecraft::clear_lights() {
  lights_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_Light* VizMessage_Spacecraft::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.lights)
  return lights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Light >*
VizMessage_Spacecraft::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.lights)
  return &lights_;
}
inline const ::vizProtobufferMessage::VizMessage_Light& VizMessage_Spacecraft::_internal_lights(int index) const {
  return lights_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_Light& VizMessage_Spacecraft::lights(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.lights)
  return _internal_lights(index);
}
inline ::vizProtobufferMessage::VizMessage_Light* VizMessage_Spacecraft::_internal_add_lights() {
  return lights_.Add();
}
inline ::vizProtobufferMessage::VizMessage_Light* VizMessage_Spacecraft::add_lights() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.lights)
  return _internal_add_lights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Light >&
VizMessage_Spacecraft::lights() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.lights)
  return lights_;
}

// string modelDictionaryKey = 13;
inline void VizMessage_Spacecraft::clear_modeldictionarykey() {
  modeldictionarykey_.ClearToEmpty();
}
inline const std::string& VizMessage_Spacecraft::modeldictionarykey() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.modelDictionaryKey)
  return _internal_modeldictionarykey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Spacecraft::set_modeldictionarykey(ArgT0&& arg0, ArgT... args) {
 
 modeldictionarykey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.modelDictionaryKey)
}
inline std::string* VizMessage_Spacecraft::mutable_modeldictionarykey() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.modelDictionaryKey)
  return _internal_mutable_modeldictionarykey();
}
inline const std::string& VizMessage_Spacecraft::_internal_modeldictionarykey() const {
  return modeldictionarykey_.Get();
}
inline void VizMessage_Spacecraft::_internal_set_modeldictionarykey(const std::string& value) {
  
  modeldictionarykey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::_internal_mutable_modeldictionarykey() {
  
  return modeldictionarykey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::release_modeldictionarykey() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Spacecraft.modelDictionaryKey)
  return modeldictionarykey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Spacecraft::set_allocated_modeldictionarykey(std::string* modeldictionarykey) {
  if (modeldictionarykey != nullptr) {
    
  } else {
    
  }
  modeldictionarykey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modeldictionarykey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Spacecraft.modelDictionaryKey)
}

// repeated int32 oscOrbitLineColor = 14;
inline int VizMessage_Spacecraft::_internal_oscorbitlinecolor_size() const {
  return oscorbitlinecolor_.size();
}
inline int VizMessage_Spacecraft::oscorbitlinecolor_size() const {
  return _internal_oscorbitlinecolor_size();
}
inline void VizMessage_Spacecraft::clear_oscorbitlinecolor() {
  oscorbitlinecolor_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Spacecraft::_internal_oscorbitlinecolor(int index) const {
  return oscorbitlinecolor_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Spacecraft::oscorbitlinecolor(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.oscOrbitLineColor)
  return _internal_oscorbitlinecolor(index);
}
inline void VizMessage_Spacecraft::set_oscorbitlinecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  oscorbitlinecolor_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.oscOrbitLineColor)
}
inline void VizMessage_Spacecraft::_internal_add_oscorbitlinecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  oscorbitlinecolor_.Add(value);
}
inline void VizMessage_Spacecraft::add_oscorbitlinecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_oscorbitlinecolor(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.oscOrbitLineColor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Spacecraft::_internal_oscorbitlinecolor() const {
  return oscorbitlinecolor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Spacecraft::oscorbitlinecolor() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.oscOrbitLineColor)
  return _internal_oscorbitlinecolor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Spacecraft::_internal_mutable_oscorbitlinecolor() {
  return &oscorbitlinecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Spacecraft::mutable_oscorbitlinecolor() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.oscOrbitLineColor)
  return _internal_mutable_oscorbitlinecolor();
}

// repeated int32 trueTrajectoryLineColor = 15;
inline int VizMessage_Spacecraft::_internal_truetrajectorylinecolor_size() const {
  return truetrajectorylinecolor_.size();
}
inline int VizMessage_Spacecraft::truetrajectorylinecolor_size() const {
  return _internal_truetrajectorylinecolor_size();
}
inline void VizMessage_Spacecraft::clear_truetrajectorylinecolor() {
  truetrajectorylinecolor_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Spacecraft::_internal_truetrajectorylinecolor(int index) const {
  return truetrajectorylinecolor_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Spacecraft::truetrajectorylinecolor(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.trueTrajectoryLineColor)
  return _internal_truetrajectorylinecolor(index);
}
inline void VizMessage_Spacecraft::set_truetrajectorylinecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  truetrajectorylinecolor_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.trueTrajectoryLineColor)
}
inline void VizMessage_Spacecraft::_internal_add_truetrajectorylinecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  truetrajectorylinecolor_.Add(value);
}
inline void VizMessage_Spacecraft::add_truetrajectorylinecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_truetrajectorylinecolor(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.trueTrajectoryLineColor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Spacecraft::_internal_truetrajectorylinecolor() const {
  return truetrajectorylinecolor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Spacecraft::truetrajectorylinecolor() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.trueTrajectoryLineColor)
  return _internal_truetrajectorylinecolor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Spacecraft::_internal_mutable_truetrajectorylinecolor() {
  return &truetrajectorylinecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Spacecraft::mutable_truetrajectorylinecolor() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.trueTrajectoryLineColor)
  return _internal_mutable_truetrajectorylinecolor();
}

// string logoTexture = 16;
inline void VizMessage_Spacecraft::clear_logotexture() {
  logotexture_.ClearToEmpty();
}
inline const std::string& VizMessage_Spacecraft::logotexture() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.logoTexture)
  return _internal_logotexture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Spacecraft::set_logotexture(ArgT0&& arg0, ArgT... args) {
 
 logotexture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.logoTexture)
}
inline std::string* VizMessage_Spacecraft::mutable_logotexture() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.logoTexture)
  return _internal_mutable_logotexture();
}
inline const std::string& VizMessage_Spacecraft::_internal_logotexture() const {
  return logotexture_.Get();
}
inline void VizMessage_Spacecraft::_internal_set_logotexture(const std::string& value) {
  
  logotexture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::_internal_mutable_logotexture() {
  
  return logotexture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::release_logotexture() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Spacecraft.logoTexture)
  return logotexture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Spacecraft::set_allocated_logotexture(std::string* logotexture) {
  if (logotexture != nullptr) {
    
  } else {
    
  }
  logotexture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logotexture,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Spacecraft.logoTexture)
}

// repeated .vizProtobufferMessage.VizMessage.MultiSphere multiSpheres = 17;
inline int VizMessage_Spacecraft::_internal_multispheres_size() const {
  return multispheres_.size();
}
inline int VizMessage_Spacecraft::multispheres_size() const {
  return _internal_multispheres_size();
}
inline void VizMessage_Spacecraft::clear_multispheres() {
  multispheres_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_MultiSphere* VizMessage_Spacecraft::mutable_multispheres(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.multiSpheres)
  return multispheres_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_MultiSphere >*
VizMessage_Spacecraft::mutable_multispheres() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.multiSpheres)
  return &multispheres_;
}
inline const ::vizProtobufferMessage::VizMessage_MultiSphere& VizMessage_Spacecraft::_internal_multispheres(int index) const {
  return multispheres_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_MultiSphere& VizMessage_Spacecraft::multispheres(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.multiSpheres)
  return _internal_multispheres(index);
}
inline ::vizProtobufferMessage::VizMessage_MultiSphere* VizMessage_Spacecraft::_internal_add_multispheres() {
  return multispheres_.Add();
}
inline ::vizProtobufferMessage::VizMessage_MultiSphere* VizMessage_Spacecraft::add_multispheres() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.multiSpheres)
  return _internal_add_multispheres();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_MultiSphere >&
VizMessage_Spacecraft::multispheres() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.multiSpheres)
  return multispheres_;
}

// repeated .vizProtobufferMessage.VizMessage.Ellipsoid ellipsoids = 18;
inline int VizMessage_Spacecraft::_internal_ellipsoids_size() const {
  return ellipsoids_.size();
}
inline int VizMessage_Spacecraft::ellipsoids_size() const {
  return _internal_ellipsoids_size();
}
inline void VizMessage_Spacecraft::clear_ellipsoids() {
  ellipsoids_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_Ellipsoid* VizMessage_Spacecraft::mutable_ellipsoids(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.ellipsoids)
  return ellipsoids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Ellipsoid >*
VizMessage_Spacecraft::mutable_ellipsoids() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Spacecraft.ellipsoids)
  return &ellipsoids_;
}
inline const ::vizProtobufferMessage::VizMessage_Ellipsoid& VizMessage_Spacecraft::_internal_ellipsoids(int index) const {
  return ellipsoids_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_Ellipsoid& VizMessage_Spacecraft::ellipsoids(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.ellipsoids)
  return _internal_ellipsoids(index);
}
inline ::vizProtobufferMessage::VizMessage_Ellipsoid* VizMessage_Spacecraft::_internal_add_ellipsoids() {
  return ellipsoids_.Add();
}
inline ::vizProtobufferMessage::VizMessage_Ellipsoid* VizMessage_Spacecraft::add_ellipsoids() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Spacecraft.ellipsoids)
  return _internal_add_ellipsoids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Ellipsoid >&
VizMessage_Spacecraft::ellipsoids() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Spacecraft.ellipsoids)
  return ellipsoids_;
}

// string parentSpacecraftName = 19;
inline void VizMessage_Spacecraft::clear_parentspacecraftname() {
  parentspacecraftname_.ClearToEmpty();
}
inline const std::string& VizMessage_Spacecraft::parentspacecraftname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Spacecraft.parentSpacecraftName)
  return _internal_parentspacecraftname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Spacecraft::set_parentspacecraftname(ArgT0&& arg0, ArgT... args) {
 
 parentspacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Spacecraft.parentSpacecraftName)
}
inline std::string* VizMessage_Spacecraft::mutable_parentspacecraftname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Spacecraft.parentSpacecraftName)
  return _internal_mutable_parentspacecraftname();
}
inline const std::string& VizMessage_Spacecraft::_internal_parentspacecraftname() const {
  return parentspacecraftname_.Get();
}
inline void VizMessage_Spacecraft::_internal_set_parentspacecraftname(const std::string& value) {
  
  parentspacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::_internal_mutable_parentspacecraftname() {
  
  return parentspacecraftname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Spacecraft::release_parentspacecraftname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Spacecraft.parentSpacecraftName)
  return parentspacecraftname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Spacecraft::set_allocated_parentspacecraftname(std::string* parentspacecraftname) {
  if (parentspacecraftname != nullptr) {
    
  } else {
    
  }
  parentspacecraftname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentspacecraftname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Spacecraft.parentSpacecraftName)
}

// -------------------------------------------------------------------

// VizMessage_ReactionWheel

// repeated double position = 2;
inline int VizMessage_ReactionWheel::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_ReactionWheel::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_ReactionWheel::clear_position() {
  position_.Clear();
}
inline double VizMessage_ReactionWheel::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_ReactionWheel::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.position)
  return _internal_position(index);
}
inline void VizMessage_ReactionWheel::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.position)
}
inline void VizMessage_ReactionWheel::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_ReactionWheel::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.ReactionWheel.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_ReactionWheel::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_ReactionWheel::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.ReactionWheel.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_ReactionWheel::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_ReactionWheel::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.ReactionWheel.position)
  return _internal_mutable_position();
}

// repeated double spinAxisVector = 4;
inline int VizMessage_ReactionWheel::_internal_spinaxisvector_size() const {
  return spinaxisvector_.size();
}
inline int VizMessage_ReactionWheel::spinaxisvector_size() const {
  return _internal_spinaxisvector_size();
}
inline void VizMessage_ReactionWheel::clear_spinaxisvector() {
  spinaxisvector_.Clear();
}
inline double VizMessage_ReactionWheel::_internal_spinaxisvector(int index) const {
  return spinaxisvector_.Get(index);
}
inline double VizMessage_ReactionWheel::spinaxisvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
  return _internal_spinaxisvector(index);
}
inline void VizMessage_ReactionWheel::set_spinaxisvector(int index, double value) {
  spinaxisvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
}
inline void VizMessage_ReactionWheel::_internal_add_spinaxisvector(double value) {
  spinaxisvector_.Add(value);
}
inline void VizMessage_ReactionWheel::add_spinaxisvector(double value) {
  _internal_add_spinaxisvector(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_ReactionWheel::_internal_spinaxisvector() const {
  return spinaxisvector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_ReactionWheel::spinaxisvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
  return _internal_spinaxisvector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_ReactionWheel::_internal_mutable_spinaxisvector() {
  return &spinaxisvector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_ReactionWheel::mutable_spinaxisvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.ReactionWheel.spinAxisVector)
  return _internal_mutable_spinaxisvector();
}

// double wheelSpeed = 5;
inline void VizMessage_ReactionWheel::clear_wheelspeed() {
  wheelspeed_ = 0;
}
inline double VizMessage_ReactionWheel::_internal_wheelspeed() const {
  return wheelspeed_;
}
inline double VizMessage_ReactionWheel::wheelspeed() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.wheelSpeed)
  return _internal_wheelspeed();
}
inline void VizMessage_ReactionWheel::_internal_set_wheelspeed(double value) {
  
  wheelspeed_ = value;
}
inline void VizMessage_ReactionWheel::set_wheelspeed(double value) {
  _internal_set_wheelspeed(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.wheelSpeed)
}

// double wheelTorque = 6;
inline void VizMessage_ReactionWheel::clear_wheeltorque() {
  wheeltorque_ = 0;
}
inline double VizMessage_ReactionWheel::_internal_wheeltorque() const {
  return wheeltorque_;
}
inline double VizMessage_ReactionWheel::wheeltorque() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.wheelTorque)
  return _internal_wheeltorque();
}
inline void VizMessage_ReactionWheel::_internal_set_wheeltorque(double value) {
  
  wheeltorque_ = value;
}
inline void VizMessage_ReactionWheel::set_wheeltorque(double value) {
  _internal_set_wheeltorque(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.wheelTorque)
}

// double maxSpeed = 7;
inline void VizMessage_ReactionWheel::clear_maxspeed() {
  maxspeed_ = 0;
}
inline double VizMessage_ReactionWheel::_internal_maxspeed() const {
  return maxspeed_;
}
inline double VizMessage_ReactionWheel::maxspeed() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.maxSpeed)
  return _internal_maxspeed();
}
inline void VizMessage_ReactionWheel::_internal_set_maxspeed(double value) {
  
  maxspeed_ = value;
}
inline void VizMessage_ReactionWheel::set_maxspeed(double value) {
  _internal_set_maxspeed(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.maxSpeed)
}

// double maxTorque = 8;
inline void VizMessage_ReactionWheel::clear_maxtorque() {
  maxtorque_ = 0;
}
inline double VizMessage_ReactionWheel::_internal_maxtorque() const {
  return maxtorque_;
}
inline double VizMessage_ReactionWheel::maxtorque() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ReactionWheel.maxTorque)
  return _internal_maxtorque();
}
inline void VizMessage_ReactionWheel::_internal_set_maxtorque(double value) {
  
  maxtorque_ = value;
}
inline void VizMessage_ReactionWheel::set_maxtorque(double value) {
  _internal_set_maxtorque(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ReactionWheel.maxTorque)
}

// -------------------------------------------------------------------

// VizMessage_Thruster

// repeated double position = 2;
inline int VizMessage_Thruster::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_Thruster::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_Thruster::clear_position() {
  position_.Clear();
}
inline double VizMessage_Thruster::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_Thruster::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.position)
  return _internal_position(index);
}
inline void VizMessage_Thruster::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.position)
}
inline void VizMessage_Thruster::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_Thruster::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Thruster.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Thruster::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Thruster::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Thruster.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Thruster::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Thruster::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Thruster.position)
  return _internal_mutable_position();
}

// repeated double thrustVector = 4;
inline int VizMessage_Thruster::_internal_thrustvector_size() const {
  return thrustvector_.size();
}
inline int VizMessage_Thruster::thrustvector_size() const {
  return _internal_thrustvector_size();
}
inline void VizMessage_Thruster::clear_thrustvector() {
  thrustvector_.Clear();
}
inline double VizMessage_Thruster::_internal_thrustvector(int index) const {
  return thrustvector_.Get(index);
}
inline double VizMessage_Thruster::thrustvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
  return _internal_thrustvector(index);
}
inline void VizMessage_Thruster::set_thrustvector(int index, double value) {
  thrustvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
}
inline void VizMessage_Thruster::_internal_add_thrustvector(double value) {
  thrustvector_.Add(value);
}
inline void VizMessage_Thruster::add_thrustvector(double value) {
  _internal_add_thrustvector(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Thruster::_internal_thrustvector() const {
  return thrustvector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Thruster::thrustvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
  return _internal_thrustvector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Thruster::_internal_mutable_thrustvector() {
  return &thrustvector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Thruster::mutable_thrustvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Thruster.thrustVector)
  return _internal_mutable_thrustvector();
}

// double currentThrust = 5;
inline void VizMessage_Thruster::clear_currentthrust() {
  currentthrust_ = 0;
}
inline double VizMessage_Thruster::_internal_currentthrust() const {
  return currentthrust_;
}
inline double VizMessage_Thruster::currentthrust() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.currentThrust)
  return _internal_currentthrust();
}
inline void VizMessage_Thruster::_internal_set_currentthrust(double value) {
  
  currentthrust_ = value;
}
inline void VizMessage_Thruster::set_currentthrust(double value) {
  _internal_set_currentthrust(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.currentThrust)
}

// double maxThrust = 6;
inline void VizMessage_Thruster::clear_maxthrust() {
  maxthrust_ = 0;
}
inline double VizMessage_Thruster::_internal_maxthrust() const {
  return maxthrust_;
}
inline double VizMessage_Thruster::maxthrust() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.maxThrust)
  return _internal_maxthrust();
}
inline void VizMessage_Thruster::_internal_set_maxthrust(double value) {
  
  maxthrust_ = value;
}
inline void VizMessage_Thruster::set_maxthrust(double value) {
  _internal_set_maxthrust(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.maxThrust)
}

// string thrusterTag = 8;
inline void VizMessage_Thruster::clear_thrustertag() {
  thrustertag_.ClearToEmpty();
}
inline const std::string& VizMessage_Thruster::thrustertag() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.thrusterTag)
  return _internal_thrustertag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Thruster::set_thrustertag(ArgT0&& arg0, ArgT... args) {
 
 thrustertag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.thrusterTag)
}
inline std::string* VizMessage_Thruster::mutable_thrustertag() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Thruster.thrusterTag)
  return _internal_mutable_thrustertag();
}
inline const std::string& VizMessage_Thruster::_internal_thrustertag() const {
  return thrustertag_.Get();
}
inline void VizMessage_Thruster::_internal_set_thrustertag(const std::string& value) {
  
  thrustertag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Thruster::_internal_mutable_thrustertag() {
  
  return thrustertag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Thruster::release_thrustertag() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Thruster.thrusterTag)
  return thrustertag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Thruster::set_allocated_thrustertag(std::string* thrustertag) {
  if (thrustertag != nullptr) {
    
  } else {
    
  }
  thrustertag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thrustertag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Thruster.thrusterTag)
}

// repeated int32 color = 9;
inline int VizMessage_Thruster::_internal_color_size() const {
  return color_.size();
}
inline int VizMessage_Thruster::color_size() const {
  return _internal_color_size();
}
inline void VizMessage_Thruster::clear_color() {
  color_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Thruster::_internal_color(int index) const {
  return color_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Thruster::color(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Thruster.color)
  return _internal_color(index);
}
inline void VizMessage_Thruster::set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Thruster.color)
}
inline void VizMessage_Thruster::_internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Add(value);
}
inline void VizMessage_Thruster::add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Thruster.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Thruster::_internal_color() const {
  return color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Thruster::color() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Thruster.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Thruster::_internal_mutable_color() {
  return &color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Thruster::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Thruster.color)
  return _internal_mutable_color();
}

// -------------------------------------------------------------------

// VizMessage_CoarseSunSensor

// repeated double position = 2;
inline int VizMessage_CoarseSunSensor::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_CoarseSunSensor::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_CoarseSunSensor::clear_position() {
  position_.Clear();
}
inline double VizMessage_CoarseSunSensor::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_CoarseSunSensor::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
  return _internal_position(index);
}
inline void VizMessage_CoarseSunSensor::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
}
inline void VizMessage_CoarseSunSensor::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_CoarseSunSensor::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CoarseSunSensor::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CoarseSunSensor::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CoarseSunSensor::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CoarseSunSensor::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CoarseSunSensor.position)
  return _internal_mutable_position();
}

// double fieldOfView = 3;
inline void VizMessage_CoarseSunSensor::clear_fieldofview() {
  fieldofview_ = 0;
}
inline double VizMessage_CoarseSunSensor::_internal_fieldofview() const {
  return fieldofview_;
}
inline double VizMessage_CoarseSunSensor::fieldofview() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.fieldOfView)
  return _internal_fieldofview();
}
inline void VizMessage_CoarseSunSensor::_internal_set_fieldofview(double value) {
  
  fieldofview_ = value;
}
inline void VizMessage_CoarseSunSensor::set_fieldofview(double value) {
  _internal_set_fieldofview(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.fieldOfView)
}

// repeated double normalVector = 4;
inline int VizMessage_CoarseSunSensor::_internal_normalvector_size() const {
  return normalvector_.size();
}
inline int VizMessage_CoarseSunSensor::normalvector_size() const {
  return _internal_normalvector_size();
}
inline void VizMessage_CoarseSunSensor::clear_normalvector() {
  normalvector_.Clear();
}
inline double VizMessage_CoarseSunSensor::_internal_normalvector(int index) const {
  return normalvector_.Get(index);
}
inline double VizMessage_CoarseSunSensor::normalvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
  return _internal_normalvector(index);
}
inline void VizMessage_CoarseSunSensor::set_normalvector(int index, double value) {
  normalvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
}
inline void VizMessage_CoarseSunSensor::_internal_add_normalvector(double value) {
  normalvector_.Add(value);
}
inline void VizMessage_CoarseSunSensor::add_normalvector(double value) {
  _internal_add_normalvector(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CoarseSunSensor::_internal_normalvector() const {
  return normalvector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CoarseSunSensor::normalvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
  return _internal_normalvector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CoarseSunSensor::_internal_mutable_normalvector() {
  return &normalvector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CoarseSunSensor::mutable_normalvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CoarseSunSensor.normalVector)
  return _internal_mutable_normalvector();
}

// double currentMsmt = 5;
inline void VizMessage_CoarseSunSensor::clear_currentmsmt() {
  currentmsmt_ = 0;
}
inline double VizMessage_CoarseSunSensor::_internal_currentmsmt() const {
  return currentmsmt_;
}
inline double VizMessage_CoarseSunSensor::currentmsmt() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.currentMsmt)
  return _internal_currentmsmt();
}
inline void VizMessage_CoarseSunSensor::_internal_set_currentmsmt(double value) {
  
  currentmsmt_ = value;
}
inline void VizMessage_CoarseSunSensor::set_currentmsmt(double value) {
  _internal_set_currentmsmt(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.currentMsmt)
}

// double maxMsmt = 6;
inline void VizMessage_CoarseSunSensor::clear_maxmsmt() {
  maxmsmt_ = 0;
}
inline double VizMessage_CoarseSunSensor::_internal_maxmsmt() const {
  return maxmsmt_;
}
inline double VizMessage_CoarseSunSensor::maxmsmt() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.maxMsmt)
  return _internal_maxmsmt();
}
inline void VizMessage_CoarseSunSensor::_internal_set_maxmsmt(double value) {
  
  maxmsmt_ = value;
}
inline void VizMessage_CoarseSunSensor::set_maxmsmt(double value) {
  _internal_set_maxmsmt(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.maxMsmt)
}

// int32 CSSGroupID = 7;
inline void VizMessage_CoarseSunSensor::clear_cssgroupid() {
  cssgroupid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_CoarseSunSensor::_internal_cssgroupid() const {
  return cssgroupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_CoarseSunSensor::cssgroupid() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.CSSGroupID)
  return _internal_cssgroupid();
}
inline void VizMessage_CoarseSunSensor::_internal_set_cssgroupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cssgroupid_ = value;
}
inline void VizMessage_CoarseSunSensor::set_cssgroupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cssgroupid(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.CSSGroupID)
}

// double minMsmt = 8;
inline void VizMessage_CoarseSunSensor::clear_minmsmt() {
  minmsmt_ = 0;
}
inline double VizMessage_CoarseSunSensor::_internal_minmsmt() const {
  return minmsmt_;
}
inline double VizMessage_CoarseSunSensor::minmsmt() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CoarseSunSensor.minMsmt)
  return _internal_minmsmt();
}
inline void VizMessage_CoarseSunSensor::_internal_set_minmsmt(double value) {
  
  minmsmt_ = value;
}
inline void VizMessage_CoarseSunSensor::set_minmsmt(double value) {
  _internal_set_minmsmt(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CoarseSunSensor.minMsmt)
}

// -------------------------------------------------------------------

// VizMessage_GenericSensor

// repeated double position = 2;
inline int VizMessage_GenericSensor::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_GenericSensor::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_GenericSensor::clear_position() {
  position_.Clear();
}
inline double VizMessage_GenericSensor::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_GenericSensor::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericSensor.position)
  return _internal_position(index);
}
inline void VizMessage_GenericSensor::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericSensor.position)
}
inline void VizMessage_GenericSensor::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_GenericSensor::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.GenericSensor.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_GenericSensor::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_GenericSensor::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.GenericSensor.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_GenericSensor::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_GenericSensor::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.GenericSensor.position)
  return _internal_mutable_position();
}

// repeated double fieldOfView = 3;
inline int VizMessage_GenericSensor::_internal_fieldofview_size() const {
  return fieldofview_.size();
}
inline int VizMessage_GenericSensor::fieldofview_size() const {
  return _internal_fieldofview_size();
}
inline void VizMessage_GenericSensor::clear_fieldofview() {
  fieldofview_.Clear();
}
inline double VizMessage_GenericSensor::_internal_fieldofview(int index) const {
  return fieldofview_.Get(index);
}
inline double VizMessage_GenericSensor::fieldofview(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericSensor.fieldOfView)
  return _internal_fieldofview(index);
}
inline void VizMessage_GenericSensor::set_fieldofview(int index, double value) {
  fieldofview_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericSensor.fieldOfView)
}
inline void VizMessage_GenericSensor::_internal_add_fieldofview(double value) {
  fieldofview_.Add(value);
}
inline void VizMessage_GenericSensor::add_fieldofview(double value) {
  _internal_add_fieldofview(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.GenericSensor.fieldOfView)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_GenericSensor::_internal_fieldofview() const {
  return fieldofview_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_GenericSensor::fieldofview() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.GenericSensor.fieldOfView)
  return _internal_fieldofview();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_GenericSensor::_internal_mutable_fieldofview() {
  return &fieldofview_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_GenericSensor::mutable_fieldofview() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.GenericSensor.fieldOfView)
  return _internal_mutable_fieldofview();
}

// repeated double normalVector = 4;
inline int VizMessage_GenericSensor::_internal_normalvector_size() const {
  return normalvector_.size();
}
inline int VizMessage_GenericSensor::normalvector_size() const {
  return _internal_normalvector_size();
}
inline void VizMessage_GenericSensor::clear_normalvector() {
  normalvector_.Clear();
}
inline double VizMessage_GenericSensor::_internal_normalvector(int index) const {
  return normalvector_.Get(index);
}
inline double VizMessage_GenericSensor::normalvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericSensor.normalVector)
  return _internal_normalvector(index);
}
inline void VizMessage_GenericSensor::set_normalvector(int index, double value) {
  normalvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericSensor.normalVector)
}
inline void VizMessage_GenericSensor::_internal_add_normalvector(double value) {
  normalvector_.Add(value);
}
inline void VizMessage_GenericSensor::add_normalvector(double value) {
  _internal_add_normalvector(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.GenericSensor.normalVector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_GenericSensor::_internal_normalvector() const {
  return normalvector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_GenericSensor::normalvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.GenericSensor.normalVector)
  return _internal_normalvector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_GenericSensor::_internal_mutable_normalvector() {
  return &normalvector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_GenericSensor::mutable_normalvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.GenericSensor.normalVector)
  return _internal_mutable_normalvector();
}

// bool isHidden = 5;
inline void VizMessage_GenericSensor::clear_ishidden() {
  ishidden_ = false;
}
inline bool VizMessage_GenericSensor::_internal_ishidden() const {
  return ishidden_;
}
inline bool VizMessage_GenericSensor::ishidden() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericSensor.isHidden)
  return _internal_ishidden();
}
inline void VizMessage_GenericSensor::_internal_set_ishidden(bool value) {
  
  ishidden_ = value;
}
inline void VizMessage_GenericSensor::set_ishidden(bool value) {
  _internal_set_ishidden(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericSensor.isHidden)
}

// int32 activityStatus = 6;
inline void VizMessage_GenericSensor::clear_activitystatus() {
  activitystatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_GenericSensor::_internal_activitystatus() const {
  return activitystatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_GenericSensor::activitystatus() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericSensor.activityStatus)
  return _internal_activitystatus();
}
inline void VizMessage_GenericSensor::_internal_set_activitystatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activitystatus_ = value;
}
inline void VizMessage_GenericSensor::set_activitystatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activitystatus(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericSensor.activityStatus)
}

// double size = 7;
inline void VizMessage_GenericSensor::clear_size() {
  size_ = 0;
}
inline double VizMessage_GenericSensor::_internal_size() const {
  return size_;
}
inline double VizMessage_GenericSensor::size() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericSensor.size)
  return _internal_size();
}
inline void VizMessage_GenericSensor::_internal_set_size(double value) {
  
  size_ = value;
}
inline void VizMessage_GenericSensor::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericSensor.size)
}

// repeated int32 color = 8;
inline int VizMessage_GenericSensor::_internal_color_size() const {
  return color_.size();
}
inline int VizMessage_GenericSensor::color_size() const {
  return _internal_color_size();
}
inline void VizMessage_GenericSensor::clear_color() {
  color_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_GenericSensor::_internal_color(int index) const {
  return color_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_GenericSensor::color(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericSensor.color)
  return _internal_color(index);
}
inline void VizMessage_GenericSensor::set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericSensor.color)
}
inline void VizMessage_GenericSensor::_internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Add(value);
}
inline void VizMessage_GenericSensor::add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.GenericSensor.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_GenericSensor::_internal_color() const {
  return color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_GenericSensor::color() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.GenericSensor.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_GenericSensor::_internal_mutable_color() {
  return &color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_GenericSensor::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.GenericSensor.color)
  return _internal_mutable_color();
}

// string label = 9;
inline void VizMessage_GenericSensor::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& VizMessage_GenericSensor::label() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericSensor.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_GenericSensor::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericSensor.label)
}
inline std::string* VizMessage_GenericSensor::mutable_label() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.GenericSensor.label)
  return _internal_mutable_label();
}
inline const std::string& VizMessage_GenericSensor::_internal_label() const {
  return label_.Get();
}
inline void VizMessage_GenericSensor::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_GenericSensor::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_GenericSensor::release_label() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.GenericSensor.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_GenericSensor::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.GenericSensor.label)
}

// -------------------------------------------------------------------

// VizMessage_GenericStorage

// string label = 2;
inline void VizMessage_GenericStorage::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& VizMessage_GenericStorage::label() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericStorage.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_GenericStorage::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericStorage.label)
}
inline std::string* VizMessage_GenericStorage::mutable_label() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.GenericStorage.label)
  return _internal_mutable_label();
}
inline const std::string& VizMessage_GenericStorage::_internal_label() const {
  return label_.Get();
}
inline void VizMessage_GenericStorage::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_GenericStorage::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_GenericStorage::release_label() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.GenericStorage.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_GenericStorage::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.GenericStorage.label)
}

// double currentValue = 3;
inline void VizMessage_GenericStorage::clear_currentvalue() {
  currentvalue_ = 0;
}
inline double VizMessage_GenericStorage::_internal_currentvalue() const {
  return currentvalue_;
}
inline double VizMessage_GenericStorage::currentvalue() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericStorage.currentValue)
  return _internal_currentvalue();
}
inline void VizMessage_GenericStorage::_internal_set_currentvalue(double value) {
  
  currentvalue_ = value;
}
inline void VizMessage_GenericStorage::set_currentvalue(double value) {
  _internal_set_currentvalue(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericStorage.currentValue)
}

// double maxValue = 4;
inline void VizMessage_GenericStorage::clear_maxvalue() {
  maxvalue_ = 0;
}
inline double VizMessage_GenericStorage::_internal_maxvalue() const {
  return maxvalue_;
}
inline double VizMessage_GenericStorage::maxvalue() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericStorage.maxValue)
  return _internal_maxvalue();
}
inline void VizMessage_GenericStorage::_internal_set_maxvalue(double value) {
  
  maxvalue_ = value;
}
inline void VizMessage_GenericStorage::set_maxvalue(double value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericStorage.maxValue)
}

// string units = 5;
inline void VizMessage_GenericStorage::clear_units() {
  units_.ClearToEmpty();
}
inline const std::string& VizMessage_GenericStorage::units() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericStorage.units)
  return _internal_units();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_GenericStorage::set_units(ArgT0&& arg0, ArgT... args) {
 
 units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericStorage.units)
}
inline std::string* VizMessage_GenericStorage::mutable_units() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.GenericStorage.units)
  return _internal_mutable_units();
}
inline const std::string& VizMessage_GenericStorage::_internal_units() const {
  return units_.Get();
}
inline void VizMessage_GenericStorage::_internal_set_units(const std::string& value) {
  
  units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_GenericStorage::_internal_mutable_units() {
  
  return units_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_GenericStorage::release_units() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.GenericStorage.units)
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_GenericStorage::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.GenericStorage.units)
}

// repeated int32 color = 6;
inline int VizMessage_GenericStorage::_internal_color_size() const {
  return color_.size();
}
inline int VizMessage_GenericStorage::color_size() const {
  return _internal_color_size();
}
inline void VizMessage_GenericStorage::clear_color() {
  color_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_GenericStorage::_internal_color(int index) const {
  return color_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_GenericStorage::color(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericStorage.color)
  return _internal_color(index);
}
inline void VizMessage_GenericStorage::set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericStorage.color)
}
inline void VizMessage_GenericStorage::_internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Add(value);
}
inline void VizMessage_GenericStorage::add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.GenericStorage.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_GenericStorage::_internal_color() const {
  return color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_GenericStorage::color() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.GenericStorage.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_GenericStorage::_internal_mutable_color() {
  return &color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_GenericStorage::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.GenericStorage.color)
  return _internal_mutable_color();
}

// repeated int32 thresholds = 7;
inline int VizMessage_GenericStorage::_internal_thresholds_size() const {
  return thresholds_.size();
}
inline int VizMessage_GenericStorage::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void VizMessage_GenericStorage::clear_thresholds() {
  thresholds_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_GenericStorage::_internal_thresholds(int index) const {
  return thresholds_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_GenericStorage::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.GenericStorage.thresholds)
  return _internal_thresholds(index);
}
inline void VizMessage_GenericStorage::set_thresholds(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.GenericStorage.thresholds)
}
inline void VizMessage_GenericStorage::_internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  thresholds_.Add(value);
}
inline void VizMessage_GenericStorage::add_thresholds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_thresholds(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.GenericStorage.thresholds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_GenericStorage::_internal_thresholds() const {
  return thresholds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_GenericStorage::thresholds() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.GenericStorage.thresholds)
  return _internal_thresholds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_GenericStorage::_internal_mutable_thresholds() {
  return &thresholds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_GenericStorage::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.GenericStorage.thresholds)
  return _internal_mutable_thresholds();
}

// -------------------------------------------------------------------

// VizMessage_Light

// string label = 1;
inline void VizMessage_Light::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& VizMessage_Light::label() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Light::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.label)
}
inline std::string* VizMessage_Light::mutable_label() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Light.label)
  return _internal_mutable_label();
}
inline const std::string& VizMessage_Light::_internal_label() const {
  return label_.Get();
}
inline void VizMessage_Light::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Light::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Light::release_label() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Light.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Light::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Light.label)
}

// repeated double position = 2;
inline int VizMessage_Light::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_Light::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_Light::clear_position() {
  position_.Clear();
}
inline double VizMessage_Light::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_Light::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.position)
  return _internal_position(index);
}
inline void VizMessage_Light::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.position)
}
inline void VizMessage_Light::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_Light::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Light.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Light::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Light::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Light.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Light::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Light::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Light.position)
  return _internal_mutable_position();
}

// double fieldOfView = 3;
inline void VizMessage_Light::clear_fieldofview() {
  fieldofview_ = 0;
}
inline double VizMessage_Light::_internal_fieldofview() const {
  return fieldofview_;
}
inline double VizMessage_Light::fieldofview() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.fieldOfView)
  return _internal_fieldofview();
}
inline void VizMessage_Light::_internal_set_fieldofview(double value) {
  
  fieldofview_ = value;
}
inline void VizMessage_Light::set_fieldofview(double value) {
  _internal_set_fieldofview(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.fieldOfView)
}

// repeated double normalVector = 4;
inline int VizMessage_Light::_internal_normalvector_size() const {
  return normalvector_.size();
}
inline int VizMessage_Light::normalvector_size() const {
  return _internal_normalvector_size();
}
inline void VizMessage_Light::clear_normalvector() {
  normalvector_.Clear();
}
inline double VizMessage_Light::_internal_normalvector(int index) const {
  return normalvector_.Get(index);
}
inline double VizMessage_Light::normalvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.normalVector)
  return _internal_normalvector(index);
}
inline void VizMessage_Light::set_normalvector(int index, double value) {
  normalvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.normalVector)
}
inline void VizMessage_Light::_internal_add_normalvector(double value) {
  normalvector_.Add(value);
}
inline void VizMessage_Light::add_normalvector(double value) {
  _internal_add_normalvector(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Light.normalVector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Light::_internal_normalvector() const {
  return normalvector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Light::normalvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Light.normalVector)
  return _internal_normalvector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Light::_internal_mutable_normalvector() {
  return &normalvector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Light::mutable_normalvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Light.normalVector)
  return _internal_mutable_normalvector();
}

// int32 lightOn = 5;
inline void VizMessage_Light::clear_lighton() {
  lighton_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Light::_internal_lighton() const {
  return lighton_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Light::lighton() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.lightOn)
  return _internal_lighton();
}
inline void VizMessage_Light::_internal_set_lighton(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lighton_ = value;
}
inline void VizMessage_Light::set_lighton(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lighton(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.lightOn)
}

// double range = 6;
inline void VizMessage_Light::clear_range() {
  range_ = 0;
}
inline double VizMessage_Light::_internal_range() const {
  return range_;
}
inline double VizMessage_Light::range() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.range)
  return _internal_range();
}
inline void VizMessage_Light::_internal_set_range(double value) {
  
  range_ = value;
}
inline void VizMessage_Light::set_range(double value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.range)
}

// double intensity = 7;
inline void VizMessage_Light::clear_intensity() {
  intensity_ = 0;
}
inline double VizMessage_Light::_internal_intensity() const {
  return intensity_;
}
inline double VizMessage_Light::intensity() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.intensity)
  return _internal_intensity();
}
inline void VizMessage_Light::_internal_set_intensity(double value) {
  
  intensity_ = value;
}
inline void VizMessage_Light::set_intensity(double value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.intensity)
}

// int32 showLightMarker = 8;
inline void VizMessage_Light::clear_showlightmarker() {
  showlightmarker_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Light::_internal_showlightmarker() const {
  return showlightmarker_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Light::showlightmarker() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.showLightMarker)
  return _internal_showlightmarker();
}
inline void VizMessage_Light::_internal_set_showlightmarker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showlightmarker_ = value;
}
inline void VizMessage_Light::set_showlightmarker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showlightmarker(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.showLightMarker)
}

// double markerDiameter = 9;
inline void VizMessage_Light::clear_markerdiameter() {
  markerdiameter_ = 0;
}
inline double VizMessage_Light::_internal_markerdiameter() const {
  return markerdiameter_;
}
inline double VizMessage_Light::markerdiameter() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.markerDiameter)
  return _internal_markerdiameter();
}
inline void VizMessage_Light::_internal_set_markerdiameter(double value) {
  
  markerdiameter_ = value;
}
inline void VizMessage_Light::set_markerdiameter(double value) {
  _internal_set_markerdiameter(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.markerDiameter)
}

// repeated int32 color = 10;
inline int VizMessage_Light::_internal_color_size() const {
  return color_.size();
}
inline int VizMessage_Light::color_size() const {
  return _internal_color_size();
}
inline void VizMessage_Light::clear_color() {
  color_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Light::_internal_color(int index) const {
  return color_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Light::color(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.color)
  return _internal_color(index);
}
inline void VizMessage_Light::set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.color)
}
inline void VizMessage_Light::_internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Add(value);
}
inline void VizMessage_Light::add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Light.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Light::_internal_color() const {
  return color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Light::color() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Light.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Light::_internal_mutable_color() {
  return &color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Light::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Light.color)
  return _internal_mutable_color();
}

// double gammaSaturation = 11;
inline void VizMessage_Light::clear_gammasaturation() {
  gammasaturation_ = 0;
}
inline double VizMessage_Light::_internal_gammasaturation() const {
  return gammasaturation_;
}
inline double VizMessage_Light::gammasaturation() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.gammaSaturation)
  return _internal_gammasaturation();
}
inline void VizMessage_Light::_internal_set_gammasaturation(double value) {
  
  gammasaturation_ = value;
}
inline void VizMessage_Light::set_gammasaturation(double value) {
  _internal_set_gammasaturation(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.gammaSaturation)
}

// int32 showLensFlare = 12;
inline void VizMessage_Light::clear_showlensflare() {
  showlensflare_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Light::_internal_showlensflare() const {
  return showlensflare_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Light::showlensflare() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.showLensFlare)
  return _internal_showlensflare();
}
inline void VizMessage_Light::_internal_set_showlensflare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showlensflare_ = value;
}
inline void VizMessage_Light::set_showlensflare(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showlensflare(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.showLensFlare)
}

// double lensFlareBrightness = 13;
inline void VizMessage_Light::clear_lensflarebrightness() {
  lensflarebrightness_ = 0;
}
inline double VizMessage_Light::_internal_lensflarebrightness() const {
  return lensflarebrightness_;
}
inline double VizMessage_Light::lensflarebrightness() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.lensFlareBrightness)
  return _internal_lensflarebrightness();
}
inline void VizMessage_Light::_internal_set_lensflarebrightness(double value) {
  
  lensflarebrightness_ = value;
}
inline void VizMessage_Light::set_lensflarebrightness(double value) {
  _internal_set_lensflarebrightness(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.lensFlareBrightness)
}

// double lensFlareFadeSpeed = 14;
inline void VizMessage_Light::clear_lensflarefadespeed() {
  lensflarefadespeed_ = 0;
}
inline double VizMessage_Light::_internal_lensflarefadespeed() const {
  return lensflarefadespeed_;
}
inline double VizMessage_Light::lensflarefadespeed() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Light.lensFlareFadeSpeed)
  return _internal_lensflarefadespeed();
}
inline void VizMessage_Light::_internal_set_lensflarefadespeed(double value) {
  
  lensflarefadespeed_ = value;
}
inline void VizMessage_Light::set_lensflarefadespeed(double value) {
  _internal_set_lensflarefadespeed(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Light.lensFlareFadeSpeed)
}

// -------------------------------------------------------------------

// VizMessage_Transceiver

// repeated double position = 2;
inline int VizMessage_Transceiver::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_Transceiver::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_Transceiver::clear_position() {
  position_.Clear();
}
inline double VizMessage_Transceiver::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_Transceiver::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Transceiver.position)
  return _internal_position(index);
}
inline void VizMessage_Transceiver::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Transceiver.position)
}
inline void VizMessage_Transceiver::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_Transceiver::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Transceiver.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Transceiver::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Transceiver::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Transceiver.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Transceiver::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Transceiver::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Transceiver.position)
  return _internal_mutable_position();
}

// double fieldOfView = 3;
inline void VizMessage_Transceiver::clear_fieldofview() {
  fieldofview_ = 0;
}
inline double VizMessage_Transceiver::_internal_fieldofview() const {
  return fieldofview_;
}
inline double VizMessage_Transceiver::fieldofview() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Transceiver.fieldOfView)
  return _internal_fieldofview();
}
inline void VizMessage_Transceiver::_internal_set_fieldofview(double value) {
  
  fieldofview_ = value;
}
inline void VizMessage_Transceiver::set_fieldofview(double value) {
  _internal_set_fieldofview(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Transceiver.fieldOfView)
}

// repeated double normalVector = 4;
inline int VizMessage_Transceiver::_internal_normalvector_size() const {
  return normalvector_.size();
}
inline int VizMessage_Transceiver::normalvector_size() const {
  return _internal_normalvector_size();
}
inline void VizMessage_Transceiver::clear_normalvector() {
  normalvector_.Clear();
}
inline double VizMessage_Transceiver::_internal_normalvector(int index) const {
  return normalvector_.Get(index);
}
inline double VizMessage_Transceiver::normalvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Transceiver.normalVector)
  return _internal_normalvector(index);
}
inline void VizMessage_Transceiver::set_normalvector(int index, double value) {
  normalvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Transceiver.normalVector)
}
inline void VizMessage_Transceiver::_internal_add_normalvector(double value) {
  normalvector_.Add(value);
}
inline void VizMessage_Transceiver::add_normalvector(double value) {
  _internal_add_normalvector(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Transceiver.normalVector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Transceiver::_internal_normalvector() const {
  return normalvector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Transceiver::normalvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Transceiver.normalVector)
  return _internal_normalvector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Transceiver::_internal_mutable_normalvector() {
  return &normalvector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Transceiver::mutable_normalvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Transceiver.normalVector)
  return _internal_mutable_normalvector();
}

// bool isHidden = 5;
inline void VizMessage_Transceiver::clear_ishidden() {
  ishidden_ = false;
}
inline bool VizMessage_Transceiver::_internal_ishidden() const {
  return ishidden_;
}
inline bool VizMessage_Transceiver::ishidden() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Transceiver.isHidden)
  return _internal_ishidden();
}
inline void VizMessage_Transceiver::_internal_set_ishidden(bool value) {
  
  ishidden_ = value;
}
inline void VizMessage_Transceiver::set_ishidden(bool value) {
  _internal_set_ishidden(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Transceiver.isHidden)
}

// int32 transmitStatus = 6;
inline void VizMessage_Transceiver::clear_transmitstatus() {
  transmitstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Transceiver::_internal_transmitstatus() const {
  return transmitstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Transceiver::transmitstatus() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Transceiver.transmitStatus)
  return _internal_transmitstatus();
}
inline void VizMessage_Transceiver::_internal_set_transmitstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transmitstatus_ = value;
}
inline void VizMessage_Transceiver::set_transmitstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transmitstatus(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Transceiver.transmitStatus)
}

// repeated int32 color = 8;
inline int VizMessage_Transceiver::_internal_color_size() const {
  return color_.size();
}
inline int VizMessage_Transceiver::color_size() const {
  return _internal_color_size();
}
inline void VizMessage_Transceiver::clear_color() {
  color_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Transceiver::_internal_color(int index) const {
  return color_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Transceiver::color(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Transceiver.color)
  return _internal_color(index);
}
inline void VizMessage_Transceiver::set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Transceiver.color)
}
inline void VizMessage_Transceiver::_internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Add(value);
}
inline void VizMessage_Transceiver::add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Transceiver.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Transceiver::_internal_color() const {
  return color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Transceiver::color() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Transceiver.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Transceiver::_internal_mutable_color() {
  return &color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Transceiver::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Transceiver.color)
  return _internal_mutable_color();
}

// string label = 9;
inline void VizMessage_Transceiver::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& VizMessage_Transceiver::label() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Transceiver.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Transceiver::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Transceiver.label)
}
inline std::string* VizMessage_Transceiver::mutable_label() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Transceiver.label)
  return _internal_mutable_label();
}
inline const std::string& VizMessage_Transceiver::_internal_label() const {
  return label_.Get();
}
inline void VizMessage_Transceiver::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Transceiver::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Transceiver::release_label() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Transceiver.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Transceiver::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Transceiver.label)
}

// int32 animationSpeed = 10;
inline void VizMessage_Transceiver::clear_animationspeed() {
  animationspeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Transceiver::_internal_animationspeed() const {
  return animationspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Transceiver::animationspeed() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Transceiver.animationSpeed)
  return _internal_animationspeed();
}
inline void VizMessage_Transceiver::_internal_set_animationspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  animationspeed_ = value;
}
inline void VizMessage_Transceiver::set_animationspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_animationspeed(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Transceiver.animationSpeed)
}

// -------------------------------------------------------------------

// VizMessage_CameraConfig

// int64 cameraID = 1;
inline void VizMessage_CameraConfig::clear_cameraid() {
  cameraid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_CameraConfig::_internal_cameraid() const {
  return cameraid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_CameraConfig::cameraid() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.cameraID)
  return _internal_cameraid();
}
inline void VizMessage_CameraConfig::_internal_set_cameraid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cameraid_ = value;
}
inline void VizMessage_CameraConfig::set_cameraid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cameraid(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.cameraID)
}

// string parentName = 2;
inline void VizMessage_CameraConfig::clear_parentname() {
  parentname_.ClearToEmpty();
}
inline const std::string& VizMessage_CameraConfig::parentname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
  return _internal_parentname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_CameraConfig::set_parentname(ArgT0&& arg0, ArgT... args) {
 
 parentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
}
inline std::string* VizMessage_CameraConfig::mutable_parentname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
  return _internal_mutable_parentname();
}
inline const std::string& VizMessage_CameraConfig::_internal_parentname() const {
  return parentname_.Get();
}
inline void VizMessage_CameraConfig::_internal_set_parentname(const std::string& value) {
  
  parentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_CameraConfig::_internal_mutable_parentname() {
  
  return parentname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_CameraConfig::release_parentname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
  return parentname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_CameraConfig::set_allocated_parentname(std::string* parentname) {
  if (parentname != nullptr) {
    
  } else {
    
  }
  parentname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CameraConfig.parentName)
}

// double fieldOfView = 3;
inline void VizMessage_CameraConfig::clear_fieldofview() {
  fieldofview_ = 0;
}
inline double VizMessage_CameraConfig::_internal_fieldofview() const {
  return fieldofview_;
}
inline double VizMessage_CameraConfig::fieldofview() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.fieldOfView)
  return _internal_fieldofview();
}
inline void VizMessage_CameraConfig::_internal_set_fieldofview(double value) {
  
  fieldofview_ = value;
}
inline void VizMessage_CameraConfig::set_fieldofview(double value) {
  _internal_set_fieldofview(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.fieldOfView)
}

// repeated int64 resolution = 4;
inline int VizMessage_CameraConfig::_internal_resolution_size() const {
  return resolution_.size();
}
inline int VizMessage_CameraConfig::resolution_size() const {
  return _internal_resolution_size();
}
inline void VizMessage_CameraConfig::clear_resolution() {
  resolution_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_CameraConfig::_internal_resolution(int index) const {
  return resolution_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_CameraConfig::resolution(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
  return _internal_resolution(index);
}
inline void VizMessage_CameraConfig::set_resolution(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  resolution_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
}
inline void VizMessage_CameraConfig::_internal_add_resolution(::PROTOBUF_NAMESPACE_ID::int64 value) {
  resolution_.Add(value);
}
inline void VizMessage_CameraConfig::add_resolution(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_resolution(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
VizMessage_CameraConfig::_internal_resolution() const {
  return resolution_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
VizMessage_CameraConfig::resolution() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
  return _internal_resolution();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
VizMessage_CameraConfig::_internal_mutable_resolution() {
  return &resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
VizMessage_CameraConfig::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CameraConfig.resolution)
  return _internal_mutable_resolution();
}

// bool updateCameraParameters = 5;
inline void VizMessage_CameraConfig::clear_updatecameraparameters() {
  updatecameraparameters_ = false;
}
inline bool VizMessage_CameraConfig::_internal_updatecameraparameters() const {
  return updatecameraparameters_;
}
inline bool VizMessage_CameraConfig::updatecameraparameters() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.updateCameraParameters)
  return _internal_updatecameraparameters();
}
inline void VizMessage_CameraConfig::_internal_set_updatecameraparameters(bool value) {
  
  updatecameraparameters_ = value;
}
inline void VizMessage_CameraConfig::set_updatecameraparameters(bool value) {
  _internal_set_updatecameraparameters(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.updateCameraParameters)
}

// repeated double cameraPos_B = 7;
inline int VizMessage_CameraConfig::_internal_camerapos_b_size() const {
  return camerapos_b_.size();
}
inline int VizMessage_CameraConfig::camerapos_b_size() const {
  return _internal_camerapos_b_size();
}
inline void VizMessage_CameraConfig::clear_camerapos_b() {
  camerapos_b_.Clear();
}
inline double VizMessage_CameraConfig::_internal_camerapos_b(int index) const {
  return camerapos_b_.Get(index);
}
inline double VizMessage_CameraConfig::camerapos_b(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
  return _internal_camerapos_b(index);
}
inline void VizMessage_CameraConfig::set_camerapos_b(int index, double value) {
  camerapos_b_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
}
inline void VizMessage_CameraConfig::_internal_add_camerapos_b(double value) {
  camerapos_b_.Add(value);
}
inline void VizMessage_CameraConfig::add_camerapos_b(double value) {
  _internal_add_camerapos_b(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CameraConfig::_internal_camerapos_b() const {
  return camerapos_b_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CameraConfig::camerapos_b() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
  return _internal_camerapos_b();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CameraConfig::_internal_mutable_camerapos_b() {
  return &camerapos_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CameraConfig::mutable_camerapos_b() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CameraConfig.cameraPos_B)
  return _internal_mutable_camerapos_b();
}

// repeated double cameraDir_B = 8;
inline int VizMessage_CameraConfig::_internal_cameradir_b_size() const {
  return cameradir_b_.size();
}
inline int VizMessage_CameraConfig::cameradir_b_size() const {
  return _internal_cameradir_b_size();
}
inline void VizMessage_CameraConfig::clear_cameradir_b() {
  cameradir_b_.Clear();
}
inline double VizMessage_CameraConfig::_internal_cameradir_b(int index) const {
  return cameradir_b_.Get(index);
}
inline double VizMessage_CameraConfig::cameradir_b(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
  return _internal_cameradir_b(index);
}
inline void VizMessage_CameraConfig::set_cameradir_b(int index, double value) {
  cameradir_b_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
}
inline void VizMessage_CameraConfig::_internal_add_cameradir_b(double value) {
  cameradir_b_.Add(value);
}
inline void VizMessage_CameraConfig::add_cameradir_b(double value) {
  _internal_add_cameradir_b(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CameraConfig::_internal_cameradir_b() const {
  return cameradir_b_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CameraConfig::cameradir_b() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
  return _internal_cameradir_b();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CameraConfig::_internal_mutable_cameradir_b() {
  return &cameradir_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CameraConfig::mutable_cameradir_b() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CameraConfig.cameraDir_B)
  return _internal_mutable_cameradir_b();
}

// uint64 renderRate = 9;
inline void VizMessage_CameraConfig::clear_renderrate() {
  renderrate_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VizMessage_CameraConfig::_internal_renderrate() const {
  return renderrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VizMessage_CameraConfig::renderrate() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.renderRate)
  return _internal_renderrate();
}
inline void VizMessage_CameraConfig::_internal_set_renderrate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  renderrate_ = value;
}
inline void VizMessage_CameraConfig::set_renderrate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_renderrate(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.renderRate)
}

// string skybox = 10;
inline void VizMessage_CameraConfig::clear_skybox() {
  skybox_.ClearToEmpty();
}
inline const std::string& VizMessage_CameraConfig::skybox() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.skybox)
  return _internal_skybox();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_CameraConfig::set_skybox(ArgT0&& arg0, ArgT... args) {
 
 skybox_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.skybox)
}
inline std::string* VizMessage_CameraConfig::mutable_skybox() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CameraConfig.skybox)
  return _internal_mutable_skybox();
}
inline const std::string& VizMessage_CameraConfig::_internal_skybox() const {
  return skybox_.Get();
}
inline void VizMessage_CameraConfig::_internal_set_skybox(const std::string& value) {
  
  skybox_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_CameraConfig::_internal_mutable_skybox() {
  
  return skybox_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_CameraConfig::release_skybox() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CameraConfig.skybox)
  return skybox_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_CameraConfig::set_allocated_skybox(std::string* skybox) {
  if (skybox != nullptr) {
    
  } else {
    
  }
  skybox_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skybox,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CameraConfig.skybox)
}

// int64 postProcessingOn = 11;
inline void VizMessage_CameraConfig::clear_postprocessingon() {
  postprocessingon_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_CameraConfig::_internal_postprocessingon() const {
  return postprocessingon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_CameraConfig::postprocessingon() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.postProcessingOn)
  return _internal_postprocessingon();
}
inline void VizMessage_CameraConfig::_internal_set_postprocessingon(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  postprocessingon_ = value;
}
inline void VizMessage_CameraConfig::set_postprocessingon(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_postprocessingon(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.postProcessingOn)
}

// double ppFocusDistance = 12;
inline void VizMessage_CameraConfig::clear_ppfocusdistance() {
  ppfocusdistance_ = 0;
}
inline double VizMessage_CameraConfig::_internal_ppfocusdistance() const {
  return ppfocusdistance_;
}
inline double VizMessage_CameraConfig::ppfocusdistance() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.ppFocusDistance)
  return _internal_ppfocusdistance();
}
inline void VizMessage_CameraConfig::_internal_set_ppfocusdistance(double value) {
  
  ppfocusdistance_ = value;
}
inline void VizMessage_CameraConfig::set_ppfocusdistance(double value) {
  _internal_set_ppfocusdistance(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.ppFocusDistance)
}

// double ppAperture = 13;
inline void VizMessage_CameraConfig::clear_ppaperture() {
  ppaperture_ = 0;
}
inline double VizMessage_CameraConfig::_internal_ppaperture() const {
  return ppaperture_;
}
inline double VizMessage_CameraConfig::ppaperture() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.ppAperture)
  return _internal_ppaperture();
}
inline void VizMessage_CameraConfig::_internal_set_ppaperture(double value) {
  
  ppaperture_ = value;
}
inline void VizMessage_CameraConfig::set_ppaperture(double value) {
  _internal_set_ppaperture(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.ppAperture)
}

// double ppFocalLength = 14;
inline void VizMessage_CameraConfig::clear_ppfocallength() {
  ppfocallength_ = 0;
}
inline double VizMessage_CameraConfig::_internal_ppfocallength() const {
  return ppfocallength_;
}
inline double VizMessage_CameraConfig::ppfocallength() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.ppFocalLength)
  return _internal_ppfocallength();
}
inline void VizMessage_CameraConfig::_internal_set_ppfocallength(double value) {
  
  ppfocallength_ = value;
}
inline void VizMessage_CameraConfig::set_ppfocallength(double value) {
  _internal_set_ppfocallength(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.ppFocalLength)
}

// int64 ppMaxBlurSize = 15;
inline void VizMessage_CameraConfig::clear_ppmaxblursize() {
  ppmaxblursize_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_CameraConfig::_internal_ppmaxblursize() const {
  return ppmaxblursize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VizMessage_CameraConfig::ppmaxblursize() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CameraConfig.ppMaxBlurSize)
  return _internal_ppmaxblursize();
}
inline void VizMessage_CameraConfig::_internal_set_ppmaxblursize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ppmaxblursize_ = value;
}
inline void VizMessage_CameraConfig::set_ppmaxblursize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ppmaxblursize(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CameraConfig.ppMaxBlurSize)
}

// -------------------------------------------------------------------

// VizMessage_PointLine

// string fromBodyName = 1;
inline void VizMessage_PointLine::clear_frombodyname() {
  frombodyname_.ClearToEmpty();
}
inline const std::string& VizMessage_PointLine::frombodyname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.PointLine.fromBodyName)
  return _internal_frombodyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_PointLine::set_frombodyname(ArgT0&& arg0, ArgT... args) {
 
 frombodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.PointLine.fromBodyName)
}
inline std::string* VizMessage_PointLine::mutable_frombodyname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.PointLine.fromBodyName)
  return _internal_mutable_frombodyname();
}
inline const std::string& VizMessage_PointLine::_internal_frombodyname() const {
  return frombodyname_.Get();
}
inline void VizMessage_PointLine::_internal_set_frombodyname(const std::string& value) {
  
  frombodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_PointLine::_internal_mutable_frombodyname() {
  
  return frombodyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_PointLine::release_frombodyname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.PointLine.fromBodyName)
  return frombodyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_PointLine::set_allocated_frombodyname(std::string* frombodyname) {
  if (frombodyname != nullptr) {
    
  } else {
    
  }
  frombodyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frombodyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.PointLine.fromBodyName)
}

// string toBodyName = 2;
inline void VizMessage_PointLine::clear_tobodyname() {
  tobodyname_.ClearToEmpty();
}
inline const std::string& VizMessage_PointLine::tobodyname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.PointLine.toBodyName)
  return _internal_tobodyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_PointLine::set_tobodyname(ArgT0&& arg0, ArgT... args) {
 
 tobodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.PointLine.toBodyName)
}
inline std::string* VizMessage_PointLine::mutable_tobodyname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.PointLine.toBodyName)
  return _internal_mutable_tobodyname();
}
inline const std::string& VizMessage_PointLine::_internal_tobodyname() const {
  return tobodyname_.Get();
}
inline void VizMessage_PointLine::_internal_set_tobodyname(const std::string& value) {
  
  tobodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_PointLine::_internal_mutable_tobodyname() {
  
  return tobodyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_PointLine::release_tobodyname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.PointLine.toBodyName)
  return tobodyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_PointLine::set_allocated_tobodyname(std::string* tobodyname) {
  if (tobodyname != nullptr) {
    
  } else {
    
  }
  tobodyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tobodyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.PointLine.toBodyName)
}

// repeated int32 lineColor = 3;
inline int VizMessage_PointLine::_internal_linecolor_size() const {
  return linecolor_.size();
}
inline int VizMessage_PointLine::linecolor_size() const {
  return _internal_linecolor_size();
}
inline void VizMessage_PointLine::clear_linecolor() {
  linecolor_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_PointLine::_internal_linecolor(int index) const {
  return linecolor_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_PointLine::linecolor(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.PointLine.lineColor)
  return _internal_linecolor(index);
}
inline void VizMessage_PointLine::set_linecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  linecolor_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.PointLine.lineColor)
}
inline void VizMessage_PointLine::_internal_add_linecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  linecolor_.Add(value);
}
inline void VizMessage_PointLine::add_linecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_linecolor(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.PointLine.lineColor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_PointLine::_internal_linecolor() const {
  return linecolor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_PointLine::linecolor() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.PointLine.lineColor)
  return _internal_linecolor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_PointLine::_internal_mutable_linecolor() {
  return &linecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_PointLine::mutable_linecolor() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.PointLine.lineColor)
  return _internal_mutable_linecolor();
}

// -------------------------------------------------------------------

// VizMessage_KeepOutInCone

// bool isKeepIn = 1;
inline void VizMessage_KeepOutInCone::clear_iskeepin() {
  iskeepin_ = false;
}
inline bool VizMessage_KeepOutInCone::_internal_iskeepin() const {
  return iskeepin_;
}
inline bool VizMessage_KeepOutInCone::iskeepin() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.KeepOutInCone.isKeepIn)
  return _internal_iskeepin();
}
inline void VizMessage_KeepOutInCone::_internal_set_iskeepin(bool value) {
  
  iskeepin_ = value;
}
inline void VizMessage_KeepOutInCone::set_iskeepin(bool value) {
  _internal_set_iskeepin(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.KeepOutInCone.isKeepIn)
}

// repeated double position = 2;
inline int VizMessage_KeepOutInCone::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_KeepOutInCone::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_KeepOutInCone::clear_position() {
  position_.Clear();
}
inline double VizMessage_KeepOutInCone::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_KeepOutInCone::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.KeepOutInCone.position)
  return _internal_position(index);
}
inline void VizMessage_KeepOutInCone::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.KeepOutInCone.position)
}
inline void VizMessage_KeepOutInCone::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_KeepOutInCone::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.KeepOutInCone.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_KeepOutInCone::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_KeepOutInCone::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.KeepOutInCone.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_KeepOutInCone::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_KeepOutInCone::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.KeepOutInCone.position)
  return _internal_mutable_position();
}

// repeated double normalVector = 3;
inline int VizMessage_KeepOutInCone::_internal_normalvector_size() const {
  return normalvector_.size();
}
inline int VizMessage_KeepOutInCone::normalvector_size() const {
  return _internal_normalvector_size();
}
inline void VizMessage_KeepOutInCone::clear_normalvector() {
  normalvector_.Clear();
}
inline double VizMessage_KeepOutInCone::_internal_normalvector(int index) const {
  return normalvector_.Get(index);
}
inline double VizMessage_KeepOutInCone::normalvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.KeepOutInCone.normalVector)
  return _internal_normalvector(index);
}
inline void VizMessage_KeepOutInCone::set_normalvector(int index, double value) {
  normalvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.KeepOutInCone.normalVector)
}
inline void VizMessage_KeepOutInCone::_internal_add_normalvector(double value) {
  normalvector_.Add(value);
}
inline void VizMessage_KeepOutInCone::add_normalvector(double value) {
  _internal_add_normalvector(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.KeepOutInCone.normalVector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_KeepOutInCone::_internal_normalvector() const {
  return normalvector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_KeepOutInCone::normalvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.KeepOutInCone.normalVector)
  return _internal_normalvector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_KeepOutInCone::_internal_mutable_normalvector() {
  return &normalvector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_KeepOutInCone::mutable_normalvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.KeepOutInCone.normalVector)
  return _internal_mutable_normalvector();
}

// double incidenceAngle = 4;
inline void VizMessage_KeepOutInCone::clear_incidenceangle() {
  incidenceangle_ = 0;
}
inline double VizMessage_KeepOutInCone::_internal_incidenceangle() const {
  return incidenceangle_;
}
inline double VizMessage_KeepOutInCone::incidenceangle() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.KeepOutInCone.incidenceAngle)
  return _internal_incidenceangle();
}
inline void VizMessage_KeepOutInCone::_internal_set_incidenceangle(double value) {
  
  incidenceangle_ = value;
}
inline void VizMessage_KeepOutInCone::set_incidenceangle(double value) {
  _internal_set_incidenceangle(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.KeepOutInCone.incidenceAngle)
}

// double coneHeight = 5;
inline void VizMessage_KeepOutInCone::clear_coneheight() {
  coneheight_ = 0;
}
inline double VizMessage_KeepOutInCone::_internal_coneheight() const {
  return coneheight_;
}
inline double VizMessage_KeepOutInCone::coneheight() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.KeepOutInCone.coneHeight)
  return _internal_coneheight();
}
inline void VizMessage_KeepOutInCone::_internal_set_coneheight(double value) {
  
  coneheight_ = value;
}
inline void VizMessage_KeepOutInCone::set_coneheight(double value) {
  _internal_set_coneheight(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.KeepOutInCone.coneHeight)
}

// string fromBodyName = 6;
inline void VizMessage_KeepOutInCone::clear_frombodyname() {
  frombodyname_.ClearToEmpty();
}
inline const std::string& VizMessage_KeepOutInCone::frombodyname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName)
  return _internal_frombodyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_KeepOutInCone::set_frombodyname(ArgT0&& arg0, ArgT... args) {
 
 frombodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName)
}
inline std::string* VizMessage_KeepOutInCone::mutable_frombodyname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName)
  return _internal_mutable_frombodyname();
}
inline const std::string& VizMessage_KeepOutInCone::_internal_frombodyname() const {
  return frombodyname_.Get();
}
inline void VizMessage_KeepOutInCone::_internal_set_frombodyname(const std::string& value) {
  
  frombodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_KeepOutInCone::_internal_mutable_frombodyname() {
  
  return frombodyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_KeepOutInCone::release_frombodyname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName)
  return frombodyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_KeepOutInCone::set_allocated_frombodyname(std::string* frombodyname) {
  if (frombodyname != nullptr) {
    
  } else {
    
  }
  frombodyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frombodyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName)
}

// string toBodyName = 7;
inline void VizMessage_KeepOutInCone::clear_tobodyname() {
  tobodyname_.ClearToEmpty();
}
inline const std::string& VizMessage_KeepOutInCone::tobodyname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName)
  return _internal_tobodyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_KeepOutInCone::set_tobodyname(ArgT0&& arg0, ArgT... args) {
 
 tobodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName)
}
inline std::string* VizMessage_KeepOutInCone::mutable_tobodyname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName)
  return _internal_mutable_tobodyname();
}
inline const std::string& VizMessage_KeepOutInCone::_internal_tobodyname() const {
  return tobodyname_.Get();
}
inline void VizMessage_KeepOutInCone::_internal_set_tobodyname(const std::string& value) {
  
  tobodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_KeepOutInCone::_internal_mutable_tobodyname() {
  
  return tobodyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_KeepOutInCone::release_tobodyname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName)
  return tobodyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_KeepOutInCone::set_allocated_tobodyname(std::string* tobodyname) {
  if (tobodyname != nullptr) {
    
  } else {
    
  }
  tobodyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tobodyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName)
}

// repeated int32 coneColor = 8;
inline int VizMessage_KeepOutInCone::_internal_conecolor_size() const {
  return conecolor_.size();
}
inline int VizMessage_KeepOutInCone::conecolor_size() const {
  return _internal_conecolor_size();
}
inline void VizMessage_KeepOutInCone::clear_conecolor() {
  conecolor_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_KeepOutInCone::_internal_conecolor(int index) const {
  return conecolor_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_KeepOutInCone::conecolor(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.KeepOutInCone.coneColor)
  return _internal_conecolor(index);
}
inline void VizMessage_KeepOutInCone::set_conecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  conecolor_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.KeepOutInCone.coneColor)
}
inline void VizMessage_KeepOutInCone::_internal_add_conecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  conecolor_.Add(value);
}
inline void VizMessage_KeepOutInCone::add_conecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_conecolor(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.KeepOutInCone.coneColor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_KeepOutInCone::_internal_conecolor() const {
  return conecolor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_KeepOutInCone::conecolor() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.KeepOutInCone.coneColor)
  return _internal_conecolor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_KeepOutInCone::_internal_mutable_conecolor() {
  return &conecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_KeepOutInCone::mutable_conecolor() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.KeepOutInCone.coneColor)
  return _internal_mutable_conecolor();
}

// string coneName = 9;
inline void VizMessage_KeepOutInCone::clear_conename() {
  conename_.ClearToEmpty();
}
inline const std::string& VizMessage_KeepOutInCone::conename() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.KeepOutInCone.coneName)
  return _internal_conename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_KeepOutInCone::set_conename(ArgT0&& arg0, ArgT... args) {
 
 conename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.KeepOutInCone.coneName)
}
inline std::string* VizMessage_KeepOutInCone::mutable_conename() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.KeepOutInCone.coneName)
  return _internal_mutable_conename();
}
inline const std::string& VizMessage_KeepOutInCone::_internal_conename() const {
  return conename_.Get();
}
inline void VizMessage_KeepOutInCone::_internal_set_conename(const std::string& value) {
  
  conename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_KeepOutInCone::_internal_mutable_conename() {
  
  return conename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_KeepOutInCone::release_conename() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.KeepOutInCone.coneName)
  return conename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_KeepOutInCone::set_allocated_conename(std::string* conename) {
  if (conename != nullptr) {
    
  } else {
    
  }
  conename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.KeepOutInCone.coneName)
}

// -------------------------------------------------------------------

// VizMessage_StandardCameraSettings

// string spacecraftName = 1;
inline void VizMessage_StandardCameraSettings::clear_spacecraftname() {
  spacecraftname_.ClearToEmpty();
}
inline const std::string& VizMessage_StandardCameraSettings::spacecraftname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StandardCameraSettings.spacecraftName)
  return _internal_spacecraftname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_StandardCameraSettings::set_spacecraftname(ArgT0&& arg0, ArgT... args) {
 
 spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StandardCameraSettings.spacecraftName)
}
inline std::string* VizMessage_StandardCameraSettings::mutable_spacecraftname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.StandardCameraSettings.spacecraftName)
  return _internal_mutable_spacecraftname();
}
inline const std::string& VizMessage_StandardCameraSettings::_internal_spacecraftname() const {
  return spacecraftname_.Get();
}
inline void VizMessage_StandardCameraSettings::_internal_set_spacecraftname(const std::string& value) {
  
  spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_StandardCameraSettings::_internal_mutable_spacecraftname() {
  
  return spacecraftname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_StandardCameraSettings::release_spacecraftname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.StandardCameraSettings.spacecraftName)
  return spacecraftname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_StandardCameraSettings::set_allocated_spacecraftname(std::string* spacecraftname) {
  if (spacecraftname != nullptr) {
    
  } else {
    
  }
  spacecraftname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecraftname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.StandardCameraSettings.spacecraftName)
}

// int32 setMode = 3;
inline void VizMessage_StandardCameraSettings::clear_setmode() {
  setmode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_StandardCameraSettings::_internal_setmode() const {
  return setmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_StandardCameraSettings::setmode() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StandardCameraSettings.setMode)
  return _internal_setmode();
}
inline void VizMessage_StandardCameraSettings::_internal_set_setmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  setmode_ = value;
}
inline void VizMessage_StandardCameraSettings::set_setmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StandardCameraSettings.setMode)
}

// double fieldOfView = 5;
inline void VizMessage_StandardCameraSettings::clear_fieldofview() {
  fieldofview_ = 0;
}
inline double VizMessage_StandardCameraSettings::_internal_fieldofview() const {
  return fieldofview_;
}
inline double VizMessage_StandardCameraSettings::fieldofview() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StandardCameraSettings.fieldOfView)
  return _internal_fieldofview();
}
inline void VizMessage_StandardCameraSettings::_internal_set_fieldofview(double value) {
  
  fieldofview_ = value;
}
inline void VizMessage_StandardCameraSettings::set_fieldofview(double value) {
  _internal_set_fieldofview(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StandardCameraSettings.fieldOfView)
}

// string bodyTarget = 6;
inline void VizMessage_StandardCameraSettings::clear_bodytarget() {
  bodytarget_.ClearToEmpty();
}
inline const std::string& VizMessage_StandardCameraSettings::bodytarget() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StandardCameraSettings.bodyTarget)
  return _internal_bodytarget();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_StandardCameraSettings::set_bodytarget(ArgT0&& arg0, ArgT... args) {
 
 bodytarget_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StandardCameraSettings.bodyTarget)
}
inline std::string* VizMessage_StandardCameraSettings::mutable_bodytarget() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.StandardCameraSettings.bodyTarget)
  return _internal_mutable_bodytarget();
}
inline const std::string& VizMessage_StandardCameraSettings::_internal_bodytarget() const {
  return bodytarget_.Get();
}
inline void VizMessage_StandardCameraSettings::_internal_set_bodytarget(const std::string& value) {
  
  bodytarget_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_StandardCameraSettings::_internal_mutable_bodytarget() {
  
  return bodytarget_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_StandardCameraSettings::release_bodytarget() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.StandardCameraSettings.bodyTarget)
  return bodytarget_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_StandardCameraSettings::set_allocated_bodytarget(std::string* bodytarget) {
  if (bodytarget != nullptr) {
    
  } else {
    
  }
  bodytarget_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bodytarget,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.StandardCameraSettings.bodyTarget)
}

// int32 setView = 7;
inline void VizMessage_StandardCameraSettings::clear_setview() {
  setview_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_StandardCameraSettings::_internal_setview() const {
  return setview_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_StandardCameraSettings::setview() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StandardCameraSettings.setView)
  return _internal_setview();
}
inline void VizMessage_StandardCameraSettings::_internal_set_setview(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  setview_ = value;
}
inline void VizMessage_StandardCameraSettings::set_setview(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_setview(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StandardCameraSettings.setView)
}

// repeated double pointingVector = 8;
inline int VizMessage_StandardCameraSettings::_internal_pointingvector_size() const {
  return pointingvector_.size();
}
inline int VizMessage_StandardCameraSettings::pointingvector_size() const {
  return _internal_pointingvector_size();
}
inline void VizMessage_StandardCameraSettings::clear_pointingvector() {
  pointingvector_.Clear();
}
inline double VizMessage_StandardCameraSettings::_internal_pointingvector(int index) const {
  return pointingvector_.Get(index);
}
inline double VizMessage_StandardCameraSettings::pointingvector(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StandardCameraSettings.pointingVector)
  return _internal_pointingvector(index);
}
inline void VizMessage_StandardCameraSettings::set_pointingvector(int index, double value) {
  pointingvector_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StandardCameraSettings.pointingVector)
}
inline void VizMessage_StandardCameraSettings::_internal_add_pointingvector(double value) {
  pointingvector_.Add(value);
}
inline void VizMessage_StandardCameraSettings::add_pointingvector(double value) {
  _internal_add_pointingvector(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.StandardCameraSettings.pointingVector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_StandardCameraSettings::_internal_pointingvector() const {
  return pointingvector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_StandardCameraSettings::pointingvector() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.StandardCameraSettings.pointingVector)
  return _internal_pointingvector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_StandardCameraSettings::_internal_mutable_pointingvector() {
  return &pointingvector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_StandardCameraSettings::mutable_pointingvector() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.StandardCameraSettings.pointingVector)
  return _internal_mutable_pointingvector();
}

// repeated double position = 9;
inline int VizMessage_StandardCameraSettings::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_StandardCameraSettings::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_StandardCameraSettings::clear_position() {
  position_.Clear();
}
inline double VizMessage_StandardCameraSettings::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_StandardCameraSettings::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StandardCameraSettings.position)
  return _internal_position(index);
}
inline void VizMessage_StandardCameraSettings::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StandardCameraSettings.position)
}
inline void VizMessage_StandardCameraSettings::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_StandardCameraSettings::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.StandardCameraSettings.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_StandardCameraSettings::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_StandardCameraSettings::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.StandardCameraSettings.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_StandardCameraSettings::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_StandardCameraSettings::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.StandardCameraSettings.position)
  return _internal_mutable_position();
}

// string displayName = 10;
inline void VizMessage_StandardCameraSettings::clear_displayname() {
  displayname_.ClearToEmpty();
}
inline const std::string& VizMessage_StandardCameraSettings::displayname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.StandardCameraSettings.displayName)
  return _internal_displayname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_StandardCameraSettings::set_displayname(ArgT0&& arg0, ArgT... args) {
 
 displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.StandardCameraSettings.displayName)
}
inline std::string* VizMessage_StandardCameraSettings::mutable_displayname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.StandardCameraSettings.displayName)
  return _internal_mutable_displayname();
}
inline const std::string& VizMessage_StandardCameraSettings::_internal_displayname() const {
  return displayname_.Get();
}
inline void VizMessage_StandardCameraSettings::_internal_set_displayname(const std::string& value) {
  
  displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_StandardCameraSettings::_internal_mutable_displayname() {
  
  return displayname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_StandardCameraSettings::release_displayname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.StandardCameraSettings.displayName)
  return displayname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_StandardCameraSettings::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    
  } else {
    
  }
  displayname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.StandardCameraSettings.displayName)
}

// -------------------------------------------------------------------

// VizMessage_ActuatorSettings

// string spacecraftName = 1;
inline void VizMessage_ActuatorSettings::clear_spacecraftname() {
  spacecraftname_.ClearToEmpty();
}
inline const std::string& VizMessage_ActuatorSettings::spacecraftname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName)
  return _internal_spacecraftname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_ActuatorSettings::set_spacecraftname(ArgT0&& arg0, ArgT... args) {
 
 spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName)
}
inline std::string* VizMessage_ActuatorSettings::mutable_spacecraftname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName)
  return _internal_mutable_spacecraftname();
}
inline const std::string& VizMessage_ActuatorSettings::_internal_spacecraftname() const {
  return spacecraftname_.Get();
}
inline void VizMessage_ActuatorSettings::_internal_set_spacecraftname(const std::string& value) {
  
  spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_ActuatorSettings::_internal_mutable_spacecraftname() {
  
  return spacecraftname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_ActuatorSettings::release_spacecraftname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName)
  return spacecraftname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_ActuatorSettings::set_allocated_spacecraftname(std::string* spacecraftname) {
  if (spacecraftname != nullptr) {
    
  } else {
    
  }
  spacecraftname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecraftname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName)
}

// int32 viewThrusterPanel = 2;
inline void VizMessage_ActuatorSettings::clear_viewthrusterpanel() {
  viewthrusterpanel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::_internal_viewthrusterpanel() const {
  return viewthrusterpanel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::viewthrusterpanel() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ActuatorSettings.viewThrusterPanel)
  return _internal_viewthrusterpanel();
}
inline void VizMessage_ActuatorSettings::_internal_set_viewthrusterpanel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viewthrusterpanel_ = value;
}
inline void VizMessage_ActuatorSettings::set_viewthrusterpanel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viewthrusterpanel(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ActuatorSettings.viewThrusterPanel)
}

// int32 viewThrusterHUD = 3;
inline void VizMessage_ActuatorSettings::clear_viewthrusterhud() {
  viewthrusterhud_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::_internal_viewthrusterhud() const {
  return viewthrusterhud_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::viewthrusterhud() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ActuatorSettings.viewThrusterHUD)
  return _internal_viewthrusterhud();
}
inline void VizMessage_ActuatorSettings::_internal_set_viewthrusterhud(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viewthrusterhud_ = value;
}
inline void VizMessage_ActuatorSettings::set_viewthrusterhud(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viewthrusterhud(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ActuatorSettings.viewThrusterHUD)
}

// int32 viewRWPanel = 4;
inline void VizMessage_ActuatorSettings::clear_viewrwpanel() {
  viewrwpanel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::_internal_viewrwpanel() const {
  return viewrwpanel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::viewrwpanel() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ActuatorSettings.viewRWPanel)
  return _internal_viewrwpanel();
}
inline void VizMessage_ActuatorSettings::_internal_set_viewrwpanel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viewrwpanel_ = value;
}
inline void VizMessage_ActuatorSettings::set_viewrwpanel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viewrwpanel(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ActuatorSettings.viewRWPanel)
}

// int32 viewRWHUD = 5;
inline void VizMessage_ActuatorSettings::clear_viewrwhud() {
  viewrwhud_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::_internal_viewrwhud() const {
  return viewrwhud_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::viewrwhud() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ActuatorSettings.viewRWHUD)
  return _internal_viewrwhud();
}
inline void VizMessage_ActuatorSettings::_internal_set_viewrwhud(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viewrwhud_ = value;
}
inline void VizMessage_ActuatorSettings::set_viewrwhud(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viewrwhud(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ActuatorSettings.viewRWHUD)
}

// int32 showThrusterLabels = 6;
inline void VizMessage_ActuatorSettings::clear_showthrusterlabels() {
  showthrusterlabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::_internal_showthrusterlabels() const {
  return showthrusterlabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::showthrusterlabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ActuatorSettings.showThrusterLabels)
  return _internal_showthrusterlabels();
}
inline void VizMessage_ActuatorSettings::_internal_set_showthrusterlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showthrusterlabels_ = value;
}
inline void VizMessage_ActuatorSettings::set_showthrusterlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showthrusterlabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ActuatorSettings.showThrusterLabels)
}

// int32 showRWLabels = 7;
inline void VizMessage_ActuatorSettings::clear_showrwlabels() {
  showrwlabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::_internal_showrwlabels() const {
  return showrwlabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_ActuatorSettings::showrwlabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.ActuatorSettings.showRWLabels)
  return _internal_showrwlabels();
}
inline void VizMessage_ActuatorSettings::_internal_set_showrwlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showrwlabels_ = value;
}
inline void VizMessage_ActuatorSettings::set_showrwlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showrwlabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.ActuatorSettings.showRWLabels)
}

// -------------------------------------------------------------------

// VizMessage_InstrumentSettings

// string spacecraftName = 1;
inline void VizMessage_InstrumentSettings::clear_spacecraftname() {
  spacecraftname_.ClearToEmpty();
}
inline const std::string& VizMessage_InstrumentSettings::spacecraftname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.spacecraftName)
  return _internal_spacecraftname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_InstrumentSettings::set_spacecraftname(ArgT0&& arg0, ArgT... args) {
 
 spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.spacecraftName)
}
inline std::string* VizMessage_InstrumentSettings::mutable_spacecraftname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.InstrumentSettings.spacecraftName)
  return _internal_mutable_spacecraftname();
}
inline const std::string& VizMessage_InstrumentSettings::_internal_spacecraftname() const {
  return spacecraftname_.Get();
}
inline void VizMessage_InstrumentSettings::_internal_set_spacecraftname(const std::string& value) {
  
  spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_InstrumentSettings::_internal_mutable_spacecraftname() {
  
  return spacecraftname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_InstrumentSettings::release_spacecraftname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.InstrumentSettings.spacecraftName)
  return spacecraftname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_InstrumentSettings::set_allocated_spacecraftname(std::string* spacecraftname) {
  if (spacecraftname != nullptr) {
    
  } else {
    
  }
  spacecraftname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecraftname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.InstrumentSettings.spacecraftName)
}

// int32 viewCSSPanel = 2;
inline void VizMessage_InstrumentSettings::clear_viewcsspanel() {
  viewcsspanel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::_internal_viewcsspanel() const {
  return viewcsspanel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::viewcsspanel() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.viewCSSPanel)
  return _internal_viewcsspanel();
}
inline void VizMessage_InstrumentSettings::_internal_set_viewcsspanel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viewcsspanel_ = value;
}
inline void VizMessage_InstrumentSettings::set_viewcsspanel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viewcsspanel(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.viewCSSPanel)
}

// int32 viewCSSCoverage = 3;
inline void VizMessage_InstrumentSettings::clear_viewcsscoverage() {
  viewcsscoverage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::_internal_viewcsscoverage() const {
  return viewcsscoverage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::viewcsscoverage() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.viewCSSCoverage)
  return _internal_viewcsscoverage();
}
inline void VizMessage_InstrumentSettings::_internal_set_viewcsscoverage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viewcsscoverage_ = value;
}
inline void VizMessage_InstrumentSettings::set_viewcsscoverage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viewcsscoverage(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.viewCSSCoverage)
}

// int32 showCSSLabels = 4;
inline void VizMessage_InstrumentSettings::clear_showcsslabels() {
  showcsslabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::_internal_showcsslabels() const {
  return showcsslabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::showcsslabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.showCSSLabels)
  return _internal_showcsslabels();
}
inline void VizMessage_InstrumentSettings::_internal_set_showcsslabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showcsslabels_ = value;
}
inline void VizMessage_InstrumentSettings::set_showcsslabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showcsslabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.showCSSLabels)
}

// int32 viewCSSBoresight = 5;
inline void VizMessage_InstrumentSettings::clear_viewcssboresight() {
  viewcssboresight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::_internal_viewcssboresight() const {
  return viewcssboresight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::viewcssboresight() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.viewCSSBoresight)
  return _internal_viewcssboresight();
}
inline void VizMessage_InstrumentSettings::_internal_set_viewcssboresight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viewcssboresight_ = value;
}
inline void VizMessage_InstrumentSettings::set_viewcssboresight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viewcssboresight(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.viewCSSBoresight)
}

// int32 showGenericSensorLabels = 6;
inline void VizMessage_InstrumentSettings::clear_showgenericsensorlabels() {
  showgenericsensorlabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::_internal_showgenericsensorlabels() const {
  return showgenericsensorlabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::showgenericsensorlabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.showGenericSensorLabels)
  return _internal_showgenericsensorlabels();
}
inline void VizMessage_InstrumentSettings::_internal_set_showgenericsensorlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showgenericsensorlabels_ = value;
}
inline void VizMessage_InstrumentSettings::set_showgenericsensorlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showgenericsensorlabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.showGenericSensorLabels)
}

// int32 showTransceiverLabels = 7;
inline void VizMessage_InstrumentSettings::clear_showtransceiverlabels() {
  showtransceiverlabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::_internal_showtransceiverlabels() const {
  return showtransceiverlabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::showtransceiverlabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.showTransceiverLabels)
  return _internal_showtransceiverlabels();
}
inline void VizMessage_InstrumentSettings::_internal_set_showtransceiverlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showtransceiverlabels_ = value;
}
inline void VizMessage_InstrumentSettings::set_showtransceiverlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showtransceiverlabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.showTransceiverLabels)
}

// int32 showTransceiverFrustrum = 8;
inline void VizMessage_InstrumentSettings::clear_showtransceiverfrustrum() {
  showtransceiverfrustrum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::_internal_showtransceiverfrustrum() const {
  return showtransceiverfrustrum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::showtransceiverfrustrum() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.showTransceiverFrustrum)
  return _internal_showtransceiverfrustrum();
}
inline void VizMessage_InstrumentSettings::_internal_set_showtransceiverfrustrum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showtransceiverfrustrum_ = value;
}
inline void VizMessage_InstrumentSettings::set_showtransceiverfrustrum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showtransceiverfrustrum(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.showTransceiverFrustrum)
}

// int32 showGenericStoragePanel = 9;
inline void VizMessage_InstrumentSettings::clear_showgenericstoragepanel() {
  showgenericstoragepanel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::_internal_showgenericstoragepanel() const {
  return showgenericstoragepanel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::showgenericstoragepanel() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.showGenericStoragePanel)
  return _internal_showgenericstoragepanel();
}
inline void VizMessage_InstrumentSettings::_internal_set_showgenericstoragepanel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showgenericstoragepanel_ = value;
}
inline void VizMessage_InstrumentSettings::set_showgenericstoragepanel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showgenericstoragepanel(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.showGenericStoragePanel)
}

// int32 showMultiSphereLabels = 10;
inline void VizMessage_InstrumentSettings::clear_showmultispherelabels() {
  showmultispherelabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::_internal_showmultispherelabels() const {
  return showmultispherelabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_InstrumentSettings::showmultispherelabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.InstrumentSettings.showMultiSphereLabels)
  return _internal_showmultispherelabels();
}
inline void VizMessage_InstrumentSettings::_internal_set_showmultispherelabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showmultispherelabels_ = value;
}
inline void VizMessage_InstrumentSettings::set_showmultispherelabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showmultispherelabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.InstrumentSettings.showMultiSphereLabels)
}

// -------------------------------------------------------------------

// VizMessage_CustomModel

// string modelPath = 1;
inline void VizMessage_CustomModel::clear_modelpath() {
  modelpath_.ClearToEmpty();
}
inline const std::string& VizMessage_CustomModel::modelpath() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CustomModel.modelPath)
  return _internal_modelpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_CustomModel::set_modelpath(ArgT0&& arg0, ArgT... args) {
 
 modelpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.modelPath)
}
inline std::string* VizMessage_CustomModel::mutable_modelpath() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CustomModel.modelPath)
  return _internal_mutable_modelpath();
}
inline const std::string& VizMessage_CustomModel::_internal_modelpath() const {
  return modelpath_.Get();
}
inline void VizMessage_CustomModel::_internal_set_modelpath(const std::string& value) {
  
  modelpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_CustomModel::_internal_mutable_modelpath() {
  
  return modelpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_CustomModel::release_modelpath() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CustomModel.modelPath)
  return modelpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_CustomModel::set_allocated_modelpath(std::string* modelpath) {
  if (modelpath != nullptr) {
    
  } else {
    
  }
  modelpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CustomModel.modelPath)
}

// repeated string simBodiesToModify = 2;
inline int VizMessage_CustomModel::_internal_simbodiestomodify_size() const {
  return simbodiestomodify_.size();
}
inline int VizMessage_CustomModel::simbodiestomodify_size() const {
  return _internal_simbodiestomodify_size();
}
inline void VizMessage_CustomModel::clear_simbodiestomodify() {
  simbodiestomodify_.Clear();
}
inline std::string* VizMessage_CustomModel::add_simbodiestomodify() {
  // @@protoc_insertion_point(field_add_mutable:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
  return _internal_add_simbodiestomodify();
}
inline const std::string& VizMessage_CustomModel::_internal_simbodiestomodify(int index) const {
  return simbodiestomodify_.Get(index);
}
inline const std::string& VizMessage_CustomModel::simbodiestomodify(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
  return _internal_simbodiestomodify(index);
}
inline std::string* VizMessage_CustomModel::mutable_simbodiestomodify(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
  return simbodiestomodify_.Mutable(index);
}
inline void VizMessage_CustomModel::set_simbodiestomodify(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
  simbodiestomodify_.Mutable(index)->assign(value);
}
inline void VizMessage_CustomModel::set_simbodiestomodify(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
  simbodiestomodify_.Mutable(index)->assign(std::move(value));
}
inline void VizMessage_CustomModel::set_simbodiestomodify(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  simbodiestomodify_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
}
inline void VizMessage_CustomModel::set_simbodiestomodify(int index, const char* value, size_t size) {
  simbodiestomodify_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
}
inline std::string* VizMessage_CustomModel::_internal_add_simbodiestomodify() {
  return simbodiestomodify_.Add();
}
inline void VizMessage_CustomModel::add_simbodiestomodify(const std::string& value) {
  simbodiestomodify_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
}
inline void VizMessage_CustomModel::add_simbodiestomodify(std::string&& value) {
  simbodiestomodify_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
}
inline void VizMessage_CustomModel::add_simbodiestomodify(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  simbodiestomodify_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
}
inline void VizMessage_CustomModel::add_simbodiestomodify(const char* value, size_t size) {
  simbodiestomodify_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VizMessage_CustomModel::simbodiestomodify() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
  return simbodiestomodify_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VizMessage_CustomModel::mutable_simbodiestomodify() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify)
  return &simbodiestomodify_;
}

// repeated double offset = 3;
inline int VizMessage_CustomModel::_internal_offset_size() const {
  return offset_.size();
}
inline int VizMessage_CustomModel::offset_size() const {
  return _internal_offset_size();
}
inline void VizMessage_CustomModel::clear_offset() {
  offset_.Clear();
}
inline double VizMessage_CustomModel::_internal_offset(int index) const {
  return offset_.Get(index);
}
inline double VizMessage_CustomModel::offset(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CustomModel.offset)
  return _internal_offset(index);
}
inline void VizMessage_CustomModel::set_offset(int index, double value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.offset)
}
inline void VizMessage_CustomModel::_internal_add_offset(double value) {
  offset_.Add(value);
}
inline void VizMessage_CustomModel::add_offset(double value) {
  _internal_add_offset(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CustomModel.offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CustomModel::_internal_offset() const {
  return offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CustomModel::offset() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CustomModel.offset)
  return _internal_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CustomModel::_internal_mutable_offset() {
  return &offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CustomModel::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CustomModel.offset)
  return _internal_mutable_offset();
}

// repeated double rotation = 4;
inline int VizMessage_CustomModel::_internal_rotation_size() const {
  return rotation_.size();
}
inline int VizMessage_CustomModel::rotation_size() const {
  return _internal_rotation_size();
}
inline void VizMessage_CustomModel::clear_rotation() {
  rotation_.Clear();
}
inline double VizMessage_CustomModel::_internal_rotation(int index) const {
  return rotation_.Get(index);
}
inline double VizMessage_CustomModel::rotation(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CustomModel.rotation)
  return _internal_rotation(index);
}
inline void VizMessage_CustomModel::set_rotation(int index, double value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.rotation)
}
inline void VizMessage_CustomModel::_internal_add_rotation(double value) {
  rotation_.Add(value);
}
inline void VizMessage_CustomModel::add_rotation(double value) {
  _internal_add_rotation(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CustomModel.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CustomModel::_internal_rotation() const {
  return rotation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CustomModel::rotation() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CustomModel.rotation)
  return _internal_rotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CustomModel::_internal_mutable_rotation() {
  return &rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CustomModel::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CustomModel.rotation)
  return _internal_mutable_rotation();
}

// repeated double scale = 5;
inline int VizMessage_CustomModel::_internal_scale_size() const {
  return scale_.size();
}
inline int VizMessage_CustomModel::scale_size() const {
  return _internal_scale_size();
}
inline void VizMessage_CustomModel::clear_scale() {
  scale_.Clear();
}
inline double VizMessage_CustomModel::_internal_scale(int index) const {
  return scale_.Get(index);
}
inline double VizMessage_CustomModel::scale(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CustomModel.scale)
  return _internal_scale(index);
}
inline void VizMessage_CustomModel::set_scale(int index, double value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.scale)
}
inline void VizMessage_CustomModel::_internal_add_scale(double value) {
  scale_.Add(value);
}
inline void VizMessage_CustomModel::add_scale(double value) {
  _internal_add_scale(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CustomModel.scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CustomModel::_internal_scale() const {
  return scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_CustomModel::scale() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CustomModel.scale)
  return _internal_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CustomModel::_internal_mutable_scale() {
  return &scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_CustomModel::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CustomModel.scale)
  return _internal_mutable_scale();
}

// string customTexturePath = 6;
inline void VizMessage_CustomModel::clear_customtexturepath() {
  customtexturepath_.ClearToEmpty();
}
inline const std::string& VizMessage_CustomModel::customtexturepath() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CustomModel.customTexturePath)
  return _internal_customtexturepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_CustomModel::set_customtexturepath(ArgT0&& arg0, ArgT... args) {
 
 customtexturepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.customTexturePath)
}
inline std::string* VizMessage_CustomModel::mutable_customtexturepath() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CustomModel.customTexturePath)
  return _internal_mutable_customtexturepath();
}
inline const std::string& VizMessage_CustomModel::_internal_customtexturepath() const {
  return customtexturepath_.Get();
}
inline void VizMessage_CustomModel::_internal_set_customtexturepath(const std::string& value) {
  
  customtexturepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_CustomModel::_internal_mutable_customtexturepath() {
  
  return customtexturepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_CustomModel::release_customtexturepath() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CustomModel.customTexturePath)
  return customtexturepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_CustomModel::set_allocated_customtexturepath(std::string* customtexturepath) {
  if (customtexturepath != nullptr) {
    
  } else {
    
  }
  customtexturepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customtexturepath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CustomModel.customTexturePath)
}

// string normalMapPath = 7;
inline void VizMessage_CustomModel::clear_normalmappath() {
  normalmappath_.ClearToEmpty();
}
inline const std::string& VizMessage_CustomModel::normalmappath() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CustomModel.normalMapPath)
  return _internal_normalmappath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_CustomModel::set_normalmappath(ArgT0&& arg0, ArgT... args) {
 
 normalmappath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.normalMapPath)
}
inline std::string* VizMessage_CustomModel::mutable_normalmappath() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.CustomModel.normalMapPath)
  return _internal_mutable_normalmappath();
}
inline const std::string& VizMessage_CustomModel::_internal_normalmappath() const {
  return normalmappath_.Get();
}
inline void VizMessage_CustomModel::_internal_set_normalmappath(const std::string& value) {
  
  normalmappath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_CustomModel::_internal_mutable_normalmappath() {
  
  return normalmappath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_CustomModel::release_normalmappath() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.CustomModel.normalMapPath)
  return normalmappath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_CustomModel::set_allocated_normalmappath(std::string* normalmappath) {
  if (normalmappath != nullptr) {
    
  } else {
    
  }
  normalmappath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), normalmappath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.CustomModel.normalMapPath)
}

// int32 shader = 8;
inline void VizMessage_CustomModel::clear_shader() {
  shader_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_CustomModel::_internal_shader() const {
  return shader_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_CustomModel::shader() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CustomModel.shader)
  return _internal_shader();
}
inline void VizMessage_CustomModel::_internal_set_shader(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shader_ = value;
}
inline void VizMessage_CustomModel::set_shader(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shader(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.shader)
}

// repeated int32 color = 9;
inline int VizMessage_CustomModel::_internal_color_size() const {
  return color_.size();
}
inline int VizMessage_CustomModel::color_size() const {
  return _internal_color_size();
}
inline void VizMessage_CustomModel::clear_color() {
  color_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_CustomModel::_internal_color(int index) const {
  return color_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_CustomModel::color(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.CustomModel.color)
  return _internal_color(index);
}
inline void VizMessage_CustomModel::set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.CustomModel.color)
}
inline void VizMessage_CustomModel::_internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Add(value);
}
inline void VizMessage_CustomModel::add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.CustomModel.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_CustomModel::_internal_color() const {
  return color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_CustomModel::color() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.CustomModel.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_CustomModel::_internal_mutable_color() {
  return &color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_CustomModel::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.CustomModel.color)
  return _internal_mutable_color();
}

// -------------------------------------------------------------------

// VizMessage_LiveVizSettingsPb

// repeated .vizProtobufferMessage.VizMessage.PointLine targetLines = 1;
inline int VizMessage_LiveVizSettingsPb::_internal_targetlines_size() const {
  return targetlines_.size();
}
inline int VizMessage_LiveVizSettingsPb::targetlines_size() const {
  return _internal_targetlines_size();
}
inline void VizMessage_LiveVizSettingsPb::clear_targetlines() {
  targetlines_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_PointLine* VizMessage_LiveVizSettingsPb::mutable_targetlines(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.targetLines)
  return targetlines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine >*
VizMessage_LiveVizSettingsPb::mutable_targetlines() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.targetLines)
  return &targetlines_;
}
inline const ::vizProtobufferMessage::VizMessage_PointLine& VizMessage_LiveVizSettingsPb::_internal_targetlines(int index) const {
  return targetlines_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_PointLine& VizMessage_LiveVizSettingsPb::targetlines(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.targetLines)
  return _internal_targetlines(index);
}
inline ::vizProtobufferMessage::VizMessage_PointLine* VizMessage_LiveVizSettingsPb::_internal_add_targetlines() {
  return targetlines_.Add();
}
inline ::vizProtobufferMessage::VizMessage_PointLine* VizMessage_LiveVizSettingsPb::add_targetlines() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.targetLines)
  return _internal_add_targetlines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine >&
VizMessage_LiveVizSettingsPb::targetlines() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.targetLines)
  return targetlines_;
}

// string relativeOrbitChief = 2;
inline void VizMessage_LiveVizSettingsPb::clear_relativeorbitchief() {
  relativeorbitchief_.ClearToEmpty();
}
inline const std::string& VizMessage_LiveVizSettingsPb::relativeorbitchief() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.relativeOrbitChief)
  return _internal_relativeorbitchief();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_LiveVizSettingsPb::set_relativeorbitchief(ArgT0&& arg0, ArgT... args) {
 
 relativeorbitchief_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.relativeOrbitChief)
}
inline std::string* VizMessage_LiveVizSettingsPb::mutable_relativeorbitchief() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.relativeOrbitChief)
  return _internal_mutable_relativeorbitchief();
}
inline const std::string& VizMessage_LiveVizSettingsPb::_internal_relativeorbitchief() const {
  return relativeorbitchief_.Get();
}
inline void VizMessage_LiveVizSettingsPb::_internal_set_relativeorbitchief(const std::string& value) {
  
  relativeorbitchief_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_LiveVizSettingsPb::_internal_mutable_relativeorbitchief() {
  
  return relativeorbitchief_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_LiveVizSettingsPb::release_relativeorbitchief() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.relativeOrbitChief)
  return relativeorbitchief_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_LiveVizSettingsPb::set_allocated_relativeorbitchief(std::string* relativeorbitchief) {
  if (relativeorbitchief != nullptr) {
    
  } else {
    
  }
  relativeorbitchief_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relativeorbitchief,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.LiveVizSettingsPb.relativeOrbitChief)
}

// -------------------------------------------------------------------

// VizMessage_VizSettingsPb

// double ambient = 1;
inline void VizMessage_VizSettingsPb::clear_ambient() {
  ambient_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_ambient() const {
  return ambient_;
}
inline double VizMessage_VizSettingsPb::ambient() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.ambient)
  return _internal_ambient();
}
inline void VizMessage_VizSettingsPb::_internal_set_ambient(double value) {
  
  ambient_ = value;
}
inline void VizMessage_VizSettingsPb::set_ambient(double value) {
  _internal_set_ambient(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.ambient)
}

// int32 orbitLinesOn = 2;
inline void VizMessage_VizSettingsPb::clear_orbitlineson() {
  orbitlineson_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_orbitlineson() const {
  return orbitlineson_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::orbitlineson() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.orbitLinesOn)
  return _internal_orbitlineson();
}
inline void VizMessage_VizSettingsPb::_internal_set_orbitlineson(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orbitlineson_ = value;
}
inline void VizMessage_VizSettingsPb::set_orbitlineson(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orbitlineson(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.orbitLinesOn)
}

// int32 spacecraftCSon = 3;
inline void VizMessage_VizSettingsPb::clear_spacecraftcson() {
  spacecraftcson_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_spacecraftcson() const {
  return spacecraftcson_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::spacecraftcson() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.spacecraftCSon)
  return _internal_spacecraftcson();
}
inline void VizMessage_VizSettingsPb::_internal_set_spacecraftcson(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacecraftcson_ = value;
}
inline void VizMessage_VizSettingsPb::set_spacecraftcson(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacecraftcson(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.spacecraftCSon)
}

// int32 planetCSon = 4;
inline void VizMessage_VizSettingsPb::clear_planetcson() {
  planetcson_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_planetcson() const {
  return planetcson_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::planetcson() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.planetCSon)
  return _internal_planetcson();
}
inline void VizMessage_VizSettingsPb::_internal_set_planetcson(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  planetcson_ = value;
}
inline void VizMessage_VizSettingsPb::set_planetcson(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_planetcson(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.planetCSon)
}

// repeated .vizProtobufferMessage.VizMessage.PointLine pointLines = 5;
inline int VizMessage_VizSettingsPb::_internal_pointlines_size() const {
  return pointlines_.size();
}
inline int VizMessage_VizSettingsPb::pointlines_size() const {
  return _internal_pointlines_size();
}
inline void VizMessage_VizSettingsPb::clear_pointlines() {
  pointlines_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_PointLine* VizMessage_VizSettingsPb::mutable_pointlines(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.VizSettingsPb.pointLines)
  return pointlines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine >*
VizMessage_VizSettingsPb::mutable_pointlines() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.VizSettingsPb.pointLines)
  return &pointlines_;
}
inline const ::vizProtobufferMessage::VizMessage_PointLine& VizMessage_VizSettingsPb::_internal_pointlines(int index) const {
  return pointlines_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_PointLine& VizMessage_VizSettingsPb::pointlines(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.pointLines)
  return _internal_pointlines(index);
}
inline ::vizProtobufferMessage::VizMessage_PointLine* VizMessage_VizSettingsPb::_internal_add_pointlines() {
  return pointlines_.Add();
}
inline ::vizProtobufferMessage::VizMessage_PointLine* VizMessage_VizSettingsPb::add_pointlines() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.VizSettingsPb.pointLines)
  return _internal_add_pointlines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_PointLine >&
VizMessage_VizSettingsPb::pointlines() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.VizSettingsPb.pointLines)
  return pointlines_;
}

// repeated .vizProtobufferMessage.VizMessage.KeepOutInCone keepOutInCones = 6;
inline int VizMessage_VizSettingsPb::_internal_keepoutincones_size() const {
  return keepoutincones_.size();
}
inline int VizMessage_VizSettingsPb::keepoutincones_size() const {
  return _internal_keepoutincones_size();
}
inline void VizMessage_VizSettingsPb::clear_keepoutincones() {
  keepoutincones_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_KeepOutInCone* VizMessage_VizSettingsPb::mutable_keepoutincones(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.VizSettingsPb.keepOutInCones)
  return keepoutincones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_KeepOutInCone >*
VizMessage_VizSettingsPb::mutable_keepoutincones() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.VizSettingsPb.keepOutInCones)
  return &keepoutincones_;
}
inline const ::vizProtobufferMessage::VizMessage_KeepOutInCone& VizMessage_VizSettingsPb::_internal_keepoutincones(int index) const {
  return keepoutincones_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_KeepOutInCone& VizMessage_VizSettingsPb::keepoutincones(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.keepOutInCones)
  return _internal_keepoutincones(index);
}
inline ::vizProtobufferMessage::VizMessage_KeepOutInCone* VizMessage_VizSettingsPb::_internal_add_keepoutincones() {
  return keepoutincones_.Add();
}
inline ::vizProtobufferMessage::VizMessage_KeepOutInCone* VizMessage_VizSettingsPb::add_keepoutincones() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.VizSettingsPb.keepOutInCones)
  return _internal_add_keepoutincones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_KeepOutInCone >&
VizMessage_VizSettingsPb::keepoutincones() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.VizSettingsPb.keepOutInCones)
  return keepoutincones_;
}

// repeated .vizProtobufferMessage.VizMessage.StandardCameraSettings standardCameraSettings = 7;
inline int VizMessage_VizSettingsPb::_internal_standardcamerasettings_size() const {
  return standardcamerasettings_.size();
}
inline int VizMessage_VizSettingsPb::standardcamerasettings_size() const {
  return _internal_standardcamerasettings_size();
}
inline void VizMessage_VizSettingsPb::clear_standardcamerasettings() {
  standardcamerasettings_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_StandardCameraSettings* VizMessage_VizSettingsPb::mutable_standardcamerasettings(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.VizSettingsPb.standardCameraSettings)
  return standardcamerasettings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StandardCameraSettings >*
VizMessage_VizSettingsPb::mutable_standardcamerasettings() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.VizSettingsPb.standardCameraSettings)
  return &standardcamerasettings_;
}
inline const ::vizProtobufferMessage::VizMessage_StandardCameraSettings& VizMessage_VizSettingsPb::_internal_standardcamerasettings(int index) const {
  return standardcamerasettings_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_StandardCameraSettings& VizMessage_VizSettingsPb::standardcamerasettings(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.standardCameraSettings)
  return _internal_standardcamerasettings(index);
}
inline ::vizProtobufferMessage::VizMessage_StandardCameraSettings* VizMessage_VizSettingsPb::_internal_add_standardcamerasettings() {
  return standardcamerasettings_.Add();
}
inline ::vizProtobufferMessage::VizMessage_StandardCameraSettings* VizMessage_VizSettingsPb::add_standardcamerasettings() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.VizSettingsPb.standardCameraSettings)
  return _internal_add_standardcamerasettings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_StandardCameraSettings >&
VizMessage_VizSettingsPb::standardcamerasettings() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.VizSettingsPb.standardCameraSettings)
  return standardcamerasettings_;
}

// repeated .vizProtobufferMessage.VizMessage.InstrumentSettings instrumentSettings = 9;
inline int VizMessage_VizSettingsPb::_internal_instrumentsettings_size() const {
  return instrumentsettings_.size();
}
inline int VizMessage_VizSettingsPb::instrumentsettings_size() const {
  return _internal_instrumentsettings_size();
}
inline void VizMessage_VizSettingsPb::clear_instrumentsettings() {
  instrumentsettings_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_InstrumentSettings* VizMessage_VizSettingsPb::mutable_instrumentsettings(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.VizSettingsPb.instrumentSettings)
  return instrumentsettings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_InstrumentSettings >*
VizMessage_VizSettingsPb::mutable_instrumentsettings() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.VizSettingsPb.instrumentSettings)
  return &instrumentsettings_;
}
inline const ::vizProtobufferMessage::VizMessage_InstrumentSettings& VizMessage_VizSettingsPb::_internal_instrumentsettings(int index) const {
  return instrumentsettings_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_InstrumentSettings& VizMessage_VizSettingsPb::instrumentsettings(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.instrumentSettings)
  return _internal_instrumentsettings(index);
}
inline ::vizProtobufferMessage::VizMessage_InstrumentSettings* VizMessage_VizSettingsPb::_internal_add_instrumentsettings() {
  return instrumentsettings_.Add();
}
inline ::vizProtobufferMessage::VizMessage_InstrumentSettings* VizMessage_VizSettingsPb::add_instrumentsettings() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.VizSettingsPb.instrumentSettings)
  return _internal_add_instrumentsettings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_InstrumentSettings >&
VizMessage_VizSettingsPb::instrumentsettings() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.VizSettingsPb.instrumentSettings)
  return instrumentsettings_;
}

// repeated .vizProtobufferMessage.VizMessage.ActuatorSettings actuatorSettings = 10;
inline int VizMessage_VizSettingsPb::_internal_actuatorsettings_size() const {
  return actuatorsettings_.size();
}
inline int VizMessage_VizSettingsPb::actuatorsettings_size() const {
  return _internal_actuatorsettings_size();
}
inline void VizMessage_VizSettingsPb::clear_actuatorsettings() {
  actuatorsettings_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_ActuatorSettings* VizMessage_VizSettingsPb::mutable_actuatorsettings(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.VizSettingsPb.actuatorSettings)
  return actuatorsettings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ActuatorSettings >*
VizMessage_VizSettingsPb::mutable_actuatorsettings() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.VizSettingsPb.actuatorSettings)
  return &actuatorsettings_;
}
inline const ::vizProtobufferMessage::VizMessage_ActuatorSettings& VizMessage_VizSettingsPb::_internal_actuatorsettings(int index) const {
  return actuatorsettings_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_ActuatorSettings& VizMessage_VizSettingsPb::actuatorsettings(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.actuatorSettings)
  return _internal_actuatorsettings(index);
}
inline ::vizProtobufferMessage::VizMessage_ActuatorSettings* VizMessage_VizSettingsPb::_internal_add_actuatorsettings() {
  return actuatorsettings_.Add();
}
inline ::vizProtobufferMessage::VizMessage_ActuatorSettings* VizMessage_VizSettingsPb::add_actuatorsettings() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.VizSettingsPb.actuatorSettings)
  return _internal_add_actuatorsettings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_ActuatorSettings >&
VizMessage_VizSettingsPb::actuatorsettings() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.VizSettingsPb.actuatorSettings)
  return actuatorsettings_;
}

// string skybox = 11;
inline void VizMessage_VizSettingsPb::clear_skybox() {
  skybox_.ClearToEmpty();
}
inline const std::string& VizMessage_VizSettingsPb::skybox() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.skybox)
  return _internal_skybox();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_VizSettingsPb::set_skybox(ArgT0&& arg0, ArgT... args) {
 
 skybox_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.skybox)
}
inline std::string* VizMessage_VizSettingsPb::mutable_skybox() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.VizSettingsPb.skybox)
  return _internal_mutable_skybox();
}
inline const std::string& VizMessage_VizSettingsPb::_internal_skybox() const {
  return skybox_.Get();
}
inline void VizMessage_VizSettingsPb::_internal_set_skybox(const std::string& value) {
  
  skybox_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_VizSettingsPb::_internal_mutable_skybox() {
  
  return skybox_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_VizSettingsPb::release_skybox() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.VizSettingsPb.skybox)
  return skybox_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_VizSettingsPb::set_allocated_skybox(std::string* skybox) {
  if (skybox != nullptr) {
    
  } else {
    
  }
  skybox_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skybox,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.VizSettingsPb.skybox)
}

// repeated .vizProtobufferMessage.VizMessage.CustomModel customModels = 12;
inline int VizMessage_VizSettingsPb::_internal_custommodels_size() const {
  return custommodels_.size();
}
inline int VizMessage_VizSettingsPb::custommodels_size() const {
  return _internal_custommodels_size();
}
inline void VizMessage_VizSettingsPb::clear_custommodels() {
  custommodels_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_CustomModel* VizMessage_VizSettingsPb::mutable_custommodels(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.VizSettingsPb.customModels)
  return custommodels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CustomModel >*
VizMessage_VizSettingsPb::mutable_custommodels() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.VizSettingsPb.customModels)
  return &custommodels_;
}
inline const ::vizProtobufferMessage::VizMessage_CustomModel& VizMessage_VizSettingsPb::_internal_custommodels(int index) const {
  return custommodels_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_CustomModel& VizMessage_VizSettingsPb::custommodels(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.customModels)
  return _internal_custommodels(index);
}
inline ::vizProtobufferMessage::VizMessage_CustomModel* VizMessage_VizSettingsPb::_internal_add_custommodels() {
  return custommodels_.Add();
}
inline ::vizProtobufferMessage::VizMessage_CustomModel* VizMessage_VizSettingsPb::add_custommodels() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.VizSettingsPb.customModels)
  return _internal_add_custommodels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CustomModel >&
VizMessage_VizSettingsPb::custommodels() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.VizSettingsPb.customModels)
  return custommodels_;
}

// int32 viewCameraBoresightHUD = 13;
inline void VizMessage_VizSettingsPb::clear_viewcameraboresighthud() {
  viewcameraboresighthud_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_viewcameraboresighthud() const {
  return viewcameraboresighthud_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::viewcameraboresighthud() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.viewCameraBoresightHUD)
  return _internal_viewcameraboresighthud();
}
inline void VizMessage_VizSettingsPb::_internal_set_viewcameraboresighthud(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viewcameraboresighthud_ = value;
}
inline void VizMessage_VizSettingsPb::set_viewcameraboresighthud(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viewcameraboresighthud(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.viewCameraBoresightHUD)
}

// int32 viewCameraConeHUD = 14;
inline void VizMessage_VizSettingsPb::clear_viewcameraconehud() {
  viewcameraconehud_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_viewcameraconehud() const {
  return viewcameraconehud_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::viewcameraconehud() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.viewCameraConeHUD)
  return _internal_viewcameraconehud();
}
inline void VizMessage_VizSettingsPb::_internal_set_viewcameraconehud(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  viewcameraconehud_ = value;
}
inline void VizMessage_VizSettingsPb::set_viewcameraconehud(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_viewcameraconehud(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.viewCameraConeHUD)
}

// int32 showCSLabels = 15;
inline void VizMessage_VizSettingsPb::clear_showcslabels() {
  showcslabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showcslabels() const {
  return showcslabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showcslabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showCSLabels)
  return _internal_showcslabels();
}
inline void VizMessage_VizSettingsPb::_internal_set_showcslabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showcslabels_ = value;
}
inline void VizMessage_VizSettingsPb::set_showcslabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showcslabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showCSLabels)
}

// int32 showCelestialBodyLabels = 16;
inline void VizMessage_VizSettingsPb::clear_showcelestialbodylabels() {
  showcelestialbodylabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showcelestialbodylabels() const {
  return showcelestialbodylabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showcelestialbodylabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showCelestialBodyLabels)
  return _internal_showcelestialbodylabels();
}
inline void VizMessage_VizSettingsPb::_internal_set_showcelestialbodylabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showcelestialbodylabels_ = value;
}
inline void VizMessage_VizSettingsPb::set_showcelestialbodylabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showcelestialbodylabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showCelestialBodyLabels)
}

// int32 showSpacecraftLabels = 17;
inline void VizMessage_VizSettingsPb::clear_showspacecraftlabels() {
  showspacecraftlabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showspacecraftlabels() const {
  return showspacecraftlabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showspacecraftlabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showSpacecraftLabels)
  return _internal_showspacecraftlabels();
}
inline void VizMessage_VizSettingsPb::_internal_set_showspacecraftlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showspacecraftlabels_ = value;
}
inline void VizMessage_VizSettingsPb::set_showspacecraftlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showspacecraftlabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showSpacecraftLabels)
}

// int32 showCameraLabels = 18;
inline void VizMessage_VizSettingsPb::clear_showcameralabels() {
  showcameralabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showcameralabels() const {
  return showcameralabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showcameralabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showCameraLabels)
  return _internal_showcameralabels();
}
inline void VizMessage_VizSettingsPb::_internal_set_showcameralabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showcameralabels_ = value;
}
inline void VizMessage_VizSettingsPb::set_showcameralabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showcameralabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showCameraLabels)
}

// double customGUIScale = 19;
inline void VizMessage_VizSettingsPb::clear_customguiscale() {
  customguiscale_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_customguiscale() const {
  return customguiscale_;
}
inline double VizMessage_VizSettingsPb::customguiscale() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.customGUIScale)
  return _internal_customguiscale();
}
inline void VizMessage_VizSettingsPb::_internal_set_customguiscale(double value) {
  
  customguiscale_ = value;
}
inline void VizMessage_VizSettingsPb::set_customguiscale(double value) {
  _internal_set_customguiscale(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.customGUIScale)
}

// string defaultSpacecraftSprite = 20;
inline void VizMessage_VizSettingsPb::clear_defaultspacecraftsprite() {
  defaultspacecraftsprite_.ClearToEmpty();
}
inline const std::string& VizMessage_VizSettingsPb::defaultspacecraftsprite() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultSpacecraftSprite)
  return _internal_defaultspacecraftsprite();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_VizSettingsPb::set_defaultspacecraftsprite(ArgT0&& arg0, ArgT... args) {
 
 defaultspacecraftsprite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultSpacecraftSprite)
}
inline std::string* VizMessage_VizSettingsPb::mutable_defaultspacecraftsprite() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultSpacecraftSprite)
  return _internal_mutable_defaultspacecraftsprite();
}
inline const std::string& VizMessage_VizSettingsPb::_internal_defaultspacecraftsprite() const {
  return defaultspacecraftsprite_.Get();
}
inline void VizMessage_VizSettingsPb::_internal_set_defaultspacecraftsprite(const std::string& value) {
  
  defaultspacecraftsprite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_VizSettingsPb::_internal_mutable_defaultspacecraftsprite() {
  
  return defaultspacecraftsprite_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_VizSettingsPb::release_defaultspacecraftsprite() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultSpacecraftSprite)
  return defaultspacecraftsprite_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_VizSettingsPb::set_allocated_defaultspacecraftsprite(std::string* defaultspacecraftsprite) {
  if (defaultspacecraftsprite != nullptr) {
    
  } else {
    
  }
  defaultspacecraftsprite_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), defaultspacecraftsprite,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultSpacecraftSprite)
}

// int32 showSpacecraftAsSprites = 21;
inline void VizMessage_VizSettingsPb::clear_showspacecraftassprites() {
  showspacecraftassprites_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showspacecraftassprites() const {
  return showspacecraftassprites_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showspacecraftassprites() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showSpacecraftAsSprites)
  return _internal_showspacecraftassprites();
}
inline void VizMessage_VizSettingsPb::_internal_set_showspacecraftassprites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showspacecraftassprites_ = value;
}
inline void VizMessage_VizSettingsPb::set_showspacecraftassprites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showspacecraftassprites(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showSpacecraftAsSprites)
}

// int32 showCelestialBodiesAsSprites = 22;
inline void VizMessage_VizSettingsPb::clear_showcelestialbodiesassprites() {
  showcelestialbodiesassprites_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showcelestialbodiesassprites() const {
  return showcelestialbodiesassprites_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showcelestialbodiesassprites() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showCelestialBodiesAsSprites)
  return _internal_showcelestialbodiesassprites();
}
inline void VizMessage_VizSettingsPb::_internal_set_showcelestialbodiesassprites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showcelestialbodiesassprites_ = value;
}
inline void VizMessage_VizSettingsPb::set_showcelestialbodiesassprites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showcelestialbodiesassprites(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showCelestialBodiesAsSprites)
}

// int32 show24hrClock = 23;
inline void VizMessage_VizSettingsPb::clear_show24hrclock() {
  show24hrclock_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_show24hrclock() const {
  return show24hrclock_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::show24hrclock() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.show24hrClock)
  return _internal_show24hrclock();
}
inline void VizMessage_VizSettingsPb::_internal_set_show24hrclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  show24hrclock_ = value;
}
inline void VizMessage_VizSettingsPb::set_show24hrclock(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_show24hrclock(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.show24hrClock)
}

// int32 showDataRateDisplay = 24;
inline void VizMessage_VizSettingsPb::clear_showdataratedisplay() {
  showdataratedisplay_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showdataratedisplay() const {
  return showdataratedisplay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showdataratedisplay() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showDataRateDisplay)
  return _internal_showdataratedisplay();
}
inline void VizMessage_VizSettingsPb::_internal_set_showdataratedisplay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showdataratedisplay_ = value;
}
inline void VizMessage_VizSettingsPb::set_showdataratedisplay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showdataratedisplay(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showDataRateDisplay)
}

// double keyboardAngularRate = 25;
inline void VizMessage_VizSettingsPb::clear_keyboardangularrate() {
  keyboardangularrate_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_keyboardangularrate() const {
  return keyboardangularrate_;
}
inline double VizMessage_VizSettingsPb::keyboardangularrate() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.keyboardAngularRate)
  return _internal_keyboardangularrate();
}
inline void VizMessage_VizSettingsPb::_internal_set_keyboardangularrate(double value) {
  
  keyboardangularrate_ = value;
}
inline void VizMessage_VizSettingsPb::set_keyboardangularrate(double value) {
  _internal_set_keyboardangularrate(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.keyboardAngularRate)
}

// double keyboardZoomRate = 26;
inline void VizMessage_VizSettingsPb::clear_keyboardzoomrate() {
  keyboardzoomrate_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_keyboardzoomrate() const {
  return keyboardzoomrate_;
}
inline double VizMessage_VizSettingsPb::keyboardzoomrate() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.keyboardZoomRate)
  return _internal_keyboardzoomrate();
}
inline void VizMessage_VizSettingsPb::_internal_set_keyboardzoomrate(double value) {
  
  keyboardzoomrate_ = value;
}
inline void VizMessage_VizSettingsPb::set_keyboardzoomrate(double value) {
  _internal_set_keyboardzoomrate(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.keyboardZoomRate)
}

// repeated int32 defaultThrusterColor = 27;
inline int VizMessage_VizSettingsPb::_internal_defaultthrustercolor_size() const {
  return defaultthrustercolor_.size();
}
inline int VizMessage_VizSettingsPb::defaultthrustercolor_size() const {
  return _internal_defaultthrustercolor_size();
}
inline void VizMessage_VizSettingsPb::clear_defaultthrustercolor() {
  defaultthrustercolor_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_defaultthrustercolor(int index) const {
  return defaultthrustercolor_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::defaultthrustercolor(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultThrusterColor)
  return _internal_defaultthrustercolor(index);
}
inline void VizMessage_VizSettingsPb::set_defaultthrustercolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  defaultthrustercolor_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultThrusterColor)
}
inline void VizMessage_VizSettingsPb::_internal_add_defaultthrustercolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  defaultthrustercolor_.Add(value);
}
inline void VizMessage_VizSettingsPb::add_defaultthrustercolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_defaultthrustercolor(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultThrusterColor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_VizSettingsPb::_internal_defaultthrustercolor() const {
  return defaultthrustercolor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_VizSettingsPb::defaultthrustercolor() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultThrusterColor)
  return _internal_defaultthrustercolor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_VizSettingsPb::_internal_mutable_defaultthrustercolor() {
  return &defaultthrustercolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_VizSettingsPb::mutable_defaultthrustercolor() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultThrusterColor)
  return _internal_mutable_defaultthrustercolor();
}

// double defaultThrusterPlumeLifeScalar = 28;
inline void VizMessage_VizSettingsPb::clear_defaultthrusterplumelifescalar() {
  defaultthrusterplumelifescalar_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_defaultthrusterplumelifescalar() const {
  return defaultthrusterplumelifescalar_;
}
inline double VizMessage_VizSettingsPb::defaultthrusterplumelifescalar() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultThrusterPlumeLifeScalar)
  return _internal_defaultthrusterplumelifescalar();
}
inline void VizMessage_VizSettingsPb::_internal_set_defaultthrusterplumelifescalar(double value) {
  
  defaultthrusterplumelifescalar_ = value;
}
inline void VizMessage_VizSettingsPb::set_defaultthrusterplumelifescalar(double value) {
  _internal_set_defaultthrusterplumelifescalar(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.defaultThrusterPlumeLifeScalar)
}

// int32 orbitLineSegments = 29;
inline void VizMessage_VizSettingsPb::clear_orbitlinesegments() {
  orbitlinesegments_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_orbitlinesegments() const {
  return orbitlinesegments_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::orbitlinesegments() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.orbitLineSegments)
  return _internal_orbitlinesegments();
}
inline void VizMessage_VizSettingsPb::_internal_set_orbitlinesegments(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orbitlinesegments_ = value;
}
inline void VizMessage_VizSettingsPb::set_orbitlinesegments(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orbitlinesegments(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.orbitLineSegments)
}

// int32 relativeOrbitRange = 30;
inline void VizMessage_VizSettingsPb::clear_relativeorbitrange() {
  relativeorbitrange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_relativeorbitrange() const {
  return relativeorbitrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::relativeorbitrange() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.relativeOrbitRange)
  return _internal_relativeorbitrange();
}
inline void VizMessage_VizSettingsPb::_internal_set_relativeorbitrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  relativeorbitrange_ = value;
}
inline void VizMessage_VizSettingsPb::set_relativeorbitrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relativeorbitrange(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.relativeOrbitRange)
}

// int32 showHillFrame = 31;
inline void VizMessage_VizSettingsPb::clear_showhillframe() {
  showhillframe_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showhillframe() const {
  return showhillframe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showhillframe() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showHillFrame)
  return _internal_showhillframe();
}
inline void VizMessage_VizSettingsPb::_internal_set_showhillframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showhillframe_ = value;
}
inline void VizMessage_VizSettingsPb::set_showhillframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showhillframe(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showHillFrame)
}

// int32 showVelocityFrame = 32;
inline void VizMessage_VizSettingsPb::clear_showvelocityframe() {
  showvelocityframe_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showvelocityframe() const {
  return showvelocityframe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showvelocityframe() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showVelocityFrame)
  return _internal_showvelocityframe();
}
inline void VizMessage_VizSettingsPb::_internal_set_showvelocityframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showvelocityframe_ = value;
}
inline void VizMessage_VizSettingsPb::set_showvelocityframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showvelocityframe(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showVelocityFrame)
}

// int32 relativeOrbitFrame = 33;
inline void VizMessage_VizSettingsPb::clear_relativeorbitframe() {
  relativeorbitframe_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_relativeorbitframe() const {
  return relativeorbitframe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::relativeorbitframe() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.relativeOrbitFrame)
  return _internal_relativeorbitframe();
}
inline void VizMessage_VizSettingsPb::_internal_set_relativeorbitframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  relativeorbitframe_ = value;
}
inline void VizMessage_VizSettingsPb::set_relativeorbitframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relativeorbitframe(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.relativeOrbitFrame)
}

// string mainCameraTarget = 34;
inline void VizMessage_VizSettingsPb::clear_maincameratarget() {
  maincameratarget_.ClearToEmpty();
}
inline const std::string& VizMessage_VizSettingsPb::maincameratarget() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.mainCameraTarget)
  return _internal_maincameratarget();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_VizSettingsPb::set_maincameratarget(ArgT0&& arg0, ArgT... args) {
 
 maincameratarget_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.mainCameraTarget)
}
inline std::string* VizMessage_VizSettingsPb::mutable_maincameratarget() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.VizSettingsPb.mainCameraTarget)
  return _internal_mutable_maincameratarget();
}
inline const std::string& VizMessage_VizSettingsPb::_internal_maincameratarget() const {
  return maincameratarget_.Get();
}
inline void VizMessage_VizSettingsPb::_internal_set_maincameratarget(const std::string& value) {
  
  maincameratarget_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_VizSettingsPb::_internal_mutable_maincameratarget() {
  
  return maincameratarget_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_VizSettingsPb::release_maincameratarget() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.VizSettingsPb.mainCameraTarget)
  return maincameratarget_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_VizSettingsPb::set_allocated_maincameratarget(std::string* maincameratarget) {
  if (maincameratarget != nullptr) {
    
  } else {
    
  }
  maincameratarget_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maincameratarget,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.VizSettingsPb.mainCameraTarget)
}

// double spacecraftShadowBrightness = 35;
inline void VizMessage_VizSettingsPb::clear_spacecraftshadowbrightness() {
  spacecraftshadowbrightness_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_spacecraftshadowbrightness() const {
  return spacecraftshadowbrightness_;
}
inline double VizMessage_VizSettingsPb::spacecraftshadowbrightness() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.spacecraftShadowBrightness)
  return _internal_spacecraftshadowbrightness();
}
inline void VizMessage_VizSettingsPb::_internal_set_spacecraftshadowbrightness(double value) {
  
  spacecraftshadowbrightness_ = value;
}
inline void VizMessage_VizSettingsPb::set_spacecraftshadowbrightness(double value) {
  _internal_set_spacecraftshadowbrightness(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.spacecraftShadowBrightness)
}

// double spacecraftSizeMultiplier = 36;
inline void VizMessage_VizSettingsPb::clear_spacecraftsizemultiplier() {
  spacecraftsizemultiplier_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_spacecraftsizemultiplier() const {
  return spacecraftsizemultiplier_;
}
inline double VizMessage_VizSettingsPb::spacecraftsizemultiplier() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.spacecraftSizeMultiplier)
  return _internal_spacecraftsizemultiplier();
}
inline void VizMessage_VizSettingsPb::_internal_set_spacecraftsizemultiplier(double value) {
  
  spacecraftsizemultiplier_ = value;
}
inline void VizMessage_VizSettingsPb::set_spacecraftsizemultiplier(double value) {
  _internal_set_spacecraftsizemultiplier(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.spacecraftSizeMultiplier)
}

// int32 showLocationCommLines = 37;
inline void VizMessage_VizSettingsPb::clear_showlocationcommlines() {
  showlocationcommlines_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showlocationcommlines() const {
  return showlocationcommlines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showlocationcommlines() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showLocationCommLines)
  return _internal_showlocationcommlines();
}
inline void VizMessage_VizSettingsPb::_internal_set_showlocationcommlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showlocationcommlines_ = value;
}
inline void VizMessage_VizSettingsPb::set_showlocationcommlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showlocationcommlines(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showLocationCommLines)
}

// int32 showLocationCones = 38;
inline void VizMessage_VizSettingsPb::clear_showlocationcones() {
  showlocationcones_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showlocationcones() const {
  return showlocationcones_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showlocationcones() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showLocationCones)
  return _internal_showlocationcones();
}
inline void VizMessage_VizSettingsPb::_internal_set_showlocationcones(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showlocationcones_ = value;
}
inline void VizMessage_VizSettingsPb::set_showlocationcones(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showlocationcones(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showLocationCones)
}

// int32 showLocationLabels = 39;
inline void VizMessage_VizSettingsPb::clear_showlocationlabels() {
  showlocationlabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showlocationlabels() const {
  return showlocationlabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showlocationlabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showLocationLabels)
  return _internal_showlocationlabels();
}
inline void VizMessage_VizSettingsPb::_internal_set_showlocationlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showlocationlabels_ = value;
}
inline void VizMessage_VizSettingsPb::set_showlocationlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showlocationlabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showLocationLabels)
}

// int32 trueTrajectoryLinesOn = 40;
inline void VizMessage_VizSettingsPb::clear_truetrajectorylineson() {
  truetrajectorylineson_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_truetrajectorylineson() const {
  return truetrajectorylineson_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::truetrajectorylineson() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.trueTrajectoryLinesOn)
  return _internal_truetrajectorylineson();
}
inline void VizMessage_VizSettingsPb::_internal_set_truetrajectorylineson(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  truetrajectorylineson_ = value;
}
inline void VizMessage_VizSettingsPb::set_truetrajectorylineson(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_truetrajectorylineson(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.trueTrajectoryLinesOn)
}

// int32 atmospheresOff = 41;
inline void VizMessage_VizSettingsPb::clear_atmospheresoff() {
  atmospheresoff_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_atmospheresoff() const {
  return atmospheresoff_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::atmospheresoff() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.atmospheresOff)
  return _internal_atmospheresoff();
}
inline void VizMessage_VizSettingsPb::_internal_set_atmospheresoff(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  atmospheresoff_ = value;
}
inline void VizMessage_VizSettingsPb::set_atmospheresoff(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_atmospheresoff(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.atmospheresOff)
}

// int32 scViewToPlanetViewBoundaryMultiplier = 42;
inline void VizMessage_VizSettingsPb::clear_scviewtoplanetviewboundarymultiplier() {
  scviewtoplanetviewboundarymultiplier_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_scviewtoplanetviewboundarymultiplier() const {
  return scviewtoplanetviewboundarymultiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::scviewtoplanetviewboundarymultiplier() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.scViewToPlanetViewBoundaryMultiplier)
  return _internal_scviewtoplanetviewboundarymultiplier();
}
inline void VizMessage_VizSettingsPb::_internal_set_scviewtoplanetviewboundarymultiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scviewtoplanetviewboundarymultiplier_ = value;
}
inline void VizMessage_VizSettingsPb::set_scviewtoplanetviewboundarymultiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scviewtoplanetviewboundarymultiplier(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.scViewToPlanetViewBoundaryMultiplier)
}

// int32 planetViewToHelioViewBoundaryMultiplier = 43;
inline void VizMessage_VizSettingsPb::clear_planetviewtohelioviewboundarymultiplier() {
  planetviewtohelioviewboundarymultiplier_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_planetviewtohelioviewboundarymultiplier() const {
  return planetviewtohelioviewboundarymultiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::planetviewtohelioviewboundarymultiplier() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.planetViewToHelioViewBoundaryMultiplier)
  return _internal_planetviewtohelioviewboundarymultiplier();
}
inline void VizMessage_VizSettingsPb::_internal_set_planetviewtohelioviewboundarymultiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  planetviewtohelioviewboundarymultiplier_ = value;
}
inline void VizMessage_VizSettingsPb::set_planetviewtohelioviewboundarymultiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_planetviewtohelioviewboundarymultiplier(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.planetViewToHelioViewBoundaryMultiplier)
}

// double sunIntensity = 44;
inline void VizMessage_VizSettingsPb::clear_sunintensity() {
  sunintensity_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_sunintensity() const {
  return sunintensity_;
}
inline double VizMessage_VizSettingsPb::sunintensity() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.sunIntensity)
  return _internal_sunintensity();
}
inline void VizMessage_VizSettingsPb::_internal_set_sunintensity(double value) {
  
  sunintensity_ = value;
}
inline void VizMessage_VizSettingsPb::set_sunintensity(double value) {
  _internal_set_sunintensity(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.sunIntensity)
}

// int32 attenuateSunLightWithDistance = 45;
inline void VizMessage_VizSettingsPb::clear_attenuatesunlightwithdistance() {
  attenuatesunlightwithdistance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_attenuatesunlightwithdistance() const {
  return attenuatesunlightwithdistance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::attenuatesunlightwithdistance() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.attenuateSunLightWithDistance)
  return _internal_attenuatesunlightwithdistance();
}
inline void VizMessage_VizSettingsPb::_internal_set_attenuatesunlightwithdistance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuatesunlightwithdistance_ = value;
}
inline void VizMessage_VizSettingsPb::set_attenuatesunlightwithdistance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuatesunlightwithdistance(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.attenuateSunLightWithDistance)
}

// int32 showLightLabels = 46;
inline void VizMessage_VizSettingsPb::clear_showlightlabels() {
  showlightlabels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showlightlabels() const {
  return showlightlabels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showlightlabels() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showLightLabels)
  return _internal_showlightlabels();
}
inline void VizMessage_VizSettingsPb::_internal_set_showlightlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showlightlabels_ = value;
}
inline void VizMessage_VizSettingsPb::set_showlightlabels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showlightlabels(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showLightLabels)
}

// double celestialBodyHelioViewSizeMultiplier = 47;
inline void VizMessage_VizSettingsPb::clear_celestialbodyhelioviewsizemultiplier() {
  celestialbodyhelioviewsizemultiplier_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_celestialbodyhelioviewsizemultiplier() const {
  return celestialbodyhelioviewsizemultiplier_;
}
inline double VizMessage_VizSettingsPb::celestialbodyhelioviewsizemultiplier() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.celestialBodyHelioViewSizeMultiplier)
  return _internal_celestialbodyhelioviewsizemultiplier();
}
inline void VizMessage_VizSettingsPb::_internal_set_celestialbodyhelioviewsizemultiplier(double value) {
  
  celestialbodyhelioviewsizemultiplier_ = value;
}
inline void VizMessage_VizSettingsPb::set_celestialbodyhelioviewsizemultiplier(double value) {
  _internal_set_celestialbodyhelioviewsizemultiplier(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.celestialBodyHelioViewSizeMultiplier)
}

// int32 showMissionTime = 48;
inline void VizMessage_VizSettingsPb::clear_showmissiontime() {
  showmissiontime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_showmissiontime() const {
  return showmissiontime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::showmissiontime() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.showMissionTime)
  return _internal_showmissiontime();
}
inline void VizMessage_VizSettingsPb::_internal_set_showmissiontime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showmissiontime_ = value;
}
inline void VizMessage_VizSettingsPb::set_showmissiontime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showmissiontime(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.showMissionTime)
}

// double spacecraftHelioViewSizeMultiplier = 49;
inline void VizMessage_VizSettingsPb::clear_spacecrafthelioviewsizemultiplier() {
  spacecrafthelioviewsizemultiplier_ = 0;
}
inline double VizMessage_VizSettingsPb::_internal_spacecrafthelioviewsizemultiplier() const {
  return spacecrafthelioviewsizemultiplier_;
}
inline double VizMessage_VizSettingsPb::spacecrafthelioviewsizemultiplier() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.spacecraftHelioViewSizeMultiplier)
  return _internal_spacecrafthelioviewsizemultiplier();
}
inline void VizMessage_VizSettingsPb::_internal_set_spacecrafthelioviewsizemultiplier(double value) {
  
  spacecrafthelioviewsizemultiplier_ = value;
}
inline void VizMessage_VizSettingsPb::set_spacecrafthelioviewsizemultiplier(double value) {
  _internal_set_spacecrafthelioviewsizemultiplier(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.spacecraftHelioViewSizeMultiplier)
}

// int32 forceStartAtSpacecraftLocalView = 50;
inline void VizMessage_VizSettingsPb::clear_forcestartatspacecraftlocalview() {
  forcestartatspacecraftlocalview_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::_internal_forcestartatspacecraftlocalview() const {
  return forcestartatspacecraftlocalview_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_VizSettingsPb::forcestartatspacecraftlocalview() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.VizSettingsPb.forceStartAtSpacecraftLocalView)
  return _internal_forcestartatspacecraftlocalview();
}
inline void VizMessage_VizSettingsPb::_internal_set_forcestartatspacecraftlocalview(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  forcestartatspacecraftlocalview_ = value;
}
inline void VizMessage_VizSettingsPb::set_forcestartatspacecraftlocalview(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_forcestartatspacecraftlocalview(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.VizSettingsPb.forceStartAtSpacecraftLocalView)
}

// -------------------------------------------------------------------

// VizMessage_MultiSphere

// int32 isOn = 1;
inline void VizMessage_MultiSphere::clear_ison() {
  ison_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_MultiSphere::_internal_ison() const {
  return ison_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_MultiSphere::ison() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.MultiSphere.isOn)
  return _internal_ison();
}
inline void VizMessage_MultiSphere::_internal_set_ison(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ison_ = value;
}
inline void VizMessage_MultiSphere::set_ison(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ison(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.MultiSphere.isOn)
}

// repeated double position = 2;
inline int VizMessage_MultiSphere::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_MultiSphere::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_MultiSphere::clear_position() {
  position_.Clear();
}
inline double VizMessage_MultiSphere::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_MultiSphere::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.MultiSphere.position)
  return _internal_position(index);
}
inline void VizMessage_MultiSphere::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.MultiSphere.position)
}
inline void VizMessage_MultiSphere::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_MultiSphere::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.MultiSphere.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_MultiSphere::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_MultiSphere::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.MultiSphere.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_MultiSphere::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_MultiSphere::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.MultiSphere.position)
  return _internal_mutable_position();
}

// double radius = 3;
inline void VizMessage_MultiSphere::clear_radius() {
  radius_ = 0;
}
inline double VizMessage_MultiSphere::_internal_radius() const {
  return radius_;
}
inline double VizMessage_MultiSphere::radius() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.MultiSphere.radius)
  return _internal_radius();
}
inline void VizMessage_MultiSphere::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void VizMessage_MultiSphere::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.MultiSphere.radius)
}

// double currentValue = 4;
inline void VizMessage_MultiSphere::clear_currentvalue() {
  currentvalue_ = 0;
}
inline double VizMessage_MultiSphere::_internal_currentvalue() const {
  return currentvalue_;
}
inline double VizMessage_MultiSphere::currentvalue() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.MultiSphere.currentValue)
  return _internal_currentvalue();
}
inline void VizMessage_MultiSphere::_internal_set_currentvalue(double value) {
  
  currentvalue_ = value;
}
inline void VizMessage_MultiSphere::set_currentvalue(double value) {
  _internal_set_currentvalue(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.MultiSphere.currentValue)
}

// double maxValue = 5;
inline void VizMessage_MultiSphere::clear_maxvalue() {
  maxvalue_ = 0;
}
inline double VizMessage_MultiSphere::_internal_maxvalue() const {
  return maxvalue_;
}
inline double VizMessage_MultiSphere::maxvalue() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.MultiSphere.maxValue)
  return _internal_maxvalue();
}
inline void VizMessage_MultiSphere::_internal_set_maxvalue(double value) {
  
  maxvalue_ = value;
}
inline void VizMessage_MultiSphere::set_maxvalue(double value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.MultiSphere.maxValue)
}

// repeated int32 positiveColor = 6;
inline int VizMessage_MultiSphere::_internal_positivecolor_size() const {
  return positivecolor_.size();
}
inline int VizMessage_MultiSphere::positivecolor_size() const {
  return _internal_positivecolor_size();
}
inline void VizMessage_MultiSphere::clear_positivecolor() {
  positivecolor_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_MultiSphere::_internal_positivecolor(int index) const {
  return positivecolor_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_MultiSphere::positivecolor(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.MultiSphere.positiveColor)
  return _internal_positivecolor(index);
}
inline void VizMessage_MultiSphere::set_positivecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  positivecolor_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.MultiSphere.positiveColor)
}
inline void VizMessage_MultiSphere::_internal_add_positivecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  positivecolor_.Add(value);
}
inline void VizMessage_MultiSphere::add_positivecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_positivecolor(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.MultiSphere.positiveColor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_MultiSphere::_internal_positivecolor() const {
  return positivecolor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_MultiSphere::positivecolor() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.MultiSphere.positiveColor)
  return _internal_positivecolor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_MultiSphere::_internal_mutable_positivecolor() {
  return &positivecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_MultiSphere::mutable_positivecolor() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.MultiSphere.positiveColor)
  return _internal_mutable_positivecolor();
}

// repeated int32 negativeColor = 7;
inline int VizMessage_MultiSphere::_internal_negativecolor_size() const {
  return negativecolor_.size();
}
inline int VizMessage_MultiSphere::negativecolor_size() const {
  return _internal_negativecolor_size();
}
inline void VizMessage_MultiSphere::clear_negativecolor() {
  negativecolor_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_MultiSphere::_internal_negativecolor(int index) const {
  return negativecolor_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_MultiSphere::negativecolor(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.MultiSphere.negativeColor)
  return _internal_negativecolor(index);
}
inline void VizMessage_MultiSphere::set_negativecolor(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  negativecolor_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.MultiSphere.negativeColor)
}
inline void VizMessage_MultiSphere::_internal_add_negativecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  negativecolor_.Add(value);
}
inline void VizMessage_MultiSphere::add_negativecolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_negativecolor(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.MultiSphere.negativeColor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_MultiSphere::_internal_negativecolor() const {
  return negativecolor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_MultiSphere::negativecolor() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.MultiSphere.negativeColor)
  return _internal_negativecolor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_MultiSphere::_internal_mutable_negativecolor() {
  return &negativecolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_MultiSphere::mutable_negativecolor() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.MultiSphere.negativeColor)
  return _internal_mutable_negativecolor();
}

// int32 neutralOpacity = 8;
inline void VizMessage_MultiSphere::clear_neutralopacity() {
  neutralopacity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_MultiSphere::_internal_neutralopacity() const {
  return neutralopacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_MultiSphere::neutralopacity() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.MultiSphere.neutralOpacity)
  return _internal_neutralopacity();
}
inline void VizMessage_MultiSphere::_internal_set_neutralopacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  neutralopacity_ = value;
}
inline void VizMessage_MultiSphere::set_neutralopacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_neutralopacity(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.MultiSphere.neutralOpacity)
}

// -------------------------------------------------------------------

// VizMessage_Location

// string stationName = 1;
inline void VizMessage_Location::clear_stationname() {
  stationname_.ClearToEmpty();
}
inline const std::string& VizMessage_Location::stationname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Location.stationName)
  return _internal_stationname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Location::set_stationname(ArgT0&& arg0, ArgT... args) {
 
 stationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Location.stationName)
}
inline std::string* VizMessage_Location::mutable_stationname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Location.stationName)
  return _internal_mutable_stationname();
}
inline const std::string& VizMessage_Location::_internal_stationname() const {
  return stationname_.Get();
}
inline void VizMessage_Location::_internal_set_stationname(const std::string& value) {
  
  stationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Location::_internal_mutable_stationname() {
  
  return stationname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Location::release_stationname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Location.stationName)
  return stationname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Location::set_allocated_stationname(std::string* stationname) {
  if (stationname != nullptr) {
    
  } else {
    
  }
  stationname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stationname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Location.stationName)
}

// string parentBodyName = 2;
inline void VizMessage_Location::clear_parentbodyname() {
  parentbodyname_.ClearToEmpty();
}
inline const std::string& VizMessage_Location::parentbodyname() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Location.parentBodyName)
  return _internal_parentbodyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VizMessage_Location::set_parentbodyname(ArgT0&& arg0, ArgT... args) {
 
 parentbodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Location.parentBodyName)
}
inline std::string* VizMessage_Location::mutable_parentbodyname() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.Location.parentBodyName)
  return _internal_mutable_parentbodyname();
}
inline const std::string& VizMessage_Location::_internal_parentbodyname() const {
  return parentbodyname_.Get();
}
inline void VizMessage_Location::_internal_set_parentbodyname(const std::string& value) {
  
  parentbodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VizMessage_Location::_internal_mutable_parentbodyname() {
  
  return parentbodyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VizMessage_Location::release_parentbodyname() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.Location.parentBodyName)
  return parentbodyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VizMessage_Location::set_allocated_parentbodyname(std::string* parentbodyname) {
  if (parentbodyname != nullptr) {
    
  } else {
    
  }
  parentbodyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentbodyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.Location.parentBodyName)
}

// repeated double r_GP_P = 3;
inline int VizMessage_Location::_internal_r_gp_p_size() const {
  return r_gp_p_.size();
}
inline int VizMessage_Location::r_gp_p_size() const {
  return _internal_r_gp_p_size();
}
inline void VizMessage_Location::clear_r_gp_p() {
  r_gp_p_.Clear();
}
inline double VizMessage_Location::_internal_r_gp_p(int index) const {
  return r_gp_p_.Get(index);
}
inline double VizMessage_Location::r_gp_p(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Location.r_GP_P)
  return _internal_r_gp_p(index);
}
inline void VizMessage_Location::set_r_gp_p(int index, double value) {
  r_gp_p_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Location.r_GP_P)
}
inline void VizMessage_Location::_internal_add_r_gp_p(double value) {
  r_gp_p_.Add(value);
}
inline void VizMessage_Location::add_r_gp_p(double value) {
  _internal_add_r_gp_p(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Location.r_GP_P)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Location::_internal_r_gp_p() const {
  return r_gp_p_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Location::r_gp_p() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Location.r_GP_P)
  return _internal_r_gp_p();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Location::_internal_mutable_r_gp_p() {
  return &r_gp_p_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Location::mutable_r_gp_p() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Location.r_GP_P)
  return _internal_mutable_r_gp_p();
}

// repeated double gHat_P = 4;
inline int VizMessage_Location::_internal_ghat_p_size() const {
  return ghat_p_.size();
}
inline int VizMessage_Location::ghat_p_size() const {
  return _internal_ghat_p_size();
}
inline void VizMessage_Location::clear_ghat_p() {
  ghat_p_.Clear();
}
inline double VizMessage_Location::_internal_ghat_p(int index) const {
  return ghat_p_.Get(index);
}
inline double VizMessage_Location::ghat_p(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Location.gHat_P)
  return _internal_ghat_p(index);
}
inline void VizMessage_Location::set_ghat_p(int index, double value) {
  ghat_p_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Location.gHat_P)
}
inline void VizMessage_Location::_internal_add_ghat_p(double value) {
  ghat_p_.Add(value);
}
inline void VizMessage_Location::add_ghat_p(double value) {
  _internal_add_ghat_p(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Location.gHat_P)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Location::_internal_ghat_p() const {
  return ghat_p_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Location::ghat_p() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Location.gHat_P)
  return _internal_ghat_p();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Location::_internal_mutable_ghat_p() {
  return &ghat_p_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Location::mutable_ghat_p() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Location.gHat_P)
  return _internal_mutable_ghat_p();
}

// double fieldOfView = 5;
inline void VizMessage_Location::clear_fieldofview() {
  fieldofview_ = 0;
}
inline double VizMessage_Location::_internal_fieldofview() const {
  return fieldofview_;
}
inline double VizMessage_Location::fieldofview() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Location.fieldOfView)
  return _internal_fieldofview();
}
inline void VizMessage_Location::_internal_set_fieldofview(double value) {
  
  fieldofview_ = value;
}
inline void VizMessage_Location::set_fieldofview(double value) {
  _internal_set_fieldofview(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Location.fieldOfView)
}

// repeated int32 color = 6;
inline int VizMessage_Location::_internal_color_size() const {
  return color_.size();
}
inline int VizMessage_Location::color_size() const {
  return _internal_color_size();
}
inline void VizMessage_Location::clear_color() {
  color_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Location::_internal_color(int index) const {
  return color_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Location::color(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Location.color)
  return _internal_color(index);
}
inline void VizMessage_Location::set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Location.color)
}
inline void VizMessage_Location::_internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Add(value);
}
inline void VizMessage_Location::add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Location.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Location::_internal_color() const {
  return color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Location::color() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Location.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Location::_internal_mutable_color() {
  return &color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Location::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Location.color)
  return _internal_mutable_color();
}

// double range = 7;
inline void VizMessage_Location::clear_range() {
  range_ = 0;
}
inline double VizMessage_Location::_internal_range() const {
  return range_;
}
inline double VizMessage_Location::range() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Location.range)
  return _internal_range();
}
inline void VizMessage_Location::_internal_set_range(double value) {
  
  range_ = value;
}
inline void VizMessage_Location::set_range(double value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Location.range)
}

// -------------------------------------------------------------------

// VizMessage_Ellipsoid

// int32 isOn = 1;
inline void VizMessage_Ellipsoid::clear_ison() {
  ison_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Ellipsoid::_internal_ison() const {
  return ison_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Ellipsoid::ison() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Ellipsoid.isOn)
  return _internal_ison();
}
inline void VizMessage_Ellipsoid::_internal_set_ison(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ison_ = value;
}
inline void VizMessage_Ellipsoid::set_ison(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ison(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Ellipsoid.isOn)
}

// int32 useBodyFrame = 2;
inline void VizMessage_Ellipsoid::clear_usebodyframe() {
  usebodyframe_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Ellipsoid::_internal_usebodyframe() const {
  return usebodyframe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Ellipsoid::usebodyframe() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Ellipsoid.useBodyFrame)
  return _internal_usebodyframe();
}
inline void VizMessage_Ellipsoid::_internal_set_usebodyframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usebodyframe_ = value;
}
inline void VizMessage_Ellipsoid::set_usebodyframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usebodyframe(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Ellipsoid.useBodyFrame)
}

// repeated double position = 3;
inline int VizMessage_Ellipsoid::_internal_position_size() const {
  return position_.size();
}
inline int VizMessage_Ellipsoid::position_size() const {
  return _internal_position_size();
}
inline void VizMessage_Ellipsoid::clear_position() {
  position_.Clear();
}
inline double VizMessage_Ellipsoid::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VizMessage_Ellipsoid::position(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Ellipsoid.position)
  return _internal_position(index);
}
inline void VizMessage_Ellipsoid::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Ellipsoid.position)
}
inline void VizMessage_Ellipsoid::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VizMessage_Ellipsoid::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Ellipsoid.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Ellipsoid::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Ellipsoid::position() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Ellipsoid.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Ellipsoid::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Ellipsoid::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Ellipsoid.position)
  return _internal_mutable_position();
}

// repeated double semiMajorAxes = 4;
inline int VizMessage_Ellipsoid::_internal_semimajoraxes_size() const {
  return semimajoraxes_.size();
}
inline int VizMessage_Ellipsoid::semimajoraxes_size() const {
  return _internal_semimajoraxes_size();
}
inline void VizMessage_Ellipsoid::clear_semimajoraxes() {
  semimajoraxes_.Clear();
}
inline double VizMessage_Ellipsoid::_internal_semimajoraxes(int index) const {
  return semimajoraxes_.Get(index);
}
inline double VizMessage_Ellipsoid::semimajoraxes(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Ellipsoid.semiMajorAxes)
  return _internal_semimajoraxes(index);
}
inline void VizMessage_Ellipsoid::set_semimajoraxes(int index, double value) {
  semimajoraxes_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Ellipsoid.semiMajorAxes)
}
inline void VizMessage_Ellipsoid::_internal_add_semimajoraxes(double value) {
  semimajoraxes_.Add(value);
}
inline void VizMessage_Ellipsoid::add_semimajoraxes(double value) {
  _internal_add_semimajoraxes(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Ellipsoid.semiMajorAxes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Ellipsoid::_internal_semimajoraxes() const {
  return semimajoraxes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VizMessage_Ellipsoid::semimajoraxes() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Ellipsoid.semiMajorAxes)
  return _internal_semimajoraxes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Ellipsoid::_internal_mutable_semimajoraxes() {
  return &semimajoraxes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VizMessage_Ellipsoid::mutable_semimajoraxes() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Ellipsoid.semiMajorAxes)
  return _internal_mutable_semimajoraxes();
}

// repeated int32 color = 5;
inline int VizMessage_Ellipsoid::_internal_color_size() const {
  return color_.size();
}
inline int VizMessage_Ellipsoid::color_size() const {
  return _internal_color_size();
}
inline void VizMessage_Ellipsoid::clear_color() {
  color_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Ellipsoid::_internal_color(int index) const {
  return color_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Ellipsoid::color(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Ellipsoid.color)
  return _internal_color(index);
}
inline void VizMessage_Ellipsoid::set_color(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Ellipsoid.color)
}
inline void VizMessage_Ellipsoid::_internal_add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  color_.Add(value);
}
inline void VizMessage_Ellipsoid::add_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.Ellipsoid.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Ellipsoid::_internal_color() const {
  return color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VizMessage_Ellipsoid::color() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.Ellipsoid.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Ellipsoid::_internal_mutable_color() {
  return &color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VizMessage_Ellipsoid::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.Ellipsoid.color)
  return _internal_mutable_color();
}

// int32 showGridLines = 6;
inline void VizMessage_Ellipsoid::clear_showgridlines() {
  showgridlines_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Ellipsoid::_internal_showgridlines() const {
  return showgridlines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VizMessage_Ellipsoid::showgridlines() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.Ellipsoid.showGridLines)
  return _internal_showgridlines();
}
inline void VizMessage_Ellipsoid::_internal_set_showgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  showgridlines_ = value;
}
inline void VizMessage_Ellipsoid::set_showgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_showgridlines(value);
  // @@protoc_insertion_point(field_set:vizProtobufferMessage.VizMessage.Ellipsoid.showGridLines)
}

// -------------------------------------------------------------------

// VizMessage

// .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
inline bool VizMessage::_internal_has_currenttime() const {
  return this != internal_default_instance() && currenttime_ != nullptr;
}
inline bool VizMessage::has_currenttime() const {
  return _internal_has_currenttime();
}
inline void VizMessage::clear_currenttime() {
  if (GetArenaForAllocation() == nullptr && currenttime_ != nullptr) {
    delete currenttime_;
  }
  currenttime_ = nullptr;
}
inline const ::vizProtobufferMessage::VizMessage_TimeStamp& VizMessage::_internal_currenttime() const {
  const ::vizProtobufferMessage::VizMessage_TimeStamp* p = currenttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::vizProtobufferMessage::VizMessage_TimeStamp&>(
      ::vizProtobufferMessage::_VizMessage_TimeStamp_default_instance_);
}
inline const ::vizProtobufferMessage::VizMessage_TimeStamp& VizMessage::currenttime() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.currentTime)
  return _internal_currenttime();
}
inline void VizMessage::unsafe_arena_set_allocated_currenttime(
    ::vizProtobufferMessage::VizMessage_TimeStamp* currenttime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currenttime_);
  }
  currenttime_ = currenttime;
  if (currenttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vizProtobufferMessage.VizMessage.currentTime)
}
inline ::vizProtobufferMessage::VizMessage_TimeStamp* VizMessage::release_currenttime() {
  
  ::vizProtobufferMessage::VizMessage_TimeStamp* temp = currenttime_;
  currenttime_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vizProtobufferMessage::VizMessage_TimeStamp* VizMessage::unsafe_arena_release_currenttime() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.currentTime)
  
  ::vizProtobufferMessage::VizMessage_TimeStamp* temp = currenttime_;
  currenttime_ = nullptr;
  return temp;
}
inline ::vizProtobufferMessage::VizMessage_TimeStamp* VizMessage::_internal_mutable_currenttime() {
  
  if (currenttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::vizProtobufferMessage::VizMessage_TimeStamp>(GetArenaForAllocation());
    currenttime_ = p;
  }
  return currenttime_;
}
inline ::vizProtobufferMessage::VizMessage_TimeStamp* VizMessage::mutable_currenttime() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.currentTime)
  return _internal_mutable_currenttime();
}
inline void VizMessage::set_allocated_currenttime(::vizProtobufferMessage::VizMessage_TimeStamp* currenttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete currenttime_;
  }
  if (currenttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vizProtobufferMessage::VizMessage_TimeStamp>::GetOwningArena(currenttime);
    if (message_arena != submessage_arena) {
      currenttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currenttime, submessage_arena);
    }
    
  } else {
    
  }
  currenttime_ = currenttime;
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.currentTime)
}

// repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
inline int VizMessage::_internal_celestialbodies_size() const {
  return celestialbodies_.size();
}
inline int VizMessage::celestialbodies_size() const {
  return _internal_celestialbodies_size();
}
inline void VizMessage::clear_celestialbodies() {
  celestialbodies_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_CelestialBody* VizMessage::mutable_celestialbodies(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.celestialBodies)
  return celestialbodies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody >*
VizMessage::mutable_celestialbodies() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.celestialBodies)
  return &celestialbodies_;
}
inline const ::vizProtobufferMessage::VizMessage_CelestialBody& VizMessage::_internal_celestialbodies(int index) const {
  return celestialbodies_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_CelestialBody& VizMessage::celestialbodies(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.celestialBodies)
  return _internal_celestialbodies(index);
}
inline ::vizProtobufferMessage::VizMessage_CelestialBody* VizMessage::_internal_add_celestialbodies() {
  return celestialbodies_.Add();
}
inline ::vizProtobufferMessage::VizMessage_CelestialBody* VizMessage::add_celestialbodies() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.celestialBodies)
  return _internal_add_celestialbodies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CelestialBody >&
VizMessage::celestialbodies() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.celestialBodies)
  return celestialbodies_;
}

// repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
inline int VizMessage::_internal_spacecraft_size() const {
  return spacecraft_.size();
}
inline int VizMessage::spacecraft_size() const {
  return _internal_spacecraft_size();
}
inline void VizMessage::clear_spacecraft() {
  spacecraft_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_Spacecraft* VizMessage::mutable_spacecraft(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.spacecraft)
  return spacecraft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft >*
VizMessage::mutable_spacecraft() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.spacecraft)
  return &spacecraft_;
}
inline const ::vizProtobufferMessage::VizMessage_Spacecraft& VizMessage::_internal_spacecraft(int index) const {
  return spacecraft_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_Spacecraft& VizMessage::spacecraft(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.spacecraft)
  return _internal_spacecraft(index);
}
inline ::vizProtobufferMessage::VizMessage_Spacecraft* VizMessage::_internal_add_spacecraft() {
  return spacecraft_.Add();
}
inline ::vizProtobufferMessage::VizMessage_Spacecraft* VizMessage::add_spacecraft() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.spacecraft)
  return _internal_add_spacecraft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Spacecraft >&
VizMessage::spacecraft() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.spacecraft)
  return spacecraft_;
}

// repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
inline int VizMessage::_internal_cameras_size() const {
  return cameras_.size();
}
inline int VizMessage::cameras_size() const {
  return _internal_cameras_size();
}
inline void VizMessage::clear_cameras() {
  cameras_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_CameraConfig* VizMessage::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.cameras)
  return cameras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig >*
VizMessage::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.cameras)
  return &cameras_;
}
inline const ::vizProtobufferMessage::VizMessage_CameraConfig& VizMessage::_internal_cameras(int index) const {
  return cameras_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_CameraConfig& VizMessage::cameras(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.cameras)
  return _internal_cameras(index);
}
inline ::vizProtobufferMessage::VizMessage_CameraConfig* VizMessage::_internal_add_cameras() {
  return cameras_.Add();
}
inline ::vizProtobufferMessage::VizMessage_CameraConfig* VizMessage::add_cameras() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.cameras)
  return _internal_add_cameras();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_CameraConfig >&
VizMessage::cameras() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.cameras)
  return cameras_;
}

// .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
inline bool VizMessage::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool VizMessage::has_settings() const {
  return _internal_has_settings();
}
inline void VizMessage::clear_settings() {
  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::vizProtobufferMessage::VizMessage_VizSettingsPb& VizMessage::_internal_settings() const {
  const ::vizProtobufferMessage::VizMessage_VizSettingsPb* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::vizProtobufferMessage::VizMessage_VizSettingsPb&>(
      ::vizProtobufferMessage::_VizMessage_VizSettingsPb_default_instance_);
}
inline const ::vizProtobufferMessage::VizMessage_VizSettingsPb& VizMessage::settings() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.settings)
  return _internal_settings();
}
inline void VizMessage::unsafe_arena_set_allocated_settings(
    ::vizProtobufferMessage::VizMessage_VizSettingsPb* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vizProtobufferMessage.VizMessage.settings)
}
inline ::vizProtobufferMessage::VizMessage_VizSettingsPb* VizMessage::release_settings() {
  
  ::vizProtobufferMessage::VizMessage_VizSettingsPb* temp = settings_;
  settings_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vizProtobufferMessage::VizMessage_VizSettingsPb* VizMessage::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.settings)
  
  ::vizProtobufferMessage::VizMessage_VizSettingsPb* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::vizProtobufferMessage::VizMessage_VizSettingsPb* VizMessage::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::vizProtobufferMessage::VizMessage_VizSettingsPb>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::vizProtobufferMessage::VizMessage_VizSettingsPb* VizMessage::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.settings)
  return _internal_mutable_settings();
}
inline void VizMessage::set_allocated_settings(::vizProtobufferMessage::VizMessage_VizSettingsPb* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vizProtobufferMessage::VizMessage_VizSettingsPb>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.settings)
}

// .vizProtobufferMessage.VizMessage.EpochDateTime epoch = 8;
inline bool VizMessage::_internal_has_epoch() const {
  return this != internal_default_instance() && epoch_ != nullptr;
}
inline bool VizMessage::has_epoch() const {
  return _internal_has_epoch();
}
inline void VizMessage::clear_epoch() {
  if (GetArenaForAllocation() == nullptr && epoch_ != nullptr) {
    delete epoch_;
  }
  epoch_ = nullptr;
}
inline const ::vizProtobufferMessage::VizMessage_EpochDateTime& VizMessage::_internal_epoch() const {
  const ::vizProtobufferMessage::VizMessage_EpochDateTime* p = epoch_;
  return p != nullptr ? *p : reinterpret_cast<const ::vizProtobufferMessage::VizMessage_EpochDateTime&>(
      ::vizProtobufferMessage::_VizMessage_EpochDateTime_default_instance_);
}
inline const ::vizProtobufferMessage::VizMessage_EpochDateTime& VizMessage::epoch() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.epoch)
  return _internal_epoch();
}
inline void VizMessage::unsafe_arena_set_allocated_epoch(
    ::vizProtobufferMessage::VizMessage_EpochDateTime* epoch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_);
  }
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vizProtobufferMessage.VizMessage.epoch)
}
inline ::vizProtobufferMessage::VizMessage_EpochDateTime* VizMessage::release_epoch() {
  
  ::vizProtobufferMessage::VizMessage_EpochDateTime* temp = epoch_;
  epoch_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vizProtobufferMessage::VizMessage_EpochDateTime* VizMessage::unsafe_arena_release_epoch() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.epoch)
  
  ::vizProtobufferMessage::VizMessage_EpochDateTime* temp = epoch_;
  epoch_ = nullptr;
  return temp;
}
inline ::vizProtobufferMessage::VizMessage_EpochDateTime* VizMessage::_internal_mutable_epoch() {
  
  if (epoch_ == nullptr) {
    auto* p = CreateMaybeMessage<::vizProtobufferMessage::VizMessage_EpochDateTime>(GetArenaForAllocation());
    epoch_ = p;
  }
  return epoch_;
}
inline ::vizProtobufferMessage::VizMessage_EpochDateTime* VizMessage::mutable_epoch() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.epoch)
  return _internal_mutable_epoch();
}
inline void VizMessage::set_allocated_epoch(::vizProtobufferMessage::VizMessage_EpochDateTime* epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete epoch_;
  }
  if (epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vizProtobufferMessage::VizMessage_EpochDateTime>::GetOwningArena(epoch);
    if (message_arena != submessage_arena) {
      epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch, submessage_arena);
    }
    
  } else {
    
  }
  epoch_ = epoch;
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.epoch)
}

// repeated .vizProtobufferMessage.VizMessage.Location locations = 9;
inline int VizMessage::_internal_locations_size() const {
  return locations_.size();
}
inline int VizMessage::locations_size() const {
  return _internal_locations_size();
}
inline void VizMessage::clear_locations() {
  locations_.Clear();
}
inline ::vizProtobufferMessage::VizMessage_Location* VizMessage::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.locations)
  return locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Location >*
VizMessage::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:vizProtobufferMessage.VizMessage.locations)
  return &locations_;
}
inline const ::vizProtobufferMessage::VizMessage_Location& VizMessage::_internal_locations(int index) const {
  return locations_.Get(index);
}
inline const ::vizProtobufferMessage::VizMessage_Location& VizMessage::locations(int index) const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.locations)
  return _internal_locations(index);
}
inline ::vizProtobufferMessage::VizMessage_Location* VizMessage::_internal_add_locations() {
  return locations_.Add();
}
inline ::vizProtobufferMessage::VizMessage_Location* VizMessage::add_locations() {
  // @@protoc_insertion_point(field_add:vizProtobufferMessage.VizMessage.locations)
  return _internal_add_locations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vizProtobufferMessage::VizMessage_Location >&
VizMessage::locations() const {
  // @@protoc_insertion_point(field_list:vizProtobufferMessage.VizMessage.locations)
  return locations_;
}

// .vizProtobufferMessage.VizMessage.LiveVizSettingsPb liveSettings = 10;
inline bool VizMessage::_internal_has_livesettings() const {
  return this != internal_default_instance() && livesettings_ != nullptr;
}
inline bool VizMessage::has_livesettings() const {
  return _internal_has_livesettings();
}
inline void VizMessage::clear_livesettings() {
  if (GetArenaForAllocation() == nullptr && livesettings_ != nullptr) {
    delete livesettings_;
  }
  livesettings_ = nullptr;
}
inline const ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb& VizMessage::_internal_livesettings() const {
  const ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* p = livesettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb&>(
      ::vizProtobufferMessage::_VizMessage_LiveVizSettingsPb_default_instance_);
}
inline const ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb& VizMessage::livesettings() const {
  // @@protoc_insertion_point(field_get:vizProtobufferMessage.VizMessage.liveSettings)
  return _internal_livesettings();
}
inline void VizMessage::unsafe_arena_set_allocated_livesettings(
    ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* livesettings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(livesettings_);
  }
  livesettings_ = livesettings;
  if (livesettings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vizProtobufferMessage.VizMessage.liveSettings)
}
inline ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* VizMessage::release_livesettings() {
  
  ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* temp = livesettings_;
  livesettings_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* VizMessage::unsafe_arena_release_livesettings() {
  // @@protoc_insertion_point(field_release:vizProtobufferMessage.VizMessage.liveSettings)
  
  ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* temp = livesettings_;
  livesettings_ = nullptr;
  return temp;
}
inline ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* VizMessage::_internal_mutable_livesettings() {
  
  if (livesettings_ == nullptr) {
    auto* p = CreateMaybeMessage<::vizProtobufferMessage::VizMessage_LiveVizSettingsPb>(GetArenaForAllocation());
    livesettings_ = p;
  }
  return livesettings_;
}
inline ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* VizMessage::mutable_livesettings() {
  // @@protoc_insertion_point(field_mutable:vizProtobufferMessage.VizMessage.liveSettings)
  return _internal_mutable_livesettings();
}
inline void VizMessage::set_allocated_livesettings(::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* livesettings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete livesettings_;
  }
  if (livesettings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vizProtobufferMessage::VizMessage_LiveVizSettingsPb>::GetOwningArena(livesettings);
    if (message_arena != submessage_arena) {
      livesettings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, livesettings, submessage_arena);
    }
    
  } else {
    
  }
  livesettings_ = livesettings;
  // @@protoc_insertion_point(field_set_allocated:vizProtobufferMessage.VizMessage.liveSettings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vizProtobufferMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vizMessage_2eproto
