// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vizMessage.proto

#include "vizMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vizProtobufferMessage {
constexpr VizMessage_EpochDateTime::VizMessage_EpochDateTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : year_(0)
  , month_(0)
  , day_(0)
  , hours_(0)
  , seconds_(0)
  , minutes_(0){}
struct VizMessage_EpochDateTimeDefaultTypeInternal {
  constexpr VizMessage_EpochDateTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_EpochDateTimeDefaultTypeInternal() {}
  union {
    VizMessage_EpochDateTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_EpochDateTimeDefaultTypeInternal _VizMessage_EpochDateTime_default_instance_;
constexpr VizMessage_TimeStamp::VizMessage_TimeStamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : framenumber_(int64_t{0})
  , simtimeelapsed_(0){}
struct VizMessage_TimeStampDefaultTypeInternal {
  constexpr VizMessage_TimeStampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_TimeStampDefaultTypeInternal() {}
  union {
    VizMessage_TimeStamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_TimeStampDefaultTypeInternal _VizMessage_TimeStamp_default_instance_;
constexpr VizMessage_CelestialBody::VizMessage_CelestialBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , velocity_()
  , rotation_()
  , bodyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modeldictionarykey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mu_(0)
  , radiuseq_(0)
  , radiusratio_(0){}
struct VizMessage_CelestialBodyDefaultTypeInternal {
  constexpr VizMessage_CelestialBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_CelestialBodyDefaultTypeInternal() {}
  union {
    VizMessage_CelestialBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_CelestialBodyDefaultTypeInternal _VizMessage_CelestialBody_default_instance_;
constexpr VizMessage_Spacecraft::VizMessage_Spacecraft(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , velocity_()
  , rotation_()
  , reactionwheels_()
  , thrusters_()
  , css_()
  , genericsensors_()
  , transceivers_()
  , storagedevices_()
  , lights_()
  , oscorbitlinecolor_()
  , _oscorbitlinecolor_cached_byte_size_()
  , truetrajectorylinecolor_()
  , _truetrajectorylinecolor_cached_byte_size_()
  , multispheres_()
  , ellipsoids_()
  , spacecraftname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spacecraftsprite_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modeldictionarykey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logotexture_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parentspacecraftname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VizMessage_SpacecraftDefaultTypeInternal {
  constexpr VizMessage_SpacecraftDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_SpacecraftDefaultTypeInternal() {}
  union {
    VizMessage_Spacecraft _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_SpacecraftDefaultTypeInternal _VizMessage_Spacecraft_default_instance_;
constexpr VizMessage_ReactionWheel::VizMessage_ReactionWheel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , spinaxisvector_()
  , wheelspeed_(0)
  , wheeltorque_(0)
  , maxspeed_(0)
  , maxtorque_(0){}
struct VizMessage_ReactionWheelDefaultTypeInternal {
  constexpr VizMessage_ReactionWheelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_ReactionWheelDefaultTypeInternal() {}
  union {
    VizMessage_ReactionWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_ReactionWheelDefaultTypeInternal _VizMessage_ReactionWheel_default_instance_;
constexpr VizMessage_Thruster::VizMessage_Thruster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , thrustvector_()
  , color_()
  , _color_cached_byte_size_()
  , thrustertag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currentthrust_(0)
  , maxthrust_(0){}
struct VizMessage_ThrusterDefaultTypeInternal {
  constexpr VizMessage_ThrusterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_ThrusterDefaultTypeInternal() {}
  union {
    VizMessage_Thruster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_ThrusterDefaultTypeInternal _VizMessage_Thruster_default_instance_;
constexpr VizMessage_CoarseSunSensor::VizMessage_CoarseSunSensor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , normalvector_()
  , fieldofview_(0)
  , currentmsmt_(0)
  , maxmsmt_(0)
  , minmsmt_(0)
  , cssgroupid_(0){}
struct VizMessage_CoarseSunSensorDefaultTypeInternal {
  constexpr VizMessage_CoarseSunSensorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_CoarseSunSensorDefaultTypeInternal() {}
  union {
    VizMessage_CoarseSunSensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_CoarseSunSensorDefaultTypeInternal _VizMessage_CoarseSunSensor_default_instance_;
constexpr VizMessage_GenericSensor::VizMessage_GenericSensor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , fieldofview_()
  , normalvector_()
  , color_()
  , _color_cached_byte_size_()
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ishidden_(false)
  , activitystatus_(0)
  , size_(0){}
struct VizMessage_GenericSensorDefaultTypeInternal {
  constexpr VizMessage_GenericSensorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_GenericSensorDefaultTypeInternal() {}
  union {
    VizMessage_GenericSensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_GenericSensorDefaultTypeInternal _VizMessage_GenericSensor_default_instance_;
constexpr VizMessage_GenericStorage::VizMessage_GenericStorage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_()
  , _color_cached_byte_size_()
  , thresholds_()
  , _thresholds_cached_byte_size_()
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , units_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currentvalue_(0)
  , maxvalue_(0){}
struct VizMessage_GenericStorageDefaultTypeInternal {
  constexpr VizMessage_GenericStorageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_GenericStorageDefaultTypeInternal() {}
  union {
    VizMessage_GenericStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_GenericStorageDefaultTypeInternal _VizMessage_GenericStorage_default_instance_;
constexpr VizMessage_Light::VizMessage_Light(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , normalvector_()
  , color_()
  , _color_cached_byte_size_()
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fieldofview_(0)
  , range_(0)
  , lighton_(0)
  , showlightmarker_(0)
  , intensity_(0)
  , markerdiameter_(0)
  , gammasaturation_(0)
  , lensflarebrightness_(0)
  , lensflarefadespeed_(0)
  , showlensflare_(0){}
struct VizMessage_LightDefaultTypeInternal {
  constexpr VizMessage_LightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_LightDefaultTypeInternal() {}
  union {
    VizMessage_Light _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_LightDefaultTypeInternal _VizMessage_Light_default_instance_;
constexpr VizMessage_Transceiver::VizMessage_Transceiver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , normalvector_()
  , color_()
  , _color_cached_byte_size_()
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fieldofview_(0)
  , ishidden_(false)
  , transmitstatus_(0)
  , animationspeed_(0){}
struct VizMessage_TransceiverDefaultTypeInternal {
  constexpr VizMessage_TransceiverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_TransceiverDefaultTypeInternal() {}
  union {
    VizMessage_Transceiver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_TransceiverDefaultTypeInternal _VizMessage_Transceiver_default_instance_;
constexpr VizMessage_CameraConfig::VizMessage_CameraConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resolution_()
  , _resolution_cached_byte_size_()
  , camerapos_b_()
  , cameradir_b_()
  , parentname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , skybox_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cameraid_(int64_t{0})
  , fieldofview_(0)
  , renderrate_(uint64_t{0u})
  , postprocessingon_(int64_t{0})
  , ppfocusdistance_(0)
  , ppaperture_(0)
  , ppfocallength_(0)
  , ppmaxblursize_(int64_t{0})
  , updatecameraparameters_(false){}
struct VizMessage_CameraConfigDefaultTypeInternal {
  constexpr VizMessage_CameraConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_CameraConfigDefaultTypeInternal() {}
  union {
    VizMessage_CameraConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_CameraConfigDefaultTypeInternal _VizMessage_CameraConfig_default_instance_;
constexpr VizMessage_PointLine::VizMessage_PointLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linecolor_()
  , _linecolor_cached_byte_size_()
  , frombodyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tobodyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VizMessage_PointLineDefaultTypeInternal {
  constexpr VizMessage_PointLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_PointLineDefaultTypeInternal() {}
  union {
    VizMessage_PointLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_PointLineDefaultTypeInternal _VizMessage_PointLine_default_instance_;
constexpr VizMessage_KeepOutInCone::VizMessage_KeepOutInCone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , normalvector_()
  , conecolor_()
  , _conecolor_cached_byte_size_()
  , frombodyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tobodyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , conename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , incidenceangle_(0)
  , coneheight_(0)
  , iskeepin_(false){}
struct VizMessage_KeepOutInConeDefaultTypeInternal {
  constexpr VizMessage_KeepOutInConeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_KeepOutInConeDefaultTypeInternal() {}
  union {
    VizMessage_KeepOutInCone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_KeepOutInConeDefaultTypeInternal _VizMessage_KeepOutInCone_default_instance_;
constexpr VizMessage_StandardCameraSettings::VizMessage_StandardCameraSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pointingvector_()
  , position_()
  , spacecraftname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bodytarget_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , displayname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fieldofview_(0)
  , setmode_(0)
  , setview_(0){}
struct VizMessage_StandardCameraSettingsDefaultTypeInternal {
  constexpr VizMessage_StandardCameraSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_StandardCameraSettingsDefaultTypeInternal() {}
  union {
    VizMessage_StandardCameraSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_StandardCameraSettingsDefaultTypeInternal _VizMessage_StandardCameraSettings_default_instance_;
constexpr VizMessage_ActuatorSettings::VizMessage_ActuatorSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spacecraftname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , viewthrusterpanel_(0)
  , viewthrusterhud_(0)
  , viewrwpanel_(0)
  , viewrwhud_(0)
  , showthrusterlabels_(0)
  , showrwlabels_(0){}
struct VizMessage_ActuatorSettingsDefaultTypeInternal {
  constexpr VizMessage_ActuatorSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_ActuatorSettingsDefaultTypeInternal() {}
  union {
    VizMessage_ActuatorSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_ActuatorSettingsDefaultTypeInternal _VizMessage_ActuatorSettings_default_instance_;
constexpr VizMessage_InstrumentSettings::VizMessage_InstrumentSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spacecraftname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , viewcsspanel_(0)
  , viewcsscoverage_(0)
  , showcsslabels_(0)
  , viewcssboresight_(0)
  , showgenericsensorlabels_(0)
  , showtransceiverlabels_(0)
  , showtransceiverfrustrum_(0)
  , showgenericstoragepanel_(0)
  , showmultispherelabels_(0){}
struct VizMessage_InstrumentSettingsDefaultTypeInternal {
  constexpr VizMessage_InstrumentSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_InstrumentSettingsDefaultTypeInternal() {}
  union {
    VizMessage_InstrumentSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_InstrumentSettingsDefaultTypeInternal _VizMessage_InstrumentSettings_default_instance_;
constexpr VizMessage_CustomModel::VizMessage_CustomModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : simbodiestomodify_()
  , offset_()
  , rotation_()
  , scale_()
  , color_()
  , _color_cached_byte_size_()
  , modelpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customtexturepath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , normalmappath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shader_(0){}
struct VizMessage_CustomModelDefaultTypeInternal {
  constexpr VizMessage_CustomModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_CustomModelDefaultTypeInternal() {}
  union {
    VizMessage_CustomModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_CustomModelDefaultTypeInternal _VizMessage_CustomModel_default_instance_;
constexpr VizMessage_LiveVizSettingsPb::VizMessage_LiveVizSettingsPb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : targetlines_()
  , relativeorbitchief_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VizMessage_LiveVizSettingsPbDefaultTypeInternal {
  constexpr VizMessage_LiveVizSettingsPbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_LiveVizSettingsPbDefaultTypeInternal() {}
  union {
    VizMessage_LiveVizSettingsPb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_LiveVizSettingsPbDefaultTypeInternal _VizMessage_LiveVizSettingsPb_default_instance_;
constexpr VizMessage_VizSettingsPb::VizMessage_VizSettingsPb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pointlines_()
  , keepoutincones_()
  , standardcamerasettings_()
  , instrumentsettings_()
  , actuatorsettings_()
  , custommodels_()
  , defaultthrustercolor_()
  , _defaultthrustercolor_cached_byte_size_()
  , skybox_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , defaultspacecraftsprite_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maincameratarget_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ambient_(0)
  , orbitlineson_(0)
  , spacecraftcson_(0)
  , planetcson_(0)
  , viewcameraboresighthud_(0)
  , viewcameraconehud_(0)
  , showcslabels_(0)
  , showcelestialbodylabels_(0)
  , showspacecraftlabels_(0)
  , customguiscale_(0)
  , showcameralabels_(0)
  , showspacecraftassprites_(0)
  , showcelestialbodiesassprites_(0)
  , show24hrclock_(0)
  , keyboardangularrate_(0)
  , keyboardzoomrate_(0)
  , showdataratedisplay_(0)
  , orbitlinesegments_(0)
  , defaultthrusterplumelifescalar_(0)
  , relativeorbitrange_(0)
  , showhillframe_(0)
  , showvelocityframe_(0)
  , relativeorbitframe_(0)
  , spacecraftshadowbrightness_(0)
  , spacecraftsizemultiplier_(0)
  , showlocationcommlines_(0)
  , showlocationcones_(0)
  , showlocationlabels_(0)
  , truetrajectorylineson_(0)
  , atmospheresoff_(0)
  , scviewtoplanetviewboundarymultiplier_(0)
  , sunintensity_(0)
  , planetviewtohelioviewboundarymultiplier_(0)
  , attenuatesunlightwithdistance_(0)
  , celestialbodyhelioviewsizemultiplier_(0)
  , showlightlabels_(0)
  , showmissiontime_(0)
  , spacecrafthelioviewsizemultiplier_(0)
  , forcestartatspacecraftlocalview_(0){}
struct VizMessage_VizSettingsPbDefaultTypeInternal {
  constexpr VizMessage_VizSettingsPbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_VizSettingsPbDefaultTypeInternal() {}
  union {
    VizMessage_VizSettingsPb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_VizSettingsPbDefaultTypeInternal _VizMessage_VizSettingsPb_default_instance_;
constexpr VizMessage_MultiSphere::VizMessage_MultiSphere(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , positivecolor_()
  , _positivecolor_cached_byte_size_()
  , negativecolor_()
  , _negativecolor_cached_byte_size_()
  , radius_(0)
  , currentvalue_(0)
  , ison_(0)
  , neutralopacity_(0)
  , maxvalue_(0){}
struct VizMessage_MultiSphereDefaultTypeInternal {
  constexpr VizMessage_MultiSphereDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_MultiSphereDefaultTypeInternal() {}
  union {
    VizMessage_MultiSphere _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_MultiSphereDefaultTypeInternal _VizMessage_MultiSphere_default_instance_;
constexpr VizMessage_Location::VizMessage_Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_gp_p_()
  , ghat_p_()
  , color_()
  , _color_cached_byte_size_()
  , stationname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parentbodyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fieldofview_(0)
  , range_(0){}
struct VizMessage_LocationDefaultTypeInternal {
  constexpr VizMessage_LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_LocationDefaultTypeInternal() {}
  union {
    VizMessage_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_LocationDefaultTypeInternal _VizMessage_Location_default_instance_;
constexpr VizMessage_Ellipsoid::VizMessage_Ellipsoid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , semimajoraxes_()
  , color_()
  , _color_cached_byte_size_()
  , ison_(0)
  , usebodyframe_(0)
  , showgridlines_(0){}
struct VizMessage_EllipsoidDefaultTypeInternal {
  constexpr VizMessage_EllipsoidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessage_EllipsoidDefaultTypeInternal() {}
  union {
    VizMessage_Ellipsoid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessage_EllipsoidDefaultTypeInternal _VizMessage_Ellipsoid_default_instance_;
constexpr VizMessage::VizMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : celestialbodies_()
  , spacecraft_()
  , cameras_()
  , locations_()
  , currenttime_(nullptr)
  , settings_(nullptr)
  , epoch_(nullptr)
  , livesettings_(nullptr){}
struct VizMessageDefaultTypeInternal {
  constexpr VizMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VizMessageDefaultTypeInternal() {}
  union {
    VizMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VizMessageDefaultTypeInternal _VizMessage_default_instance_;
}  // namespace vizProtobufferMessage
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vizMessage_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vizMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vizMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vizMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_EpochDateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_EpochDateTime, year_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_EpochDateTime, month_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_EpochDateTime, day_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_EpochDateTime, hours_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_EpochDateTime, minutes_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_EpochDateTime, seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_TimeStamp, framenumber_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_TimeStamp, simtimeelapsed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, bodyname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, velocity_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, rotation_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, mu_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, radiuseq_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, radiusratio_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CelestialBody, modeldictionarykey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, spacecraftname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, velocity_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, rotation_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, reactionwheels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, thrusters_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, css_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, genericsensors_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, spacecraftsprite_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, transceivers_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, storagedevices_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, lights_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, modeldictionarykey_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, oscorbitlinecolor_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, truetrajectorylinecolor_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, logotexture_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, multispheres_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, ellipsoids_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Spacecraft, parentspacecraftname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, spinaxisvector_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, wheelspeed_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, wheeltorque_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, maxspeed_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ReactionWheel, maxtorque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, thrustvector_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, currentthrust_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, maxthrust_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, thrustertag_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Thruster, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, fieldofview_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, normalvector_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, currentmsmt_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, maxmsmt_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, cssgroupid_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CoarseSunSensor, minmsmt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericSensor, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericSensor, fieldofview_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericSensor, normalvector_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericSensor, ishidden_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericSensor, activitystatus_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericSensor, size_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericSensor, color_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericSensor, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericStorage, label_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericStorage, currentvalue_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericStorage, maxvalue_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericStorage, units_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericStorage, color_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_GenericStorage, thresholds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, label_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, fieldofview_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, normalvector_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, lighton_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, range_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, intensity_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, showlightmarker_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, markerdiameter_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, color_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, gammasaturation_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, showlensflare_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, lensflarebrightness_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Light, lensflarefadespeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Transceiver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Transceiver, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Transceiver, fieldofview_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Transceiver, normalvector_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Transceiver, ishidden_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Transceiver, transmitstatus_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Transceiver, color_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Transceiver, label_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Transceiver, animationspeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, cameraid_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, parentname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, fieldofview_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, resolution_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, updatecameraparameters_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, camerapos_b_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, cameradir_b_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, renderrate_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, skybox_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, postprocessingon_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, ppfocusdistance_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, ppaperture_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, ppfocallength_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CameraConfig, ppmaxblursize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PointLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PointLine, frombodyname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PointLine, tobodyname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_PointLine, linecolor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, iskeepin_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, normalvector_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, incidenceangle_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, coneheight_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, frombodyname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, tobodyname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, conecolor_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_KeepOutInCone, conename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StandardCameraSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StandardCameraSettings, spacecraftname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StandardCameraSettings, setmode_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StandardCameraSettings, fieldofview_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StandardCameraSettings, bodytarget_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StandardCameraSettings, setview_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StandardCameraSettings, pointingvector_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StandardCameraSettings, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_StandardCameraSettings, displayname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, spacecraftname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, viewthrusterpanel_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, viewthrusterhud_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, viewrwpanel_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, viewrwhud_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, showthrusterlabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_ActuatorSettings, showrwlabels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, spacecraftname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, viewcsspanel_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, viewcsscoverage_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, showcsslabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, viewcssboresight_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, showgenericsensorlabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, showtransceiverlabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, showtransceiverfrustrum_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, showgenericstoragepanel_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_InstrumentSettings, showmultispherelabels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, modelpath_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, simbodiestomodify_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, offset_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, rotation_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, scale_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, customtexturepath_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, normalmappath_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, shader_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_CustomModel, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_LiveVizSettingsPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_LiveVizSettingsPb, targetlines_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_LiveVizSettingsPb, relativeorbitchief_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, ambient_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, orbitlineson_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, spacecraftcson_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, planetcson_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, pointlines_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, keepoutincones_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, standardcamerasettings_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, instrumentsettings_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, actuatorsettings_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, skybox_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, custommodels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, viewcameraboresighthud_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, viewcameraconehud_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showcslabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showcelestialbodylabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showspacecraftlabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showcameralabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, customguiscale_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, defaultspacecraftsprite_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showspacecraftassprites_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showcelestialbodiesassprites_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, show24hrclock_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showdataratedisplay_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, keyboardangularrate_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, keyboardzoomrate_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, defaultthrustercolor_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, defaultthrusterplumelifescalar_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, orbitlinesegments_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, relativeorbitrange_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showhillframe_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showvelocityframe_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, relativeorbitframe_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, maincameratarget_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, spacecraftshadowbrightness_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, spacecraftsizemultiplier_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showlocationcommlines_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showlocationcones_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showlocationlabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, truetrajectorylineson_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, atmospheresoff_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, scviewtoplanetviewboundarymultiplier_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, planetviewtohelioviewboundarymultiplier_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, sunintensity_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, attenuatesunlightwithdistance_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showlightlabels_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, celestialbodyhelioviewsizemultiplier_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, showmissiontime_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, spacecrafthelioviewsizemultiplier_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_VizSettingsPb, forcestartatspacecraftlocalview_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_MultiSphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_MultiSphere, ison_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_MultiSphere, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_MultiSphere, radius_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_MultiSphere, currentvalue_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_MultiSphere, maxvalue_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_MultiSphere, positivecolor_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_MultiSphere, negativecolor_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_MultiSphere, neutralopacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Location, stationname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Location, parentbodyname_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Location, r_gp_p_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Location, ghat_p_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Location, fieldofview_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Location, color_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Location, range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Ellipsoid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Ellipsoid, ison_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Ellipsoid, usebodyframe_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Ellipsoid, position_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Ellipsoid, semimajoraxes_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Ellipsoid, color_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage_Ellipsoid, showgridlines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, currenttime_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, celestialbodies_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, spacecraft_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, cameras_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, settings_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, epoch_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, locations_),
  PROTOBUF_FIELD_OFFSET(::vizProtobufferMessage::VizMessage, livesettings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vizProtobufferMessage::VizMessage_EpochDateTime)},
  { 11, -1, sizeof(::vizProtobufferMessage::VizMessage_TimeStamp)},
  { 18, -1, sizeof(::vizProtobufferMessage::VizMessage_CelestialBody)},
  { 31, -1, sizeof(::vizProtobufferMessage::VizMessage_Spacecraft)},
  { 55, -1, sizeof(::vizProtobufferMessage::VizMessage_ReactionWheel)},
  { 66, -1, sizeof(::vizProtobufferMessage::VizMessage_Thruster)},
  { 77, -1, sizeof(::vizProtobufferMessage::VizMessage_CoarseSunSensor)},
  { 89, -1, sizeof(::vizProtobufferMessage::VizMessage_GenericSensor)},
  { 102, -1, sizeof(::vizProtobufferMessage::VizMessage_GenericStorage)},
  { 113, -1, sizeof(::vizProtobufferMessage::VizMessage_Light)},
  { 132, -1, sizeof(::vizProtobufferMessage::VizMessage_Transceiver)},
  { 145, -1, sizeof(::vizProtobufferMessage::VizMessage_CameraConfig)},
  { 164, -1, sizeof(::vizProtobufferMessage::VizMessage_PointLine)},
  { 172, -1, sizeof(::vizProtobufferMessage::VizMessage_KeepOutInCone)},
  { 186, -1, sizeof(::vizProtobufferMessage::VizMessage_StandardCameraSettings)},
  { 199, -1, sizeof(::vizProtobufferMessage::VizMessage_ActuatorSettings)},
  { 211, -1, sizeof(::vizProtobufferMessage::VizMessage_InstrumentSettings)},
  { 226, -1, sizeof(::vizProtobufferMessage::VizMessage_CustomModel)},
  { 240, -1, sizeof(::vizProtobufferMessage::VizMessage_LiveVizSettingsPb)},
  { 247, -1, sizeof(::vizProtobufferMessage::VizMessage_VizSettingsPb)},
  { 301, -1, sizeof(::vizProtobufferMessage::VizMessage_MultiSphere)},
  { 314, -1, sizeof(::vizProtobufferMessage::VizMessage_Location)},
  { 326, -1, sizeof(::vizProtobufferMessage::VizMessage_Ellipsoid)},
  { 337, -1, sizeof(::vizProtobufferMessage::VizMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_EpochDateTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_TimeStamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_CelestialBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_Spacecraft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_ReactionWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_Thruster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_CoarseSunSensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_GenericSensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_GenericStorage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_Light_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_Transceiver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_CameraConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_PointLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_KeepOutInCone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_StandardCameraSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_ActuatorSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_InstrumentSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_CustomModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_LiveVizSettingsPb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_VizSettingsPb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_MultiSphere_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_Ellipsoid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vizProtobufferMessage::_VizMessage_default_instance_),
};

const char descriptor_table_protodef_vizMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020vizMessage.proto\022\025vizProtobufferMessag"
  "e\"\3054\n\nVizMessage\022@\n\013currentTime\030\001 \001(\0132+."
  "vizProtobufferMessage.VizMessage.TimeSta"
  "mp\022H\n\017celestialBodies\030\002 \003(\0132/.vizProtobu"
  "fferMessage.VizMessage.CelestialBody\022@\n\n"
  "spacecraft\030\003 \003(\0132,.vizProtobufferMessage"
  ".VizMessage.Spacecraft\022\?\n\007cameras\030\004 \003(\0132"
  "..vizProtobufferMessage.VizMessage.Camer"
  "aConfig\022A\n\010settings\030\007 \001(\0132/.vizProtobuff"
  "erMessage.VizMessage.VizSettingsPb\022>\n\005ep"
  "och\030\010 \001(\0132/.vizProtobufferMessage.VizMes"
  "sage.EpochDateTime\022=\n\tlocations\030\t \003(\0132*."
  "vizProtobufferMessage.VizMessage.Locatio"
  "n\022I\n\014liveSettings\030\n \001(\01323.vizProtobuffer"
  "Message.VizMessage.LiveVizSettingsPb\032j\n\r"
  "EpochDateTime\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001"
  "(\005\022\013\n\003day\030\003 \001(\005\022\r\n\005hours\030\004 \001(\005\022\017\n\007minute"
  "s\030\005 \001(\005\022\017\n\007seconds\030\006 \001(\001\0328\n\tTimeStamp\022\023\n"
  "\013frameNumber\030\001 \001(\003\022\026\n\016simTimeElapsed\030\002 \001"
  "(\001\032\246\001\n\rCelestialBody\022\020\n\010bodyName\030\001 \001(\t\022\020"
  "\n\010position\030\002 \003(\001\022\020\n\010velocity\030\003 \003(\001\022\020\n\010ro"
  "tation\030\004 \003(\001\022\n\n\002mu\030\005 \001(\001\022\020\n\010radiusEq\030\006 \001"
  "(\001\022\023\n\013radiusRatio\030\007 \001(\001\022\032\n\022modelDictiona"
  "ryKey\030\010 \001(\t\032\336\006\n\nSpacecraft\022\026\n\016spacecraft"
  "Name\030\001 \001(\t\022\020\n\010position\030\002 \003(\001\022\020\n\010velocity"
  "\030\003 \003(\001\022\020\n\010rotation\030\004 \003(\001\022G\n\016reactionWhee"
  "ls\030\005 \003(\0132/.vizProtobufferMessage.VizMess"
  "age.ReactionWheel\022=\n\tthrusters\030\006 \003(\0132*.v"
  "izProtobufferMessage.VizMessage.Thruster"
  "\022>\n\003CSS\030\007 \003(\01321.vizProtobufferMessage.Vi"
  "zMessage.CoarseSunSensor\022G\n\016genericSenso"
  "rs\030\010 \003(\0132/.vizProtobufferMessage.VizMess"
  "age.GenericSensor\022\030\n\020spacecraftSprite\030\t "
  "\001(\t\022C\n\014transceivers\030\n \003(\0132-.vizProtobuff"
  "erMessage.VizMessage.Transceiver\022H\n\016stor"
  "ageDevices\030\013 \003(\01320.vizProtobufferMessage"
  ".VizMessage.GenericStorage\0227\n\006lights\030\014 \003"
  "(\0132\'.vizProtobufferMessage.VizMessage.Li"
  "ght\022\032\n\022modelDictionaryKey\030\r \001(\t\022\031\n\021oscOr"
  "bitLineColor\030\016 \003(\005\022\037\n\027trueTrajectoryLine"
  "Color\030\017 \003(\005\022\023\n\013logoTexture\030\020 \001(\t\022C\n\014mult"
  "iSpheres\030\021 \003(\0132-.vizProtobufferMessage.V"
  "izMessage.MultiSphere\022\?\n\nellipsoids\030\022 \003("
  "\0132+.vizProtobufferMessage.VizMessage.Ell"
  "ipsoid\022\034\n\024parentSpacecraftName\030\023 \001(\t\032\207\001\n"
  "\rReactionWheel\022\020\n\010position\030\002 \003(\001\022\026\n\016spin"
  "AxisVector\030\004 \003(\001\022\022\n\nwheelSpeed\030\005 \001(\001\022\023\n\013"
  "wheelTorque\030\006 \001(\001\022\020\n\010maxSpeed\030\007 \001(\001\022\021\n\tm"
  "axTorque\030\010 \001(\001\032\200\001\n\010Thruster\022\020\n\010position\030"
  "\002 \003(\001\022\024\n\014thrustVector\030\004 \003(\001\022\025\n\rcurrentTh"
  "rust\030\005 \001(\001\022\021\n\tmaxThrust\030\006 \001(\001\022\023\n\013thruste"
  "rTag\030\010 \001(\t\022\r\n\005color\030\t \003(\005\032\231\001\n\017CoarseSunS"
  "ensor\022\020\n\010position\030\002 \003(\001\022\023\n\013fieldOfView\030\003"
  " \001(\001\022\024\n\014normalVector\030\004 \003(\001\022\023\n\013currentMsm"
  "t\030\005 \001(\001\022\017\n\007maxMsmt\030\006 \001(\001\022\022\n\nCSSGroupID\030\007"
  " \001(\005\022\017\n\007minMsmt\030\010 \001(\001\032\242\001\n\rGenericSensor\022"
  "\020\n\010position\030\002 \003(\001\022\023\n\013fieldOfView\030\003 \003(\001\022\024"
  "\n\014normalVector\030\004 \003(\001\022\020\n\010isHidden\030\005 \001(\010\022\026"
  "\n\016activityStatus\030\006 \001(\005\022\014\n\004size\030\007 \001(\001\022\r\n\005"
  "color\030\010 \003(\005\022\r\n\005label\030\t \001(\t\032y\n\016GenericSto"
  "rage\022\r\n\005label\030\002 \001(\t\022\024\n\014currentValue\030\003 \001("
  "\001\022\020\n\010maxValue\030\004 \001(\001\022\r\n\005units\030\005 \001(\t\022\r\n\005co"
  "lor\030\006 \003(\005\022\022\n\nthresholds\030\007 \003(\005\032\257\002\n\005Light\022"
  "\r\n\005label\030\001 \001(\t\022\020\n\010position\030\002 \003(\001\022\023\n\013fiel"
  "dOfView\030\003 \001(\001\022\024\n\014normalVector\030\004 \003(\001\022\017\n\007l"
  "ightOn\030\005 \001(\005\022\r\n\005range\030\006 \001(\001\022\021\n\tintensity"
  "\030\007 \001(\001\022\027\n\017showLightMarker\030\010 \001(\005\022\026\n\016marke"
  "rDiameter\030\t \001(\001\022\r\n\005color\030\n \003(\005\022\027\n\017gammaS"
  "aturation\030\013 \001(\001\022\025\n\rshowLensFlare\030\014 \001(\005\022\033"
  "\n\023lensFlareBrightness\030\r \001(\001\022\032\n\022lensFlare"
  "FadeSpeed\030\016 \001(\001\032\252\001\n\013Transceiver\022\020\n\010posit"
  "ion\030\002 \003(\001\022\023\n\013fieldOfView\030\003 \001(\001\022\024\n\014normal"
  "Vector\030\004 \003(\001\022\020\n\010isHidden\030\005 \001(\010\022\026\n\016transm"
  "itStatus\030\006 \001(\005\022\r\n\005color\030\010 \003(\005\022\r\n\005label\030\t"
  " \001(\t\022\026\n\016animationSpeed\030\n \001(\005\032\300\002\n\014CameraC"
  "onfig\022\020\n\010cameraID\030\001 \001(\003\022\022\n\nparentName\030\002 "
  "\001(\t\022\023\n\013fieldOfView\030\003 \001(\001\022\022\n\nresolution\030\004"
  " \003(\003\022\036\n\026updateCameraParameters\030\005 \001(\010\022\023\n\013"
  "cameraPos_B\030\007 \003(\001\022\023\n\013cameraDir_B\030\010 \003(\001\022\022"
  "\n\nrenderRate\030\t \001(\004\022\016\n\006skybox\030\n \001(\t\022\030\n\020po"
  "stProcessingOn\030\013 \001(\003\022\027\n\017ppFocusDistance\030"
  "\014 \001(\001\022\022\n\nppAperture\030\r \001(\001\022\025\n\rppFocalLeng"
  "th\030\016 \001(\001\022\025\n\rppMaxBlurSize\030\017 \001(\003\032H\n\tPoint"
  "Line\022\024\n\014fromBodyName\030\001 \001(\t\022\022\n\ntoBodyName"
  "\030\002 \001(\t\022\021\n\tlineColor\030\003 \003(\005\032\304\001\n\rKeepOutInC"
  "one\022\020\n\010isKeepIn\030\001 \001(\010\022\020\n\010position\030\002 \003(\001\022"
  "\024\n\014normalVector\030\003 \003(\001\022\026\n\016incidenceAngle\030"
  "\004 \001(\001\022\022\n\nconeHeight\030\005 \001(\001\022\024\n\014fromBodyNam"
  "e\030\006 \001(\t\022\022\n\ntoBodyName\030\007 \001(\t\022\021\n\tconeColor"
  "\030\010 \003(\005\022\020\n\010coneName\030\t \001(\t\032\272\001\n\026StandardCam"
  "eraSettings\022\026\n\016spacecraftName\030\001 \001(\t\022\017\n\007s"
  "etMode\030\003 \001(\005\022\023\n\013fieldOfView\030\005 \001(\001\022\022\n\nbod"
  "yTarget\030\006 \001(\t\022\017\n\007setView\030\007 \001(\005\022\026\n\016pointi"
  "ngVector\030\010 \003(\001\022\020\n\010position\030\t \003(\001\022\023\n\013disp"
  "layName\030\n \001(\t\032\270\001\n\020ActuatorSettings\022\026\n\016sp"
  "acecraftName\030\001 \001(\t\022\031\n\021viewThrusterPanel\030"
  "\002 \001(\005\022\027\n\017viewThrusterHUD\030\003 \001(\005\022\023\n\013viewRW"
  "Panel\030\004 \001(\005\022\021\n\tviewRWHUD\030\005 \001(\005\022\032\n\022showTh"
  "rusterLabels\030\006 \001(\005\022\024\n\014showRWLabels\030\007 \001(\005"
  "\032\255\002\n\022InstrumentSettings\022\026\n\016spacecraftNam"
  "e\030\001 \001(\t\022\024\n\014viewCSSPanel\030\002 \001(\005\022\027\n\017viewCSS"
  "Coverage\030\003 \001(\005\022\025\n\rshowCSSLabels\030\004 \001(\005\022\030\n"
  "\020viewCSSBoresight\030\005 \001(\005\022\037\n\027showGenericSe"
  "nsorLabels\030\006 \001(\005\022\035\n\025showTransceiverLabel"
  "s\030\007 \001(\005\022\037\n\027showTransceiverFrustrum\030\010 \001(\005"
  "\022\037\n\027showGenericStoragePanel\030\t \001(\005\022\035\n\025sho"
  "wMultiSphereLabels\030\n \001(\005\032\275\001\n\013CustomModel"
  "\022\021\n\tmodelPath\030\001 \001(\t\022\031\n\021simBodiesToModify"
  "\030\002 \003(\t\022\016\n\006offset\030\003 \003(\001\022\020\n\010rotation\030\004 \003(\001"
  "\022\r\n\005scale\030\005 \003(\001\022\031\n\021customTexturePath\030\006 \001"
  "(\t\022\025\n\rnormalMapPath\030\007 \001(\t\022\016\n\006shader\030\010 \001("
  "\005\022\r\n\005color\030\t \003(\005\032q\n\021LiveVizSettingsPb\022@\n"
  "\013targetLines\030\001 \003(\0132+.vizProtobufferMessa"
  "ge.VizMessage.PointLine\022\032\n\022relativeOrbit"
  "Chief\030\002 \001(\t\032\330\r\n\rVizSettingsPb\022\017\n\007ambient"
  "\030\001 \001(\001\022\024\n\014orbitLinesOn\030\002 \001(\005\022\026\n\016spacecra"
  "ftCSon\030\003 \001(\005\022\022\n\nplanetCSon\030\004 \001(\005\022\?\n\npoin"
  "tLines\030\005 \003(\0132+.vizProtobufferMessage.Viz"
  "Message.PointLine\022G\n\016keepOutInCones\030\006 \003("
  "\0132/.vizProtobufferMessage.VizMessage.Kee"
  "pOutInCone\022X\n\026standardCameraSettings\030\007 \003"
  "(\01328.vizProtobufferMessage.VizMessage.St"
  "andardCameraSettings\022P\n\022instrumentSettin"
  "gs\030\t \003(\01324.vizProtobufferMessage.VizMess"
  "age.InstrumentSettings\022L\n\020actuatorSettin"
  "gs\030\n \003(\01322.vizProtobufferMessage.VizMess"
  "age.ActuatorSettings\022\016\n\006skybox\030\013 \001(\t\022C\n\014"
  "customModels\030\014 \003(\0132-.vizProtobufferMessa"
  "ge.VizMessage.CustomModel\022\036\n\026viewCameraB"
  "oresightHUD\030\r \001(\005\022\031\n\021viewCameraConeHUD\030\016"
  " \001(\005\022\024\n\014showCSLabels\030\017 \001(\005\022\037\n\027showCelest"
  "ialBodyLabels\030\020 \001(\005\022\034\n\024showSpacecraftLab"
  "els\030\021 \001(\005\022\030\n\020showCameraLabels\030\022 \001(\005\022\026\n\016c"
  "ustomGUIScale\030\023 \001(\001\022\037\n\027defaultSpacecraft"
  "Sprite\030\024 \001(\t\022\037\n\027showSpacecraftAsSprites\030"
  "\025 \001(\005\022$\n\034showCelestialBodiesAsSprites\030\026 "
  "\001(\005\022\025\n\rshow24hrClock\030\027 \001(\005\022\033\n\023showDataRa"
  "teDisplay\030\030 \001(\005\022\033\n\023keyboardAngularRate\030\031"
  " \001(\001\022\030\n\020keyboardZoomRate\030\032 \001(\001\022\034\n\024defaul"
  "tThrusterColor\030\033 \003(\005\022&\n\036defaultThrusterP"
  "lumeLifeScalar\030\034 \001(\001\022\031\n\021orbitLineSegment"
  "s\030\035 \001(\005\022\032\n\022relativeOrbitRange\030\036 \001(\005\022\025\n\rs"
  "howHillFrame\030\037 \001(\005\022\031\n\021showVelocityFrame\030"
  "  \001(\005\022\032\n\022relativeOrbitFrame\030! \001(\005\022\030\n\020mai"
  "nCameraTarget\030\" \001(\t\022\"\n\032spacecraftShadowB"
  "rightness\030# \001(\001\022 \n\030spacecraftSizeMultipl"
  "ier\030$ \001(\001\022\035\n\025showLocationCommLines\030% \001(\005"
  "\022\031\n\021showLocationCones\030& \001(\005\022\032\n\022showLocat"
  "ionLabels\030\' \001(\005\022\035\n\025trueTrajectoryLinesOn"
  "\030( \001(\005\022\026\n\016atmospheresOff\030) \001(\005\022,\n$scView"
  "ToPlanetViewBoundaryMultiplier\030* \001(\005\022/\n\'"
  "planetViewToHelioViewBoundaryMultiplier\030"
  "+ \001(\005\022\024\n\014sunIntensity\030, \001(\001\022%\n\035attenuate"
  "SunLightWithDistance\030- \001(\005\022\027\n\017showLightL"
  "abels\030. \001(\005\022,\n$celestialBodyHelioViewSiz"
  "eMultiplier\030/ \001(\001\022\027\n\017showMissionTime\0300 \001"
  "(\005\022)\n!spacecraftHelioViewSizeMultiplier\030"
  "1 \001(\001\022\'\n\037forceStartAtSpacecraftLocalView"
  "\0302 \001(\005\032\253\001\n\013MultiSphere\022\014\n\004isOn\030\001 \001(\005\022\020\n\010"
  "position\030\002 \003(\001\022\016\n\006radius\030\003 \001(\001\022\024\n\014curren"
  "tValue\030\004 \001(\001\022\020\n\010maxValue\030\005 \001(\001\022\025\n\rpositi"
  "veColor\030\006 \003(\005\022\025\n\rnegativeColor\030\007 \003(\005\022\026\n\016"
  "neutralOpacity\030\010 \001(\005\032\212\001\n\010Location\022\023\n\013sta"
  "tionName\030\001 \001(\t\022\026\n\016parentBodyName\030\002 \001(\t\022\016"
  "\n\006r_GP_P\030\003 \003(\001\022\016\n\006gHat_P\030\004 \003(\001\022\023\n\013fieldO"
  "fView\030\005 \001(\001\022\r\n\005color\030\006 \003(\005\022\r\n\005range\030\007 \001("
  "\001\032~\n\tEllipsoid\022\014\n\004isOn\030\001 \001(\005\022\024\n\014useBodyF"
  "rame\030\002 \001(\005\022\020\n\010position\030\003 \003(\001\022\025\n\rsemiMajo"
  "rAxes\030\004 \003(\001\022\r\n\005color\030\005 \003(\005\022\025\n\rshowGridLi"
  "nes\030\006 \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vizMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vizMessage_2eproto = {
  false, false, 6777, descriptor_table_protodef_vizMessage_2eproto, "vizMessage.proto", 
  &descriptor_table_vizMessage_2eproto_once, nullptr, 0, 24,
  schemas, file_default_instances, TableStruct_vizMessage_2eproto::offsets,
  file_level_metadata_vizMessage_2eproto, file_level_enum_descriptors_vizMessage_2eproto, file_level_service_descriptors_vizMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_vizMessage_2eproto_getter() {
  return &descriptor_table_vizMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vizMessage_2eproto(&descriptor_table_vizMessage_2eproto);
namespace vizProtobufferMessage {

// ===================================================================

class VizMessage_EpochDateTime::_Internal {
 public:
};

VizMessage_EpochDateTime::VizMessage_EpochDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.EpochDateTime)
}
VizMessage_EpochDateTime::VizMessage_EpochDateTime(const VizMessage_EpochDateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&minutes_) -
    reinterpret_cast<char*>(&year_)) + sizeof(minutes_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.EpochDateTime)
}

void VizMessage_EpochDateTime::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&year_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minutes_) -
    reinterpret_cast<char*>(&year_)) + sizeof(minutes_));
}

VizMessage_EpochDateTime::~VizMessage_EpochDateTime() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.EpochDateTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_EpochDateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VizMessage_EpochDateTime::ArenaDtor(void* object) {
  VizMessage_EpochDateTime* _this = reinterpret_cast< VizMessage_EpochDateTime* >(object);
  (void)_this;
}
void VizMessage_EpochDateTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_EpochDateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_EpochDateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.EpochDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minutes_) -
      reinterpret_cast<char*>(&year_)) + sizeof(minutes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_EpochDateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hours = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minutes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_EpochDateTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.EpochDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  // int32 hours = 4;
  if (this->hours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hours(), target);
  }

  // int32 minutes = 5;
  if (this->minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_minutes(), target);
  }

  // double seconds = 6;
  if (!(this->seconds() <= 0 && this->seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.EpochDateTime)
  return target;
}

size_t VizMessage_EpochDateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.EpochDateTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // int32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  // int32 hours = 4;
  if (this->hours() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hours());
  }

  // double seconds = 6;
  if (!(this->seconds() <= 0 && this->seconds() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 minutes = 5;
  if (this->minutes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minutes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_EpochDateTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.EpochDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_EpochDateTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_EpochDateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.EpochDateTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.EpochDateTime)
    MergeFrom(*source);
  }
}

void VizMessage_EpochDateTime::MergeFrom(const VizMessage_EpochDateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.EpochDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.hours() != 0) {
    _internal_set_hours(from._internal_hours());
  }
  if (!(from.seconds() <= 0 && from.seconds() >= 0)) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.minutes() != 0) {
    _internal_set_minutes(from._internal_minutes());
  }
}

void VizMessage_EpochDateTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.EpochDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_EpochDateTime::CopyFrom(const VizMessage_EpochDateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.EpochDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_EpochDateTime::IsInitialized() const {
  return true;
}

void VizMessage_EpochDateTime::InternalSwap(VizMessage_EpochDateTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_EpochDateTime, minutes_)
      + sizeof(VizMessage_EpochDateTime::minutes_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_EpochDateTime, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_EpochDateTime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[0]);
}

// ===================================================================

class VizMessage_TimeStamp::_Internal {
 public:
};

VizMessage_TimeStamp::VizMessage_TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.TimeStamp)
}
VizMessage_TimeStamp::VizMessage_TimeStamp(const VizMessage_TimeStamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&framenumber_, &from.framenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&simtimeelapsed_) -
    reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.TimeStamp)
}

void VizMessage_TimeStamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&framenumber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&simtimeelapsed_) -
    reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
}

VizMessage_TimeStamp::~VizMessage_TimeStamp() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.TimeStamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_TimeStamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VizMessage_TimeStamp::ArenaDtor(void* object) {
  VizMessage_TimeStamp* _this = reinterpret_cast< VizMessage_TimeStamp* >(object);
  (void)_this;
}
void VizMessage_TimeStamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_TimeStamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&framenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simtimeelapsed_) -
      reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_TimeStamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 frameNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          framenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double simTimeElapsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          simtimeelapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_TimeStamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_framenumber(), target);
  }

  // double simTimeElapsed = 2;
  if (!(this->simtimeelapsed() <= 0 && this->simtimeelapsed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_simtimeelapsed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.TimeStamp)
  return target;
}

size_t VizMessage_TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.TimeStamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_framenumber());
  }

  // double simTimeElapsed = 2;
  if (!(this->simtimeelapsed() <= 0 && this->simtimeelapsed() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_TimeStamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_TimeStamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_TimeStamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.TimeStamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.TimeStamp)
    MergeFrom(*source);
  }
}

void VizMessage_TimeStamp::MergeFrom(const VizMessage_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.framenumber() != 0) {
    _internal_set_framenumber(from._internal_framenumber());
  }
  if (!(from.simtimeelapsed() <= 0 && from.simtimeelapsed() >= 0)) {
    _internal_set_simtimeelapsed(from._internal_simtimeelapsed());
  }
}

void VizMessage_TimeStamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_TimeStamp::CopyFrom(const VizMessage_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_TimeStamp::IsInitialized() const {
  return true;
}

void VizMessage_TimeStamp::InternalSwap(VizMessage_TimeStamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_TimeStamp, simtimeelapsed_)
      + sizeof(VizMessage_TimeStamp::simtimeelapsed_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_TimeStamp, framenumber_)>(
          reinterpret_cast<char*>(&framenumber_),
          reinterpret_cast<char*>(&other->framenumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_TimeStamp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[1]);
}

// ===================================================================

class VizMessage_CelestialBody::_Internal {
 public:
};

VizMessage_CelestialBody::VizMessage_CelestialBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  velocity_(arena),
  rotation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.CelestialBody)
}
VizMessage_CelestialBody::VizMessage_CelestialBody(const VizMessage_CelestialBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      velocity_(from.velocity_),
      rotation_(from.rotation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bodyname().empty()) {
    bodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bodyname(), 
      GetArenaForAllocation());
  }
  modeldictionarykey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modeldictionarykey().empty()) {
    modeldictionarykey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modeldictionarykey(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mu_, &from.mu_,
    static_cast<size_t>(reinterpret_cast<char*>(&radiusratio_) -
    reinterpret_cast<char*>(&mu_)) + sizeof(radiusratio_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CelestialBody)
}

void VizMessage_CelestialBody::SharedCtor() {
bodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modeldictionarykey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radiusratio_) -
    reinterpret_cast<char*>(&mu_)) + sizeof(radiusratio_));
}

VizMessage_CelestialBody::~VizMessage_CelestialBody() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CelestialBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_CelestialBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bodyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldictionarykey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CelestialBody::ArenaDtor(void* object) {
  VizMessage_CelestialBody* _this = reinterpret_cast< VizMessage_CelestialBody* >(object);
  (void)_this;
}
void VizMessage_CelestialBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_CelestialBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_CelestialBody::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CelestialBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  rotation_.Clear();
  bodyname_.ClearToEmpty();
  modeldictionarykey_.ClearToEmpty();
  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radiusratio_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(radiusratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_CelestialBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bodyName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bodyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.CelestialBody.bodyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rotation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_rotation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          mu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radiusEq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          radiuseq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radiusRatio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          radiusratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string modelDictionaryKey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_modeldictionarykey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.CelestialBody.modelDictionaryKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_CelestialBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CelestialBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyName = 1;
  if (!this->bodyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bodyname().data(), static_cast<int>(this->_internal_bodyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CelestialBody.bodyName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bodyname(), target);
  }

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated double velocity = 3;
  if (this->_internal_velocity_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_velocity(), target);
  }

  // repeated double rotation = 4;
  if (this->_internal_rotation_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_rotation(), target);
  }

  // double mu = 5;
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_mu(), target);
  }

  // double radiusEq = 6;
  if (!(this->radiuseq() <= 0 && this->radiuseq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_radiuseq(), target);
  }

  // double radiusRatio = 7;
  if (!(this->radiusratio() <= 0 && this->radiusratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_radiusratio(), target);
  }

  // string modelDictionaryKey = 8;
  if (!this->modeldictionarykey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modeldictionarykey().data(), static_cast<int>(this->_internal_modeldictionarykey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CelestialBody.modelDictionaryKey");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_modeldictionarykey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CelestialBody)
  return target;
}

size_t VizMessage_CelestialBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CelestialBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double velocity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string bodyName = 1;
  if (!this->bodyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bodyname());
  }

  // string modelDictionaryKey = 8;
  if (!this->modeldictionarykey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modeldictionarykey());
  }

  // double mu = 5;
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    total_size += 1 + 8;
  }

  // double radiusEq = 6;
  if (!(this->radiuseq() <= 0 && this->radiuseq() >= 0)) {
    total_size += 1 + 8;
  }

  // double radiusRatio = 7;
  if (!(this->radiusratio() <= 0 && this->radiusratio() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_CelestialBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CelestialBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_CelestialBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CelestialBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CelestialBody)
    MergeFrom(*source);
  }
}

void VizMessage_CelestialBody::MergeFrom(const VizMessage_CelestialBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  rotation_.MergeFrom(from.rotation_);
  if (!from.bodyname().empty()) {
    _internal_set_bodyname(from._internal_bodyname());
  }
  if (!from.modeldictionarykey().empty()) {
    _internal_set_modeldictionarykey(from._internal_modeldictionarykey());
  }
  if (!(from.mu() <= 0 && from.mu() >= 0)) {
    _internal_set_mu(from._internal_mu());
  }
  if (!(from.radiuseq() <= 0 && from.radiuseq() >= 0)) {
    _internal_set_radiuseq(from._internal_radiuseq());
  }
  if (!(from.radiusratio() <= 0 && from.radiusratio() >= 0)) {
    _internal_set_radiusratio(from._internal_radiusratio());
  }
}

void VizMessage_CelestialBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CelestialBody::CopyFrom(const VizMessage_CelestialBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CelestialBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CelestialBody::IsInitialized() const {
  return true;
}

void VizMessage_CelestialBody::InternalSwap(VizMessage_CelestialBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  rotation_.InternalSwap(&other->rotation_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bodyname_, GetArenaForAllocation(),
      &other->bodyname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modeldictionarykey_, GetArenaForAllocation(),
      &other->modeldictionarykey_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_CelestialBody, radiusratio_)
      + sizeof(VizMessage_CelestialBody::radiusratio_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_CelestialBody, mu_)>(
          reinterpret_cast<char*>(&mu_),
          reinterpret_cast<char*>(&other->mu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_CelestialBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[2]);
}

// ===================================================================

class VizMessage_Spacecraft::_Internal {
 public:
};

VizMessage_Spacecraft::VizMessage_Spacecraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  velocity_(arena),
  rotation_(arena),
  reactionwheels_(arena),
  thrusters_(arena),
  css_(arena),
  genericsensors_(arena),
  transceivers_(arena),
  storagedevices_(arena),
  lights_(arena),
  oscorbitlinecolor_(arena),
  truetrajectorylinecolor_(arena),
  multispheres_(arena),
  ellipsoids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.Spacecraft)
}
VizMessage_Spacecraft::VizMessage_Spacecraft(const VizMessage_Spacecraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      velocity_(from.velocity_),
      rotation_(from.rotation_),
      reactionwheels_(from.reactionwheels_),
      thrusters_(from.thrusters_),
      css_(from.css_),
      genericsensors_(from.genericsensors_),
      transceivers_(from.transceivers_),
      storagedevices_(from.storagedevices_),
      lights_(from.lights_),
      oscorbitlinecolor_(from.oscorbitlinecolor_),
      truetrajectorylinecolor_(from.truetrajectorylinecolor_),
      multispheres_(from.multispheres_),
      ellipsoids_(from.ellipsoids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecraftname().empty()) {
    spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spacecraftname(), 
      GetArenaForAllocation());
  }
  spacecraftsprite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecraftsprite().empty()) {
    spacecraftsprite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spacecraftsprite(), 
      GetArenaForAllocation());
  }
  modeldictionarykey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modeldictionarykey().empty()) {
    modeldictionarykey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modeldictionarykey(), 
      GetArenaForAllocation());
  }
  logotexture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logotexture().empty()) {
    logotexture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logotexture(), 
      GetArenaForAllocation());
  }
  parentspacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parentspacecraftname().empty()) {
    parentspacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parentspacecraftname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Spacecraft)
}

void VizMessage_Spacecraft::SharedCtor() {
spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
spacecraftsprite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modeldictionarykey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logotexture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parentspacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VizMessage_Spacecraft::~VizMessage_Spacecraft() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Spacecraft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_Spacecraft::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  spacecraftname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spacecraftsprite_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldictionarykey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logotexture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentspacecraftname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_Spacecraft::ArenaDtor(void* object) {
  VizMessage_Spacecraft* _this = reinterpret_cast< VizMessage_Spacecraft* >(object);
  (void)_this;
}
void VizMessage_Spacecraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_Spacecraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_Spacecraft::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Spacecraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  rotation_.Clear();
  reactionwheels_.Clear();
  thrusters_.Clear();
  css_.Clear();
  genericsensors_.Clear();
  transceivers_.Clear();
  storagedevices_.Clear();
  lights_.Clear();
  oscorbitlinecolor_.Clear();
  truetrajectorylinecolor_.Clear();
  multispheres_.Clear();
  ellipsoids_.Clear();
  spacecraftname_.ClearToEmpty();
  spacecraftsprite_.ClearToEmpty();
  modeldictionarykey_.ClearToEmpty();
  logotexture_.ClearToEmpty();
  parentspacecraftname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_Spacecraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spacecraftName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spacecraftname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rotation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_rotation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reactionwheels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thrusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_css(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.GenericSensor genericSensors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_genericsensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string spacecraftSprite = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_spacecraftsprite();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftSprite"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.Transceiver transceivers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transceivers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.GenericStorage storageDevices = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_storagedevices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.Light lights = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // string modelDictionaryKey = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_modeldictionarykey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Spacecraft.modelDictionaryKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 oscOrbitLineColor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_oscorbitlinecolor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_oscorbitlinecolor(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 trueTrajectoryLineColor = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_truetrajectorylinecolor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_truetrajectorylinecolor(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logoTexture = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_logotexture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Spacecraft.logoTexture"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.MultiSphere multiSpheres = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_multispheres(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.Ellipsoid ellipsoids = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ellipsoids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // string parentSpacecraftName = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_parentspacecraftname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Spacecraft.parentSpacecraftName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_Spacecraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Spacecraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecraftname().data(), static_cast<int>(this->_internal_spacecraftname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spacecraftname(), target);
  }

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated double velocity = 3;
  if (this->_internal_velocity_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_velocity(), target);
  }

  // repeated double rotation = 4;
  if (this->_internal_rotation_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_rotation(), target);
  }

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reactionwheels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_reactionwheels(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_thrusters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_thrusters(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_css_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_css(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.GenericSensor genericSensors = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_genericsensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_genericsensors(i), target, stream);
  }

  // string spacecraftSprite = 9;
  if (!this->spacecraftsprite().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecraftsprite().data(), static_cast<int>(this->_internal_spacecraftsprite().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Spacecraft.spacecraftSprite");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_spacecraftsprite(), target);
  }

  // repeated .vizProtobufferMessage.VizMessage.Transceiver transceivers = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transceivers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_transceivers(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.GenericStorage storageDevices = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_storagedevices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_storagedevices(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.Light lights = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_lights(i), target, stream);
  }

  // string modelDictionaryKey = 13;
  if (!this->modeldictionarykey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modeldictionarykey().data(), static_cast<int>(this->_internal_modeldictionarykey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Spacecraft.modelDictionaryKey");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_modeldictionarykey(), target);
  }

  // repeated int32 oscOrbitLineColor = 14;
  {
    int byte_size = _oscorbitlinecolor_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          14, _internal_oscorbitlinecolor(), byte_size, target);
    }
  }

  // repeated int32 trueTrajectoryLineColor = 15;
  {
    int byte_size = _truetrajectorylinecolor_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_truetrajectorylinecolor(), byte_size, target);
    }
  }

  // string logoTexture = 16;
  if (!this->logotexture().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logotexture().data(), static_cast<int>(this->_internal_logotexture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Spacecraft.logoTexture");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_logotexture(), target);
  }

  // repeated .vizProtobufferMessage.VizMessage.MultiSphere multiSpheres = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multispheres_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_multispheres(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.Ellipsoid ellipsoids = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ellipsoids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_ellipsoids(i), target, stream);
  }

  // string parentSpacecraftName = 19;
  if (!this->parentspacecraftname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentspacecraftname().data(), static_cast<int>(this->_internal_parentspacecraftname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Spacecraft.parentSpacecraftName");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_parentspacecraftname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Spacecraft)
  return target;
}

size_t VizMessage_Spacecraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Spacecraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double velocity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated .vizProtobufferMessage.VizMessage.ReactionWheel reactionWheels = 5;
  total_size += 1UL * this->_internal_reactionwheels_size();
  for (const auto& msg : this->reactionwheels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.Thruster thrusters = 6;
  total_size += 1UL * this->_internal_thrusters_size();
  for (const auto& msg : this->thrusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.CoarseSunSensor CSS = 7;
  total_size += 1UL * this->_internal_css_size();
  for (const auto& msg : this->css_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.GenericSensor genericSensors = 8;
  total_size += 1UL * this->_internal_genericsensors_size();
  for (const auto& msg : this->genericsensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.Transceiver transceivers = 10;
  total_size += 1UL * this->_internal_transceivers_size();
  for (const auto& msg : this->transceivers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.GenericStorage storageDevices = 11;
  total_size += 1UL * this->_internal_storagedevices_size();
  for (const auto& msg : this->storagedevices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.Light lights = 12;
  total_size += 1UL * this->_internal_lights_size();
  for (const auto& msg : this->lights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 oscOrbitLineColor = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->oscorbitlinecolor_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _oscorbitlinecolor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 trueTrajectoryLineColor = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->truetrajectorylinecolor_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _truetrajectorylinecolor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .vizProtobufferMessage.VizMessage.MultiSphere multiSpheres = 17;
  total_size += 2UL * this->_internal_multispheres_size();
  for (const auto& msg : this->multispheres_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.Ellipsoid ellipsoids = 18;
  total_size += 2UL * this->_internal_ellipsoids_size();
  for (const auto& msg : this->ellipsoids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecraftname());
  }

  // string spacecraftSprite = 9;
  if (!this->spacecraftsprite().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecraftsprite());
  }

  // string modelDictionaryKey = 13;
  if (!this->modeldictionarykey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modeldictionarykey());
  }

  // string logoTexture = 16;
  if (!this->logotexture().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logotexture());
  }

  // string parentSpacecraftName = 19;
  if (!this->parentspacecraftname().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentspacecraftname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_Spacecraft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Spacecraft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_Spacecraft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Spacecraft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Spacecraft)
    MergeFrom(*source);
  }
}

void VizMessage_Spacecraft::MergeFrom(const VizMessage_Spacecraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  rotation_.MergeFrom(from.rotation_);
  reactionwheels_.MergeFrom(from.reactionwheels_);
  thrusters_.MergeFrom(from.thrusters_);
  css_.MergeFrom(from.css_);
  genericsensors_.MergeFrom(from.genericsensors_);
  transceivers_.MergeFrom(from.transceivers_);
  storagedevices_.MergeFrom(from.storagedevices_);
  lights_.MergeFrom(from.lights_);
  oscorbitlinecolor_.MergeFrom(from.oscorbitlinecolor_);
  truetrajectorylinecolor_.MergeFrom(from.truetrajectorylinecolor_);
  multispheres_.MergeFrom(from.multispheres_);
  ellipsoids_.MergeFrom(from.ellipsoids_);
  if (!from.spacecraftname().empty()) {
    _internal_set_spacecraftname(from._internal_spacecraftname());
  }
  if (!from.spacecraftsprite().empty()) {
    _internal_set_spacecraftsprite(from._internal_spacecraftsprite());
  }
  if (!from.modeldictionarykey().empty()) {
    _internal_set_modeldictionarykey(from._internal_modeldictionarykey());
  }
  if (!from.logotexture().empty()) {
    _internal_set_logotexture(from._internal_logotexture());
  }
  if (!from.parentspacecraftname().empty()) {
    _internal_set_parentspacecraftname(from._internal_parentspacecraftname());
  }
}

void VizMessage_Spacecraft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Spacecraft::CopyFrom(const VizMessage_Spacecraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Spacecraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Spacecraft::IsInitialized() const {
  return true;
}

void VizMessage_Spacecraft::InternalSwap(VizMessage_Spacecraft* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  rotation_.InternalSwap(&other->rotation_);
  reactionwheels_.InternalSwap(&other->reactionwheels_);
  thrusters_.InternalSwap(&other->thrusters_);
  css_.InternalSwap(&other->css_);
  genericsensors_.InternalSwap(&other->genericsensors_);
  transceivers_.InternalSwap(&other->transceivers_);
  storagedevices_.InternalSwap(&other->storagedevices_);
  lights_.InternalSwap(&other->lights_);
  oscorbitlinecolor_.InternalSwap(&other->oscorbitlinecolor_);
  truetrajectorylinecolor_.InternalSwap(&other->truetrajectorylinecolor_);
  multispheres_.InternalSwap(&other->multispheres_);
  ellipsoids_.InternalSwap(&other->ellipsoids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spacecraftname_, GetArenaForAllocation(),
      &other->spacecraftname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spacecraftsprite_, GetArenaForAllocation(),
      &other->spacecraftsprite_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modeldictionarykey_, GetArenaForAllocation(),
      &other->modeldictionarykey_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logotexture_, GetArenaForAllocation(),
      &other->logotexture_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parentspacecraftname_, GetArenaForAllocation(),
      &other->parentspacecraftname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_Spacecraft::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[3]);
}

// ===================================================================

class VizMessage_ReactionWheel::_Internal {
 public:
};

VizMessage_ReactionWheel::VizMessage_ReactionWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  spinaxisvector_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.ReactionWheel)
}
VizMessage_ReactionWheel::VizMessage_ReactionWheel(const VizMessage_ReactionWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      spinaxisvector_(from.spinaxisvector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wheelspeed_, &from.wheelspeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxtorque_) -
    reinterpret_cast<char*>(&wheelspeed_)) + sizeof(maxtorque_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.ReactionWheel)
}

void VizMessage_ReactionWheel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wheelspeed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxtorque_) -
    reinterpret_cast<char*>(&wheelspeed_)) + sizeof(maxtorque_));
}

VizMessage_ReactionWheel::~VizMessage_ReactionWheel() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.ReactionWheel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_ReactionWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VizMessage_ReactionWheel::ArenaDtor(void* object) {
  VizMessage_ReactionWheel* _this = reinterpret_cast< VizMessage_ReactionWheel* >(object);
  (void)_this;
}
void VizMessage_ReactionWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_ReactionWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_ReactionWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  spinaxisvector_.Clear();
  ::memset(&wheelspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxtorque_) -
      reinterpret_cast<char*>(&wheelspeed_)) + sizeof(maxtorque_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_ReactionWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double spinAxisVector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_spinaxisvector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_spinaxisvector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double wheelSpeed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          wheelspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double wheelTorque = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          wheeltorque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxSpeed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          maxspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxTorque = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          maxtorque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_ReactionWheel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated double spinAxisVector = 4;
  if (this->_internal_spinaxisvector_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_spinaxisvector(), target);
  }

  // double wheelSpeed = 5;
  if (!(this->wheelspeed() <= 0 && this->wheelspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_wheelspeed(), target);
  }

  // double wheelTorque = 6;
  if (!(this->wheeltorque() <= 0 && this->wheeltorque() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_wheeltorque(), target);
  }

  // double maxSpeed = 7;
  if (!(this->maxspeed() <= 0 && this->maxspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_maxspeed(), target);
  }

  // double maxTorque = 8;
  if (!(this->maxtorque() <= 0 && this->maxtorque() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_maxtorque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.ReactionWheel)
  return target;
}

size_t VizMessage_ReactionWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double spinAxisVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spinaxisvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // double wheelSpeed = 5;
  if (!(this->wheelspeed() <= 0 && this->wheelspeed() >= 0)) {
    total_size += 1 + 8;
  }

  // double wheelTorque = 6;
  if (!(this->wheeltorque() <= 0 && this->wheeltorque() >= 0)) {
    total_size += 1 + 8;
  }

  // double maxSpeed = 7;
  if (!(this->maxspeed() <= 0 && this->maxspeed() >= 0)) {
    total_size += 1 + 8;
  }

  // double maxTorque = 8;
  if (!(this->maxtorque() <= 0 && this->maxtorque() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_ReactionWheel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_ReactionWheel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_ReactionWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.ReactionWheel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.ReactionWheel)
    MergeFrom(*source);
  }
}

void VizMessage_ReactionWheel::MergeFrom(const VizMessage_ReactionWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  spinaxisvector_.MergeFrom(from.spinaxisvector_);
  if (!(from.wheelspeed() <= 0 && from.wheelspeed() >= 0)) {
    _internal_set_wheelspeed(from._internal_wheelspeed());
  }
  if (!(from.wheeltorque() <= 0 && from.wheeltorque() >= 0)) {
    _internal_set_wheeltorque(from._internal_wheeltorque());
  }
  if (!(from.maxspeed() <= 0 && from.maxspeed() >= 0)) {
    _internal_set_maxspeed(from._internal_maxspeed());
  }
  if (!(from.maxtorque() <= 0 && from.maxtorque() >= 0)) {
    _internal_set_maxtorque(from._internal_maxtorque());
  }
}

void VizMessage_ReactionWheel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_ReactionWheel::CopyFrom(const VizMessage_ReactionWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.ReactionWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_ReactionWheel::IsInitialized() const {
  return true;
}

void VizMessage_ReactionWheel::InternalSwap(VizMessage_ReactionWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  spinaxisvector_.InternalSwap(&other->spinaxisvector_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_ReactionWheel, maxtorque_)
      + sizeof(VizMessage_ReactionWheel::maxtorque_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_ReactionWheel, wheelspeed_)>(
          reinterpret_cast<char*>(&wheelspeed_),
          reinterpret_cast<char*>(&other->wheelspeed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_ReactionWheel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[4]);
}

// ===================================================================

class VizMessage_Thruster::_Internal {
 public:
};

VizMessage_Thruster::VizMessage_Thruster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  thrustvector_(arena),
  color_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.Thruster)
}
VizMessage_Thruster::VizMessage_Thruster(const VizMessage_Thruster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      thrustvector_(from.thrustvector_),
      color_(from.color_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thrustertag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thrustertag().empty()) {
    thrustertag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thrustertag(), 
      GetArenaForAllocation());
  }
  ::memcpy(&currentthrust_, &from.currentthrust_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxthrust_) -
    reinterpret_cast<char*>(&currentthrust_)) + sizeof(maxthrust_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Thruster)
}

void VizMessage_Thruster::SharedCtor() {
thrustertag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&currentthrust_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxthrust_) -
    reinterpret_cast<char*>(&currentthrust_)) + sizeof(maxthrust_));
}

VizMessage_Thruster::~VizMessage_Thruster() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Thruster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_Thruster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  thrustertag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_Thruster::ArenaDtor(void* object) {
  VizMessage_Thruster* _this = reinterpret_cast< VizMessage_Thruster* >(object);
  (void)_this;
}
void VizMessage_Thruster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_Thruster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_Thruster::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Thruster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  thrustvector_.Clear();
  color_.Clear();
  thrustertag_.ClearToEmpty();
  ::memset(&currentthrust_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxthrust_) -
      reinterpret_cast<char*>(&currentthrust_)) + sizeof(maxthrust_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_Thruster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double thrustVector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_thrustvector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_thrustvector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double currentThrust = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          currentthrust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxThrust = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          maxthrust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string thrusterTag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_thrustertag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Thruster.thrusterTag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 color = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_color(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_Thruster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Thruster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated double thrustVector = 4;
  if (this->_internal_thrustvector_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_thrustvector(), target);
  }

  // double currentThrust = 5;
  if (!(this->currentthrust() <= 0 && this->currentthrust() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_currentthrust(), target);
  }

  // double maxThrust = 6;
  if (!(this->maxthrust() <= 0 && this->maxthrust() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_maxthrust(), target);
  }

  // string thrusterTag = 8;
  if (!this->thrustertag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thrustertag().data(), static_cast<int>(this->_internal_thrustertag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Thruster.thrusterTag");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_thrustertag(), target);
  }

  // repeated int32 color = 9;
  {
    int byte_size = _color_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_color(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Thruster)
  return target;
}

size_t VizMessage_Thruster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Thruster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double thrustVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thrustvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 color = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->color_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string thrusterTag = 8;
  if (!this->thrustertag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thrustertag());
  }

  // double currentThrust = 5;
  if (!(this->currentthrust() <= 0 && this->currentthrust() >= 0)) {
    total_size += 1 + 8;
  }

  // double maxThrust = 6;
  if (!(this->maxthrust() <= 0 && this->maxthrust() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_Thruster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Thruster)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Thruster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_Thruster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Thruster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Thruster)
    MergeFrom(*source);
  }
}

void VizMessage_Thruster::MergeFrom(const VizMessage_Thruster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Thruster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  thrustvector_.MergeFrom(from.thrustvector_);
  color_.MergeFrom(from.color_);
  if (!from.thrustertag().empty()) {
    _internal_set_thrustertag(from._internal_thrustertag());
  }
  if (!(from.currentthrust() <= 0 && from.currentthrust() >= 0)) {
    _internal_set_currentthrust(from._internal_currentthrust());
  }
  if (!(from.maxthrust() <= 0 && from.maxthrust() >= 0)) {
    _internal_set_maxthrust(from._internal_maxthrust());
  }
}

void VizMessage_Thruster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Thruster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Thruster::CopyFrom(const VizMessage_Thruster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Thruster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Thruster::IsInitialized() const {
  return true;
}

void VizMessage_Thruster::InternalSwap(VizMessage_Thruster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  thrustvector_.InternalSwap(&other->thrustvector_);
  color_.InternalSwap(&other->color_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thrustertag_, GetArenaForAllocation(),
      &other->thrustertag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_Thruster, maxthrust_)
      + sizeof(VizMessage_Thruster::maxthrust_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_Thruster, currentthrust_)>(
          reinterpret_cast<char*>(&currentthrust_),
          reinterpret_cast<char*>(&other->currentthrust_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_Thruster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[5]);
}

// ===================================================================

class VizMessage_CoarseSunSensor::_Internal {
 public:
};

VizMessage_CoarseSunSensor::VizMessage_CoarseSunSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  normalvector_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.CoarseSunSensor)
}
VizMessage_CoarseSunSensor::VizMessage_CoarseSunSensor(const VizMessage_CoarseSunSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      normalvector_(from.normalvector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fieldofview_, &from.fieldofview_,
    static_cast<size_t>(reinterpret_cast<char*>(&cssgroupid_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(cssgroupid_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CoarseSunSensor)
}

void VizMessage_CoarseSunSensor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fieldofview_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cssgroupid_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(cssgroupid_));
}

VizMessage_CoarseSunSensor::~VizMessage_CoarseSunSensor() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_CoarseSunSensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VizMessage_CoarseSunSensor::ArenaDtor(void* object) {
  VizMessage_CoarseSunSensor* _this = reinterpret_cast< VizMessage_CoarseSunSensor* >(object);
  (void)_this;
}
void VizMessage_CoarseSunSensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_CoarseSunSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_CoarseSunSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  normalvector_.Clear();
  ::memset(&fieldofview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cssgroupid_) -
      reinterpret_cast<char*>(&fieldofview_)) + sizeof(cssgroupid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_CoarseSunSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fieldOfView = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          fieldofview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double normalVector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_normalvector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_normalvector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double currentMsmt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          currentmsmt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxMsmt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          maxmsmt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 CSSGroupID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cssgroupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double minMsmt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          minmsmt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_CoarseSunSensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // double fieldOfView = 3;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fieldofview(), target);
  }

  // repeated double normalVector = 4;
  if (this->_internal_normalvector_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_normalvector(), target);
  }

  // double currentMsmt = 5;
  if (!(this->currentmsmt() <= 0 && this->currentmsmt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_currentmsmt(), target);
  }

  // double maxMsmt = 6;
  if (!(this->maxmsmt() <= 0 && this->maxmsmt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_maxmsmt(), target);
  }

  // int32 CSSGroupID = 7;
  if (this->cssgroupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cssgroupid(), target);
  }

  // double minMsmt = 8;
  if (!(this->minmsmt() <= 0 && this->minmsmt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_minmsmt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  return target;
}

size_t VizMessage_CoarseSunSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double normalVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normalvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // double fieldOfView = 3;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    total_size += 1 + 8;
  }

  // double currentMsmt = 5;
  if (!(this->currentmsmt() <= 0 && this->currentmsmt() >= 0)) {
    total_size += 1 + 8;
  }

  // double maxMsmt = 6;
  if (!(this->maxmsmt() <= 0 && this->maxmsmt() >= 0)) {
    total_size += 1 + 8;
  }

  // double minMsmt = 8;
  if (!(this->minmsmt() <= 0 && this->minmsmt() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 CSSGroupID = 7;
  if (this->cssgroupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cssgroupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_CoarseSunSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CoarseSunSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_CoarseSunSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CoarseSunSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CoarseSunSensor)
    MergeFrom(*source);
  }
}

void VizMessage_CoarseSunSensor::MergeFrom(const VizMessage_CoarseSunSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  normalvector_.MergeFrom(from.normalvector_);
  if (!(from.fieldofview() <= 0 && from.fieldofview() >= 0)) {
    _internal_set_fieldofview(from._internal_fieldofview());
  }
  if (!(from.currentmsmt() <= 0 && from.currentmsmt() >= 0)) {
    _internal_set_currentmsmt(from._internal_currentmsmt());
  }
  if (!(from.maxmsmt() <= 0 && from.maxmsmt() >= 0)) {
    _internal_set_maxmsmt(from._internal_maxmsmt());
  }
  if (!(from.minmsmt() <= 0 && from.minmsmt() >= 0)) {
    _internal_set_minmsmt(from._internal_minmsmt());
  }
  if (from.cssgroupid() != 0) {
    _internal_set_cssgroupid(from._internal_cssgroupid());
  }
}

void VizMessage_CoarseSunSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CoarseSunSensor::CopyFrom(const VizMessage_CoarseSunSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CoarseSunSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CoarseSunSensor::IsInitialized() const {
  return true;
}

void VizMessage_CoarseSunSensor::InternalSwap(VizMessage_CoarseSunSensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  normalvector_.InternalSwap(&other->normalvector_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_CoarseSunSensor, cssgroupid_)
      + sizeof(VizMessage_CoarseSunSensor::cssgroupid_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_CoarseSunSensor, fieldofview_)>(
          reinterpret_cast<char*>(&fieldofview_),
          reinterpret_cast<char*>(&other->fieldofview_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_CoarseSunSensor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[6]);
}

// ===================================================================

class VizMessage_GenericSensor::_Internal {
 public:
};

VizMessage_GenericSensor::VizMessage_GenericSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  fieldofview_(arena),
  normalvector_(arena),
  color_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.GenericSensor)
}
VizMessage_GenericSensor::VizMessage_GenericSensor(const VizMessage_GenericSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      fieldofview_(from.fieldofview_),
      normalvector_(from.normalvector_),
      color_(from.color_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ishidden_, &from.ishidden_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&ishidden_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.GenericSensor)
}

void VizMessage_GenericSensor::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ishidden_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&ishidden_)) + sizeof(size_));
}

VizMessage_GenericSensor::~VizMessage_GenericSensor() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.GenericSensor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_GenericSensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_GenericSensor::ArenaDtor(void* object) {
  VizMessage_GenericSensor* _this = reinterpret_cast< VizMessage_GenericSensor* >(object);
  (void)_this;
}
void VizMessage_GenericSensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_GenericSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_GenericSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.GenericSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  fieldofview_.Clear();
  normalvector_.Clear();
  color_.Clear();
  label_.ClearToEmpty();
  ::memset(&ishidden_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&ishidden_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_GenericSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double fieldOfView = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_fieldofview(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_fieldofview(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double normalVector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_normalvector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_normalvector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool isHidden = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ishidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activityStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          activitystatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_color(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.GenericSensor.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_GenericSensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.GenericSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated double fieldOfView = 3;
  if (this->_internal_fieldofview_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_fieldofview(), target);
  }

  // repeated double normalVector = 4;
  if (this->_internal_normalvector_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_normalvector(), target);
  }

  // bool isHidden = 5;
  if (this->ishidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ishidden(), target);
  }

  // int32 activityStatus = 6;
  if (this->activitystatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_activitystatus(), target);
  }

  // double size = 7;
  if (!(this->size() <= 0 && this->size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_size(), target);
  }

  // repeated int32 color = 8;
  {
    int byte_size = _color_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_color(), byte_size, target);
    }
  }

  // string label = 9;
  if (!this->label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.GenericSensor.label");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.GenericSensor)
  return target;
}

size_t VizMessage_GenericSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.GenericSensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double fieldOfView = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fieldofview_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double normalVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normalvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 color = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->color_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string label = 9;
  if (!this->label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // bool isHidden = 5;
  if (this->ishidden() != 0) {
    total_size += 1 + 1;
  }

  // int32 activityStatus = 6;
  if (this->activitystatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activitystatus());
  }

  // double size = 7;
  if (!(this->size() <= 0 && this->size() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_GenericSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.GenericSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_GenericSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_GenericSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.GenericSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.GenericSensor)
    MergeFrom(*source);
  }
}

void VizMessage_GenericSensor::MergeFrom(const VizMessage_GenericSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.GenericSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  fieldofview_.MergeFrom(from.fieldofview_);
  normalvector_.MergeFrom(from.normalvector_);
  color_.MergeFrom(from.color_);
  if (!from.label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (from.ishidden() != 0) {
    _internal_set_ishidden(from._internal_ishidden());
  }
  if (from.activitystatus() != 0) {
    _internal_set_activitystatus(from._internal_activitystatus());
  }
  if (!(from.size() <= 0 && from.size() >= 0)) {
    _internal_set_size(from._internal_size());
  }
}

void VizMessage_GenericSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.GenericSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_GenericSensor::CopyFrom(const VizMessage_GenericSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.GenericSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_GenericSensor::IsInitialized() const {
  return true;
}

void VizMessage_GenericSensor::InternalSwap(VizMessage_GenericSensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  fieldofview_.InternalSwap(&other->fieldofview_);
  normalvector_.InternalSwap(&other->normalvector_);
  color_.InternalSwap(&other->color_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, GetArenaForAllocation(),
      &other->label_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_GenericSensor, size_)
      + sizeof(VizMessage_GenericSensor::size_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_GenericSensor, ishidden_)>(
          reinterpret_cast<char*>(&ishidden_),
          reinterpret_cast<char*>(&other->ishidden_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_GenericSensor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[7]);
}

// ===================================================================

class VizMessage_GenericStorage::_Internal {
 public:
};

VizMessage_GenericStorage::VizMessage_GenericStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  color_(arena),
  thresholds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.GenericStorage)
}
VizMessage_GenericStorage::VizMessage_GenericStorage(const VizMessage_GenericStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      color_(from.color_),
      thresholds_(from.thresholds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_units().empty()) {
    units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_units(), 
      GetArenaForAllocation());
  }
  ::memcpy(&currentvalue_, &from.currentvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxvalue_) -
    reinterpret_cast<char*>(&currentvalue_)) + sizeof(maxvalue_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.GenericStorage)
}

void VizMessage_GenericStorage::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&currentvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxvalue_) -
    reinterpret_cast<char*>(&currentvalue_)) + sizeof(maxvalue_));
}

VizMessage_GenericStorage::~VizMessage_GenericStorage() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.GenericStorage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_GenericStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_GenericStorage::ArenaDtor(void* object) {
  VizMessage_GenericStorage* _this = reinterpret_cast< VizMessage_GenericStorage* >(object);
  (void)_this;
}
void VizMessage_GenericStorage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_GenericStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_GenericStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.GenericStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_.Clear();
  thresholds_.Clear();
  label_.ClearToEmpty();
  units_.ClearToEmpty();
  ::memset(&currentvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxvalue_) -
      reinterpret_cast<char*>(&currentvalue_)) + sizeof(maxvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_GenericStorage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.GenericStorage.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double currentValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          currentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          maxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string units = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.GenericStorage.units"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_color(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 thresholds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_GenericStorage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.GenericStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 2;
  if (!this->label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.GenericStorage.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // double currentValue = 3;
  if (!(this->currentvalue() <= 0 && this->currentvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_currentvalue(), target);
  }

  // double maxValue = 4;
  if (!(this->maxvalue() <= 0 && this->maxvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_maxvalue(), target);
  }

  // string units = 5;
  if (!this->units().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.GenericStorage.units");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_units(), target);
  }

  // repeated int32 color = 6;
  {
    int byte_size = _color_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_color(), byte_size, target);
    }
  }

  // repeated int32 thresholds = 7;
  {
    int byte_size = _thresholds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_thresholds(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.GenericStorage)
  return target;
}

size_t VizMessage_GenericStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.GenericStorage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 color = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->color_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 thresholds = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->thresholds_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _thresholds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string label = 2;
  if (!this->label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string units = 5;
  if (!this->units().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_units());
  }

  // double currentValue = 3;
  if (!(this->currentvalue() <= 0 && this->currentvalue() >= 0)) {
    total_size += 1 + 8;
  }

  // double maxValue = 4;
  if (!(this->maxvalue() <= 0 && this->maxvalue() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_GenericStorage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.GenericStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_GenericStorage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_GenericStorage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.GenericStorage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.GenericStorage)
    MergeFrom(*source);
  }
}

void VizMessage_GenericStorage::MergeFrom(const VizMessage_GenericStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.GenericStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  color_.MergeFrom(from.color_);
  thresholds_.MergeFrom(from.thresholds_);
  if (!from.label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (!from.units().empty()) {
    _internal_set_units(from._internal_units());
  }
  if (!(from.currentvalue() <= 0 && from.currentvalue() >= 0)) {
    _internal_set_currentvalue(from._internal_currentvalue());
  }
  if (!(from.maxvalue() <= 0 && from.maxvalue() >= 0)) {
    _internal_set_maxvalue(from._internal_maxvalue());
  }
}

void VizMessage_GenericStorage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.GenericStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_GenericStorage::CopyFrom(const VizMessage_GenericStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.GenericStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_GenericStorage::IsInitialized() const {
  return true;
}

void VizMessage_GenericStorage::InternalSwap(VizMessage_GenericStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  color_.InternalSwap(&other->color_);
  thresholds_.InternalSwap(&other->thresholds_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, GetArenaForAllocation(),
      &other->label_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &units_, GetArenaForAllocation(),
      &other->units_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_GenericStorage, maxvalue_)
      + sizeof(VizMessage_GenericStorage::maxvalue_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_GenericStorage, currentvalue_)>(
          reinterpret_cast<char*>(&currentvalue_),
          reinterpret_cast<char*>(&other->currentvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_GenericStorage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[8]);
}

// ===================================================================

class VizMessage_Light::_Internal {
 public:
};

VizMessage_Light::VizMessage_Light(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  normalvector_(arena),
  color_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.Light)
}
VizMessage_Light::VizMessage_Light(const VizMessage_Light& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      normalvector_(from.normalvector_),
      color_(from.color_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fieldofview_, &from.fieldofview_,
    static_cast<size_t>(reinterpret_cast<char*>(&showlensflare_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(showlensflare_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Light)
}

void VizMessage_Light::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fieldofview_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&showlensflare_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(showlensflare_));
}

VizMessage_Light::~VizMessage_Light() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Light)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_Light::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_Light::ArenaDtor(void* object) {
  VizMessage_Light* _this = reinterpret_cast< VizMessage_Light* >(object);
  (void)_this;
}
void VizMessage_Light::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_Light::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_Light::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  normalvector_.Clear();
  color_.Clear();
  label_.ClearToEmpty();
  ::memset(&fieldofview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showlensflare_) -
      reinterpret_cast<char*>(&fieldofview_)) + sizeof(showlensflare_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_Light::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Light.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fieldOfView = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          fieldofview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double normalVector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_normalvector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_normalvector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 lightOn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lighton_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double intensity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 showLightMarker = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          showlightmarker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double markerDiameter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          markerdiameter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_color(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gammaSaturation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          gammasaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 showLensFlare = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          showlensflare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lensFlareBrightness = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          lensflarebrightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lensFlareFadeSpeed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          lensflarefadespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_Light::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Light.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // double fieldOfView = 3;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fieldofview(), target);
  }

  // repeated double normalVector = 4;
  if (this->_internal_normalvector_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_normalvector(), target);
  }

  // int32 lightOn = 5;
  if (this->lighton() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lighton(), target);
  }

  // double range = 6;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_range(), target);
  }

  // double intensity = 7;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_intensity(), target);
  }

  // int32 showLightMarker = 8;
  if (this->showlightmarker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_showlightmarker(), target);
  }

  // double markerDiameter = 9;
  if (!(this->markerdiameter() <= 0 && this->markerdiameter() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_markerdiameter(), target);
  }

  // repeated int32 color = 10;
  {
    int byte_size = _color_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_color(), byte_size, target);
    }
  }

  // double gammaSaturation = 11;
  if (!(this->gammasaturation() <= 0 && this->gammasaturation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_gammasaturation(), target);
  }

  // int32 showLensFlare = 12;
  if (this->showlensflare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_showlensflare(), target);
  }

  // double lensFlareBrightness = 13;
  if (!(this->lensflarebrightness() <= 0 && this->lensflarebrightness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_lensflarebrightness(), target);
  }

  // double lensFlareFadeSpeed = 14;
  if (!(this->lensflarefadespeed() <= 0 && this->lensflarefadespeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_lensflarefadespeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Light)
  return target;
}

size_t VizMessage_Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Light)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double normalVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normalvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 color = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->color_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string label = 1;
  if (!this->label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // double fieldOfView = 3;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    total_size += 1 + 8;
  }

  // double range = 6;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 lightOn = 5;
  if (this->lighton() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lighton());
  }

  // int32 showLightMarker = 8;
  if (this->showlightmarker() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showlightmarker());
  }

  // double intensity = 7;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 8;
  }

  // double markerDiameter = 9;
  if (!(this->markerdiameter() <= 0 && this->markerdiameter() >= 0)) {
    total_size += 1 + 8;
  }

  // double gammaSaturation = 11;
  if (!(this->gammasaturation() <= 0 && this->gammasaturation() >= 0)) {
    total_size += 1 + 8;
  }

  // double lensFlareBrightness = 13;
  if (!(this->lensflarebrightness() <= 0 && this->lensflarebrightness() >= 0)) {
    total_size += 1 + 8;
  }

  // double lensFlareFadeSpeed = 14;
  if (!(this->lensflarefadespeed() <= 0 && this->lensflarefadespeed() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 showLensFlare = 12;
  if (this->showlensflare() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showlensflare());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_Light::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Light* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_Light>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Light)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Light)
    MergeFrom(*source);
  }
}

void VizMessage_Light::MergeFrom(const VizMessage_Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  normalvector_.MergeFrom(from.normalvector_);
  color_.MergeFrom(from.color_);
  if (!from.label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (!(from.fieldofview() <= 0 && from.fieldofview() >= 0)) {
    _internal_set_fieldofview(from._internal_fieldofview());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
  if (from.lighton() != 0) {
    _internal_set_lighton(from._internal_lighton());
  }
  if (from.showlightmarker() != 0) {
    _internal_set_showlightmarker(from._internal_showlightmarker());
  }
  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    _internal_set_intensity(from._internal_intensity());
  }
  if (!(from.markerdiameter() <= 0 && from.markerdiameter() >= 0)) {
    _internal_set_markerdiameter(from._internal_markerdiameter());
  }
  if (!(from.gammasaturation() <= 0 && from.gammasaturation() >= 0)) {
    _internal_set_gammasaturation(from._internal_gammasaturation());
  }
  if (!(from.lensflarebrightness() <= 0 && from.lensflarebrightness() >= 0)) {
    _internal_set_lensflarebrightness(from._internal_lensflarebrightness());
  }
  if (!(from.lensflarefadespeed() <= 0 && from.lensflarefadespeed() >= 0)) {
    _internal_set_lensflarefadespeed(from._internal_lensflarefadespeed());
  }
  if (from.showlensflare() != 0) {
    _internal_set_showlensflare(from._internal_showlensflare());
  }
}

void VizMessage_Light::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Light::CopyFrom(const VizMessage_Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Light::IsInitialized() const {
  return true;
}

void VizMessage_Light::InternalSwap(VizMessage_Light* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  normalvector_.InternalSwap(&other->normalvector_);
  color_.InternalSwap(&other->color_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, GetArenaForAllocation(),
      &other->label_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_Light, showlensflare_)
      + sizeof(VizMessage_Light::showlensflare_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_Light, fieldofview_)>(
          reinterpret_cast<char*>(&fieldofview_),
          reinterpret_cast<char*>(&other->fieldofview_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_Light::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[9]);
}

// ===================================================================

class VizMessage_Transceiver::_Internal {
 public:
};

VizMessage_Transceiver::VizMessage_Transceiver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  normalvector_(arena),
  color_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.Transceiver)
}
VizMessage_Transceiver::VizMessage_Transceiver(const VizMessage_Transceiver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      normalvector_(from.normalvector_),
      color_(from.color_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fieldofview_, &from.fieldofview_,
    static_cast<size_t>(reinterpret_cast<char*>(&animationspeed_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(animationspeed_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Transceiver)
}

void VizMessage_Transceiver::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fieldofview_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&animationspeed_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(animationspeed_));
}

VizMessage_Transceiver::~VizMessage_Transceiver() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Transceiver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_Transceiver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_Transceiver::ArenaDtor(void* object) {
  VizMessage_Transceiver* _this = reinterpret_cast< VizMessage_Transceiver* >(object);
  (void)_this;
}
void VizMessage_Transceiver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_Transceiver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_Transceiver::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Transceiver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  normalvector_.Clear();
  color_.Clear();
  label_.ClearToEmpty();
  ::memset(&fieldofview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animationspeed_) -
      reinterpret_cast<char*>(&fieldofview_)) + sizeof(animationspeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_Transceiver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fieldOfView = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          fieldofview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double normalVector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_normalvector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_normalvector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool isHidden = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ishidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transmitStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          transmitstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_color(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Transceiver.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 animationSpeed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          animationspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_Transceiver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Transceiver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // double fieldOfView = 3;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fieldofview(), target);
  }

  // repeated double normalVector = 4;
  if (this->_internal_normalvector_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_normalvector(), target);
  }

  // bool isHidden = 5;
  if (this->ishidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ishidden(), target);
  }

  // int32 transmitStatus = 6;
  if (this->transmitstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_transmitstatus(), target);
  }

  // repeated int32 color = 8;
  {
    int byte_size = _color_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_color(), byte_size, target);
    }
  }

  // string label = 9;
  if (!this->label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Transceiver.label");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_label(), target);
  }

  // int32 animationSpeed = 10;
  if (this->animationspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_animationspeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Transceiver)
  return target;
}

size_t VizMessage_Transceiver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Transceiver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double normalVector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normalvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 color = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->color_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string label = 9;
  if (!this->label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // double fieldOfView = 3;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    total_size += 1 + 8;
  }

  // bool isHidden = 5;
  if (this->ishidden() != 0) {
    total_size += 1 + 1;
  }

  // int32 transmitStatus = 6;
  if (this->transmitstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transmitstatus());
  }

  // int32 animationSpeed = 10;
  if (this->animationspeed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_animationspeed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_Transceiver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Transceiver)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Transceiver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_Transceiver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Transceiver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Transceiver)
    MergeFrom(*source);
  }
}

void VizMessage_Transceiver::MergeFrom(const VizMessage_Transceiver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Transceiver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  normalvector_.MergeFrom(from.normalvector_);
  color_.MergeFrom(from.color_);
  if (!from.label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (!(from.fieldofview() <= 0 && from.fieldofview() >= 0)) {
    _internal_set_fieldofview(from._internal_fieldofview());
  }
  if (from.ishidden() != 0) {
    _internal_set_ishidden(from._internal_ishidden());
  }
  if (from.transmitstatus() != 0) {
    _internal_set_transmitstatus(from._internal_transmitstatus());
  }
  if (from.animationspeed() != 0) {
    _internal_set_animationspeed(from._internal_animationspeed());
  }
}

void VizMessage_Transceiver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Transceiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Transceiver::CopyFrom(const VizMessage_Transceiver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Transceiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Transceiver::IsInitialized() const {
  return true;
}

void VizMessage_Transceiver::InternalSwap(VizMessage_Transceiver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  normalvector_.InternalSwap(&other->normalvector_);
  color_.InternalSwap(&other->color_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, GetArenaForAllocation(),
      &other->label_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_Transceiver, animationspeed_)
      + sizeof(VizMessage_Transceiver::animationspeed_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_Transceiver, fieldofview_)>(
          reinterpret_cast<char*>(&fieldofview_),
          reinterpret_cast<char*>(&other->fieldofview_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_Transceiver::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[10]);
}

// ===================================================================

class VizMessage_CameraConfig::_Internal {
 public:
};

VizMessage_CameraConfig::VizMessage_CameraConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resolution_(arena),
  camerapos_b_(arena),
  cameradir_b_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.CameraConfig)
}
VizMessage_CameraConfig::VizMessage_CameraConfig(const VizMessage_CameraConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resolution_(from.resolution_),
      camerapos_b_(from.camerapos_b_),
      cameradir_b_(from.cameradir_b_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parentname().empty()) {
    parentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parentname(), 
      GetArenaForAllocation());
  }
  skybox_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skybox().empty()) {
    skybox_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_skybox(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cameraid_, &from.cameraid_,
    static_cast<size_t>(reinterpret_cast<char*>(&updatecameraparameters_) -
    reinterpret_cast<char*>(&cameraid_)) + sizeof(updatecameraparameters_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CameraConfig)
}

void VizMessage_CameraConfig::SharedCtor() {
parentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
skybox_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cameraid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updatecameraparameters_) -
    reinterpret_cast<char*>(&cameraid_)) + sizeof(updatecameraparameters_));
}

VizMessage_CameraConfig::~VizMessage_CameraConfig() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CameraConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_CameraConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parentname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skybox_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CameraConfig::ArenaDtor(void* object) {
  VizMessage_CameraConfig* _this = reinterpret_cast< VizMessage_CameraConfig* >(object);
  (void)_this;
}
void VizMessage_CameraConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_CameraConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_CameraConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CameraConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resolution_.Clear();
  camerapos_b_.Clear();
  cameradir_b_.Clear();
  parentname_.ClearToEmpty();
  skybox_.ClearToEmpty();
  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updatecameraparameters_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(updatecameraparameters_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_CameraConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 cameraID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cameraid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parentName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parentname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.CameraConfig.parentName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fieldOfView = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          fieldofview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int64 resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_resolution(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_resolution(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool updateCameraParameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          updatecameraparameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double cameraPos_B = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_camerapos_b(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_camerapos_b(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double cameraDir_B = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cameradir_b(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_cameradir_b(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 renderRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          renderrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string skybox = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_skybox();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.CameraConfig.skybox"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 postProcessingOn = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          postprocessingon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ppFocusDistance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          ppfocusdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ppAperture = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          ppaperture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ppFocalLength = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          ppfocallength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 ppMaxBlurSize = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ppmaxblursize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_CameraConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CameraConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_cameraid(), target);
  }

  // string parentName = 2;
  if (!this->parentname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentname().data(), static_cast<int>(this->_internal_parentname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.parentName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parentname(), target);
  }

  // double fieldOfView = 3;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fieldofview(), target);
  }

  // repeated int64 resolution = 4;
  {
    int byte_size = _resolution_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_resolution(), byte_size, target);
    }
  }

  // bool updateCameraParameters = 5;
  if (this->updatecameraparameters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_updatecameraparameters(), target);
  }

  // repeated double cameraPos_B = 7;
  if (this->_internal_camerapos_b_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_camerapos_b(), target);
  }

  // repeated double cameraDir_B = 8;
  if (this->_internal_cameradir_b_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_cameradir_b(), target);
  }

  // uint64 renderRate = 9;
  if (this->renderrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_renderrate(), target);
  }

  // string skybox = 10;
  if (!this->skybox().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skybox().data(), static_cast<int>(this->_internal_skybox().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CameraConfig.skybox");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_skybox(), target);
  }

  // int64 postProcessingOn = 11;
  if (this->postprocessingon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_postprocessingon(), target);
  }

  // double ppFocusDistance = 12;
  if (!(this->ppfocusdistance() <= 0 && this->ppfocusdistance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_ppfocusdistance(), target);
  }

  // double ppAperture = 13;
  if (!(this->ppaperture() <= 0 && this->ppaperture() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_ppaperture(), target);
  }

  // double ppFocalLength = 14;
  if (!(this->ppfocallength() <= 0 && this->ppfocallength() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_ppfocallength(), target);
  }

  // int64 ppMaxBlurSize = 15;
  if (this->ppmaxblursize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_ppmaxblursize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CameraConfig)
  return target;
}

size_t VizMessage_CameraConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CameraConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 resolution = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->resolution_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _resolution_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double cameraPos_B = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_camerapos_b_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double cameraDir_B = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cameradir_b_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string parentName = 2;
  if (!this->parentname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentname());
  }

  // string skybox = 10;
  if (!this->skybox().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skybox());
  }

  // int64 cameraID = 1;
  if (this->cameraid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cameraid());
  }

  // double fieldOfView = 3;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 renderRate = 9;
  if (this->renderrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_renderrate());
  }

  // int64 postProcessingOn = 11;
  if (this->postprocessingon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_postprocessingon());
  }

  // double ppFocusDistance = 12;
  if (!(this->ppfocusdistance() <= 0 && this->ppfocusdistance() >= 0)) {
    total_size += 1 + 8;
  }

  // double ppAperture = 13;
  if (!(this->ppaperture() <= 0 && this->ppaperture() >= 0)) {
    total_size += 1 + 8;
  }

  // double ppFocalLength = 14;
  if (!(this->ppfocallength() <= 0 && this->ppfocallength() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 ppMaxBlurSize = 15;
  if (this->ppmaxblursize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ppmaxblursize());
  }

  // bool updateCameraParameters = 5;
  if (this->updatecameraparameters() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_CameraConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CameraConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_CameraConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CameraConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CameraConfig)
    MergeFrom(*source);
  }
}

void VizMessage_CameraConfig::MergeFrom(const VizMessage_CameraConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resolution_.MergeFrom(from.resolution_);
  camerapos_b_.MergeFrom(from.camerapos_b_);
  cameradir_b_.MergeFrom(from.cameradir_b_);
  if (!from.parentname().empty()) {
    _internal_set_parentname(from._internal_parentname());
  }
  if (!from.skybox().empty()) {
    _internal_set_skybox(from._internal_skybox());
  }
  if (from.cameraid() != 0) {
    _internal_set_cameraid(from._internal_cameraid());
  }
  if (!(from.fieldofview() <= 0 && from.fieldofview() >= 0)) {
    _internal_set_fieldofview(from._internal_fieldofview());
  }
  if (from.renderrate() != 0) {
    _internal_set_renderrate(from._internal_renderrate());
  }
  if (from.postprocessingon() != 0) {
    _internal_set_postprocessingon(from._internal_postprocessingon());
  }
  if (!(from.ppfocusdistance() <= 0 && from.ppfocusdistance() >= 0)) {
    _internal_set_ppfocusdistance(from._internal_ppfocusdistance());
  }
  if (!(from.ppaperture() <= 0 && from.ppaperture() >= 0)) {
    _internal_set_ppaperture(from._internal_ppaperture());
  }
  if (!(from.ppfocallength() <= 0 && from.ppfocallength() >= 0)) {
    _internal_set_ppfocallength(from._internal_ppfocallength());
  }
  if (from.ppmaxblursize() != 0) {
    _internal_set_ppmaxblursize(from._internal_ppmaxblursize());
  }
  if (from.updatecameraparameters() != 0) {
    _internal_set_updatecameraparameters(from._internal_updatecameraparameters());
  }
}

void VizMessage_CameraConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CameraConfig::CopyFrom(const VizMessage_CameraConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CameraConfig::IsInitialized() const {
  return true;
}

void VizMessage_CameraConfig::InternalSwap(VizMessage_CameraConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resolution_.InternalSwap(&other->resolution_);
  camerapos_b_.InternalSwap(&other->camerapos_b_);
  cameradir_b_.InternalSwap(&other->cameradir_b_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parentname_, GetArenaForAllocation(),
      &other->parentname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &skybox_, GetArenaForAllocation(),
      &other->skybox_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_CameraConfig, updatecameraparameters_)
      + sizeof(VizMessage_CameraConfig::updatecameraparameters_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_CameraConfig, cameraid_)>(
          reinterpret_cast<char*>(&cameraid_),
          reinterpret_cast<char*>(&other->cameraid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_CameraConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[11]);
}

// ===================================================================

class VizMessage_PointLine::_Internal {
 public:
};

VizMessage_PointLine::VizMessage_PointLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  linecolor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.PointLine)
}
VizMessage_PointLine::VizMessage_PointLine(const VizMessage_PointLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      linecolor_(from.linecolor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frombodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frombodyname().empty()) {
    frombodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frombodyname(), 
      GetArenaForAllocation());
  }
  tobodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tobodyname().empty()) {
    tobodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tobodyname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.PointLine)
}

void VizMessage_PointLine::SharedCtor() {
frombodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tobodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VizMessage_PointLine::~VizMessage_PointLine() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.PointLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_PointLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frombodyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tobodyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_PointLine::ArenaDtor(void* object) {
  VizMessage_PointLine* _this = reinterpret_cast< VizMessage_PointLine* >(object);
  (void)_this;
}
void VizMessage_PointLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_PointLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_PointLine::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.PointLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linecolor_.Clear();
  frombodyname_.ClearToEmpty();
  tobodyname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_PointLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fromBodyName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frombodyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.PointLine.fromBodyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string toBodyName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tobodyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.PointLine.toBodyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 lineColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_linecolor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_linecolor(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_PointLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.PointLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fromBodyName = 1;
  if (!this->frombodyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frombodyname().data(), static_cast<int>(this->_internal_frombodyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PointLine.fromBodyName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frombodyname(), target);
  }

  // string toBodyName = 2;
  if (!this->tobodyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tobodyname().data(), static_cast<int>(this->_internal_tobodyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.PointLine.toBodyName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tobodyname(), target);
  }

  // repeated int32 lineColor = 3;
  {
    int byte_size = _linecolor_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_linecolor(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.PointLine)
  return target;
}

size_t VizMessage_PointLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.PointLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 lineColor = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->linecolor_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _linecolor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string fromBodyName = 1;
  if (!this->frombodyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frombodyname());
  }

  // string toBodyName = 2;
  if (!this->tobodyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tobodyname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_PointLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.PointLine)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_PointLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_PointLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.PointLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.PointLine)
    MergeFrom(*source);
  }
}

void VizMessage_PointLine::MergeFrom(const VizMessage_PointLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.PointLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linecolor_.MergeFrom(from.linecolor_);
  if (!from.frombodyname().empty()) {
    _internal_set_frombodyname(from._internal_frombodyname());
  }
  if (!from.tobodyname().empty()) {
    _internal_set_tobodyname(from._internal_tobodyname());
  }
}

void VizMessage_PointLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.PointLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_PointLine::CopyFrom(const VizMessage_PointLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.PointLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_PointLine::IsInitialized() const {
  return true;
}

void VizMessage_PointLine::InternalSwap(VizMessage_PointLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  linecolor_.InternalSwap(&other->linecolor_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frombodyname_, GetArenaForAllocation(),
      &other->frombodyname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tobodyname_, GetArenaForAllocation(),
      &other->tobodyname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_PointLine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[12]);
}

// ===================================================================

class VizMessage_KeepOutInCone::_Internal {
 public:
};

VizMessage_KeepOutInCone::VizMessage_KeepOutInCone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  normalvector_(arena),
  conecolor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.KeepOutInCone)
}
VizMessage_KeepOutInCone::VizMessage_KeepOutInCone(const VizMessage_KeepOutInCone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      normalvector_(from.normalvector_),
      conecolor_(from.conecolor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frombodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frombodyname().empty()) {
    frombodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frombodyname(), 
      GetArenaForAllocation());
  }
  tobodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tobodyname().empty()) {
    tobodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tobodyname(), 
      GetArenaForAllocation());
  }
  conename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conename().empty()) {
    conename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_conename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&incidenceangle_, &from.incidenceangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&iskeepin_) -
    reinterpret_cast<char*>(&incidenceangle_)) + sizeof(iskeepin_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.KeepOutInCone)
}

void VizMessage_KeepOutInCone::SharedCtor() {
frombodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tobodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
conename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&incidenceangle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iskeepin_) -
    reinterpret_cast<char*>(&incidenceangle_)) + sizeof(iskeepin_));
}

VizMessage_KeepOutInCone::~VizMessage_KeepOutInCone() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.KeepOutInCone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_KeepOutInCone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frombodyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tobodyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_KeepOutInCone::ArenaDtor(void* object) {
  VizMessage_KeepOutInCone* _this = reinterpret_cast< VizMessage_KeepOutInCone* >(object);
  (void)_this;
}
void VizMessage_KeepOutInCone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_KeepOutInCone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_KeepOutInCone::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  normalvector_.Clear();
  conecolor_.Clear();
  frombodyname_.ClearToEmpty();
  tobodyname_.ClearToEmpty();
  conename_.ClearToEmpty();
  ::memset(&incidenceangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iskeepin_) -
      reinterpret_cast<char*>(&incidenceangle_)) + sizeof(iskeepin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_KeepOutInCone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isKeepIn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iskeepin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double normalVector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_normalvector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_normalvector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double incidenceAngle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          incidenceangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double coneHeight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          coneheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string fromBodyName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_frombodyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string toBodyName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_tobodyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 coneColor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_conecolor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_conecolor(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coneName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_conename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.KeepOutInCone.coneName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_KeepOutInCone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isKeepIn = 1;
  if (this->iskeepin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iskeepin(), target);
  }

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated double normalVector = 3;
  if (this->_internal_normalvector_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_normalvector(), target);
  }

  // double incidenceAngle = 4;
  if (!(this->incidenceangle() <= 0 && this->incidenceangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_incidenceangle(), target);
  }

  // double coneHeight = 5;
  if (!(this->coneheight() <= 0 && this->coneheight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_coneheight(), target);
  }

  // string fromBodyName = 6;
  if (!this->frombodyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frombodyname().data(), static_cast<int>(this->_internal_frombodyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.KeepOutInCone.fromBodyName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_frombodyname(), target);
  }

  // string toBodyName = 7;
  if (!this->tobodyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tobodyname().data(), static_cast<int>(this->_internal_tobodyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.KeepOutInCone.toBodyName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_tobodyname(), target);
  }

  // repeated int32 coneColor = 8;
  {
    int byte_size = _conecolor_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_conecolor(), byte_size, target);
    }
  }

  // string coneName = 9;
  if (!this->conename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conename().data(), static_cast<int>(this->_internal_conename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.KeepOutInCone.coneName");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_conename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.KeepOutInCone)
  return target;
}

size_t VizMessage_KeepOutInCone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double normalVector = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normalvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 coneColor = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->conecolor_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _conecolor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string fromBodyName = 6;
  if (!this->frombodyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frombodyname());
  }

  // string toBodyName = 7;
  if (!this->tobodyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tobodyname());
  }

  // string coneName = 9;
  if (!this->conename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conename());
  }

  // double incidenceAngle = 4;
  if (!(this->incidenceangle() <= 0 && this->incidenceangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double coneHeight = 5;
  if (!(this->coneheight() <= 0 && this->coneheight() >= 0)) {
    total_size += 1 + 8;
  }

  // bool isKeepIn = 1;
  if (this->iskeepin() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_KeepOutInCone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_KeepOutInCone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_KeepOutInCone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.KeepOutInCone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.KeepOutInCone)
    MergeFrom(*source);
  }
}

void VizMessage_KeepOutInCone::MergeFrom(const VizMessage_KeepOutInCone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  normalvector_.MergeFrom(from.normalvector_);
  conecolor_.MergeFrom(from.conecolor_);
  if (!from.frombodyname().empty()) {
    _internal_set_frombodyname(from._internal_frombodyname());
  }
  if (!from.tobodyname().empty()) {
    _internal_set_tobodyname(from._internal_tobodyname());
  }
  if (!from.conename().empty()) {
    _internal_set_conename(from._internal_conename());
  }
  if (!(from.incidenceangle() <= 0 && from.incidenceangle() >= 0)) {
    _internal_set_incidenceangle(from._internal_incidenceangle());
  }
  if (!(from.coneheight() <= 0 && from.coneheight() >= 0)) {
    _internal_set_coneheight(from._internal_coneheight());
  }
  if (from.iskeepin() != 0) {
    _internal_set_iskeepin(from._internal_iskeepin());
  }
}

void VizMessage_KeepOutInCone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_KeepOutInCone::CopyFrom(const VizMessage_KeepOutInCone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.KeepOutInCone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_KeepOutInCone::IsInitialized() const {
  return true;
}

void VizMessage_KeepOutInCone::InternalSwap(VizMessage_KeepOutInCone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  normalvector_.InternalSwap(&other->normalvector_);
  conecolor_.InternalSwap(&other->conecolor_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frombodyname_, GetArenaForAllocation(),
      &other->frombodyname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tobodyname_, GetArenaForAllocation(),
      &other->tobodyname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &conename_, GetArenaForAllocation(),
      &other->conename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_KeepOutInCone, iskeepin_)
      + sizeof(VizMessage_KeepOutInCone::iskeepin_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_KeepOutInCone, incidenceangle_)>(
          reinterpret_cast<char*>(&incidenceangle_),
          reinterpret_cast<char*>(&other->incidenceangle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_KeepOutInCone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[13]);
}

// ===================================================================

class VizMessage_StandardCameraSettings::_Internal {
 public:
};

VizMessage_StandardCameraSettings::VizMessage_StandardCameraSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pointingvector_(arena),
  position_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.StandardCameraSettings)
}
VizMessage_StandardCameraSettings::VizMessage_StandardCameraSettings(const VizMessage_StandardCameraSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pointingvector_(from.pointingvector_),
      position_(from.position_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecraftname().empty()) {
    spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spacecraftname(), 
      GetArenaForAllocation());
  }
  bodytarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bodytarget().empty()) {
    bodytarget_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bodytarget(), 
      GetArenaForAllocation());
  }
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_displayname().empty()) {
    displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fieldofview_, &from.fieldofview_,
    static_cast<size_t>(reinterpret_cast<char*>(&setview_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(setview_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.StandardCameraSettings)
}

void VizMessage_StandardCameraSettings::SharedCtor() {
spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bodytarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fieldofview_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&setview_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(setview_));
}

VizMessage_StandardCameraSettings::~VizMessage_StandardCameraSettings() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.StandardCameraSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_StandardCameraSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  spacecraftname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bodytarget_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_StandardCameraSettings::ArenaDtor(void* object) {
  VizMessage_StandardCameraSettings* _this = reinterpret_cast< VizMessage_StandardCameraSettings* >(object);
  (void)_this;
}
void VizMessage_StandardCameraSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_StandardCameraSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_StandardCameraSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.StandardCameraSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pointingvector_.Clear();
  position_.Clear();
  spacecraftname_.ClearToEmpty();
  bodytarget_.ClearToEmpty();
  displayname_.ClearToEmpty();
  ::memset(&fieldofview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setview_) -
      reinterpret_cast<char*>(&fieldofview_)) + sizeof(setview_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_StandardCameraSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spacecraftName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spacecraftname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.StandardCameraSettings.spacecraftName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 setMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          setmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fieldOfView = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          fieldofview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string bodyTarget = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bodytarget();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.StandardCameraSettings.bodyTarget"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 setView = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          setview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double pointingVector = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_pointingvector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_pointingvector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string displayName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_displayname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.StandardCameraSettings.displayName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_StandardCameraSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.StandardCameraSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecraftname().data(), static_cast<int>(this->_internal_spacecraftname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.StandardCameraSettings.spacecraftName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spacecraftname(), target);
  }

  // int32 setMode = 3;
  if (this->setmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_setmode(), target);
  }

  // double fieldOfView = 5;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_fieldofview(), target);
  }

  // string bodyTarget = 6;
  if (!this->bodytarget().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bodytarget().data(), static_cast<int>(this->_internal_bodytarget().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.StandardCameraSettings.bodyTarget");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bodytarget(), target);
  }

  // int32 setView = 7;
  if (this->setview() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_setview(), target);
  }

  // repeated double pointingVector = 8;
  if (this->_internal_pointingvector_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_pointingvector(), target);
  }

  // repeated double position = 9;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_position(), target);
  }

  // string displayName = 10;
  if (!this->displayname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.StandardCameraSettings.displayName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_displayname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.StandardCameraSettings)
  return target;
}

size_t VizMessage_StandardCameraSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.StandardCameraSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double pointingVector = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pointingvector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double position = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecraftname());
  }

  // string bodyTarget = 6;
  if (!this->bodytarget().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bodytarget());
  }

  // string displayName = 10;
  if (!this->displayname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());
  }

  // double fieldOfView = 5;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 setMode = 3;
  if (this->setmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setmode());
  }

  // int32 setView = 7;
  if (this->setview() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setview());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_StandardCameraSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.StandardCameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_StandardCameraSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_StandardCameraSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.StandardCameraSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.StandardCameraSettings)
    MergeFrom(*source);
  }
}

void VizMessage_StandardCameraSettings::MergeFrom(const VizMessage_StandardCameraSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.StandardCameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pointingvector_.MergeFrom(from.pointingvector_);
  position_.MergeFrom(from.position_);
  if (!from.spacecraftname().empty()) {
    _internal_set_spacecraftname(from._internal_spacecraftname());
  }
  if (!from.bodytarget().empty()) {
    _internal_set_bodytarget(from._internal_bodytarget());
  }
  if (!from.displayname().empty()) {
    _internal_set_displayname(from._internal_displayname());
  }
  if (!(from.fieldofview() <= 0 && from.fieldofview() >= 0)) {
    _internal_set_fieldofview(from._internal_fieldofview());
  }
  if (from.setmode() != 0) {
    _internal_set_setmode(from._internal_setmode());
  }
  if (from.setview() != 0) {
    _internal_set_setview(from._internal_setview());
  }
}

void VizMessage_StandardCameraSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.StandardCameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_StandardCameraSettings::CopyFrom(const VizMessage_StandardCameraSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.StandardCameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_StandardCameraSettings::IsInitialized() const {
  return true;
}

void VizMessage_StandardCameraSettings::InternalSwap(VizMessage_StandardCameraSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pointingvector_.InternalSwap(&other->pointingvector_);
  position_.InternalSwap(&other->position_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spacecraftname_, GetArenaForAllocation(),
      &other->spacecraftname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bodytarget_, GetArenaForAllocation(),
      &other->bodytarget_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &displayname_, GetArenaForAllocation(),
      &other->displayname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_StandardCameraSettings, setview_)
      + sizeof(VizMessage_StandardCameraSettings::setview_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_StandardCameraSettings, fieldofview_)>(
          reinterpret_cast<char*>(&fieldofview_),
          reinterpret_cast<char*>(&other->fieldofview_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_StandardCameraSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[14]);
}

// ===================================================================

class VizMessage_ActuatorSettings::_Internal {
 public:
};

VizMessage_ActuatorSettings::VizMessage_ActuatorSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.ActuatorSettings)
}
VizMessage_ActuatorSettings::VizMessage_ActuatorSettings(const VizMessage_ActuatorSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecraftname().empty()) {
    spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spacecraftname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&viewthrusterpanel_, &from.viewthrusterpanel_,
    static_cast<size_t>(reinterpret_cast<char*>(&showrwlabels_) -
    reinterpret_cast<char*>(&viewthrusterpanel_)) + sizeof(showrwlabels_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.ActuatorSettings)
}

void VizMessage_ActuatorSettings::SharedCtor() {
spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&viewthrusterpanel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&showrwlabels_) -
    reinterpret_cast<char*>(&viewthrusterpanel_)) + sizeof(showrwlabels_));
}

VizMessage_ActuatorSettings::~VizMessage_ActuatorSettings() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.ActuatorSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_ActuatorSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  spacecraftname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_ActuatorSettings::ArenaDtor(void* object) {
  VizMessage_ActuatorSettings* _this = reinterpret_cast< VizMessage_ActuatorSettings* >(object);
  (void)_this;
}
void VizMessage_ActuatorSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_ActuatorSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_ActuatorSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacecraftname_.ClearToEmpty();
  ::memset(&viewthrusterpanel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showrwlabels_) -
      reinterpret_cast<char*>(&viewthrusterpanel_)) + sizeof(showrwlabels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_ActuatorSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spacecraftName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spacecraftname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 viewThrusterPanel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          viewthrusterpanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 viewThrusterHUD = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          viewthrusterhud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 viewRWPanel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          viewrwpanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 viewRWHUD = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          viewrwhud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showThrusterLabels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          showthrusterlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showRWLabels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          showrwlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_ActuatorSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecraftname().data(), static_cast<int>(this->_internal_spacecraftname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.ActuatorSettings.spacecraftName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spacecraftname(), target);
  }

  // int32 viewThrusterPanel = 2;
  if (this->viewthrusterpanel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_viewthrusterpanel(), target);
  }

  // int32 viewThrusterHUD = 3;
  if (this->viewthrusterhud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_viewthrusterhud(), target);
  }

  // int32 viewRWPanel = 4;
  if (this->viewrwpanel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_viewrwpanel(), target);
  }

  // int32 viewRWHUD = 5;
  if (this->viewrwhud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_viewrwhud(), target);
  }

  // int32 showThrusterLabels = 6;
  if (this->showthrusterlabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_showthrusterlabels(), target);
  }

  // int32 showRWLabels = 7;
  if (this->showrwlabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_showrwlabels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.ActuatorSettings)
  return target;
}

size_t VizMessage_ActuatorSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecraftname());
  }

  // int32 viewThrusterPanel = 2;
  if (this->viewthrusterpanel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewthrusterpanel());
  }

  // int32 viewThrusterHUD = 3;
  if (this->viewthrusterhud() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewthrusterhud());
  }

  // int32 viewRWPanel = 4;
  if (this->viewrwpanel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewrwpanel());
  }

  // int32 viewRWHUD = 5;
  if (this->viewrwhud() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewrwhud());
  }

  // int32 showThrusterLabels = 6;
  if (this->showthrusterlabels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showthrusterlabels());
  }

  // int32 showRWLabels = 7;
  if (this->showrwlabels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showrwlabels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_ActuatorSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_ActuatorSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_ActuatorSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.ActuatorSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.ActuatorSettings)
    MergeFrom(*source);
  }
}

void VizMessage_ActuatorSettings::MergeFrom(const VizMessage_ActuatorSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.spacecraftname().empty()) {
    _internal_set_spacecraftname(from._internal_spacecraftname());
  }
  if (from.viewthrusterpanel() != 0) {
    _internal_set_viewthrusterpanel(from._internal_viewthrusterpanel());
  }
  if (from.viewthrusterhud() != 0) {
    _internal_set_viewthrusterhud(from._internal_viewthrusterhud());
  }
  if (from.viewrwpanel() != 0) {
    _internal_set_viewrwpanel(from._internal_viewrwpanel());
  }
  if (from.viewrwhud() != 0) {
    _internal_set_viewrwhud(from._internal_viewrwhud());
  }
  if (from.showthrusterlabels() != 0) {
    _internal_set_showthrusterlabels(from._internal_showthrusterlabels());
  }
  if (from.showrwlabels() != 0) {
    _internal_set_showrwlabels(from._internal_showrwlabels());
  }
}

void VizMessage_ActuatorSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_ActuatorSettings::CopyFrom(const VizMessage_ActuatorSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.ActuatorSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_ActuatorSettings::IsInitialized() const {
  return true;
}

void VizMessage_ActuatorSettings::InternalSwap(VizMessage_ActuatorSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spacecraftname_, GetArenaForAllocation(),
      &other->spacecraftname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_ActuatorSettings, showrwlabels_)
      + sizeof(VizMessage_ActuatorSettings::showrwlabels_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_ActuatorSettings, viewthrusterpanel_)>(
          reinterpret_cast<char*>(&viewthrusterpanel_),
          reinterpret_cast<char*>(&other->viewthrusterpanel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_ActuatorSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[15]);
}

// ===================================================================

class VizMessage_InstrumentSettings::_Internal {
 public:
};

VizMessage_InstrumentSettings::VizMessage_InstrumentSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.InstrumentSettings)
}
VizMessage_InstrumentSettings::VizMessage_InstrumentSettings(const VizMessage_InstrumentSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecraftname().empty()) {
    spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spacecraftname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&viewcsspanel_, &from.viewcsspanel_,
    static_cast<size_t>(reinterpret_cast<char*>(&showmultispherelabels_) -
    reinterpret_cast<char*>(&viewcsspanel_)) + sizeof(showmultispherelabels_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.InstrumentSettings)
}

void VizMessage_InstrumentSettings::SharedCtor() {
spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&viewcsspanel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&showmultispherelabels_) -
    reinterpret_cast<char*>(&viewcsspanel_)) + sizeof(showmultispherelabels_));
}

VizMessage_InstrumentSettings::~VizMessage_InstrumentSettings() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.InstrumentSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_InstrumentSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  spacecraftname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_InstrumentSettings::ArenaDtor(void* object) {
  VizMessage_InstrumentSettings* _this = reinterpret_cast< VizMessage_InstrumentSettings* >(object);
  (void)_this;
}
void VizMessage_InstrumentSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_InstrumentSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_InstrumentSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.InstrumentSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spacecraftname_.ClearToEmpty();
  ::memset(&viewcsspanel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showmultispherelabels_) -
      reinterpret_cast<char*>(&viewcsspanel_)) + sizeof(showmultispherelabels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_InstrumentSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spacecraftName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spacecraftname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.InstrumentSettings.spacecraftName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 viewCSSPanel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          viewcsspanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 viewCSSCoverage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          viewcsscoverage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showCSSLabels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          showcsslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 viewCSSBoresight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          viewcssboresight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showGenericSensorLabels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          showgenericsensorlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showTransceiverLabels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          showtransceiverlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showTransceiverFrustrum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          showtransceiverfrustrum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showGenericStoragePanel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          showgenericstoragepanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showMultiSphereLabels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          showmultispherelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_InstrumentSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.InstrumentSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecraftname().data(), static_cast<int>(this->_internal_spacecraftname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.InstrumentSettings.spacecraftName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spacecraftname(), target);
  }

  // int32 viewCSSPanel = 2;
  if (this->viewcsspanel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_viewcsspanel(), target);
  }

  // int32 viewCSSCoverage = 3;
  if (this->viewcsscoverage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_viewcsscoverage(), target);
  }

  // int32 showCSSLabels = 4;
  if (this->showcsslabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_showcsslabels(), target);
  }

  // int32 viewCSSBoresight = 5;
  if (this->viewcssboresight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_viewcssboresight(), target);
  }

  // int32 showGenericSensorLabels = 6;
  if (this->showgenericsensorlabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_showgenericsensorlabels(), target);
  }

  // int32 showTransceiverLabels = 7;
  if (this->showtransceiverlabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_showtransceiverlabels(), target);
  }

  // int32 showTransceiverFrustrum = 8;
  if (this->showtransceiverfrustrum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_showtransceiverfrustrum(), target);
  }

  // int32 showGenericStoragePanel = 9;
  if (this->showgenericstoragepanel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_showgenericstoragepanel(), target);
  }

  // int32 showMultiSphereLabels = 10;
  if (this->showmultispherelabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_showmultispherelabels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.InstrumentSettings)
  return target;
}

size_t VizMessage_InstrumentSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.InstrumentSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecraftname());
  }

  // int32 viewCSSPanel = 2;
  if (this->viewcsspanel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewcsspanel());
  }

  // int32 viewCSSCoverage = 3;
  if (this->viewcsscoverage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewcsscoverage());
  }

  // int32 showCSSLabels = 4;
  if (this->showcsslabels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showcsslabels());
  }

  // int32 viewCSSBoresight = 5;
  if (this->viewcssboresight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewcssboresight());
  }

  // int32 showGenericSensorLabels = 6;
  if (this->showgenericsensorlabels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showgenericsensorlabels());
  }

  // int32 showTransceiverLabels = 7;
  if (this->showtransceiverlabels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showtransceiverlabels());
  }

  // int32 showTransceiverFrustrum = 8;
  if (this->showtransceiverfrustrum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showtransceiverfrustrum());
  }

  // int32 showGenericStoragePanel = 9;
  if (this->showgenericstoragepanel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showgenericstoragepanel());
  }

  // int32 showMultiSphereLabels = 10;
  if (this->showmultispherelabels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showmultispherelabels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_InstrumentSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.InstrumentSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_InstrumentSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_InstrumentSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.InstrumentSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.InstrumentSettings)
    MergeFrom(*source);
  }
}

void VizMessage_InstrumentSettings::MergeFrom(const VizMessage_InstrumentSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.InstrumentSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.spacecraftname().empty()) {
    _internal_set_spacecraftname(from._internal_spacecraftname());
  }
  if (from.viewcsspanel() != 0) {
    _internal_set_viewcsspanel(from._internal_viewcsspanel());
  }
  if (from.viewcsscoverage() != 0) {
    _internal_set_viewcsscoverage(from._internal_viewcsscoverage());
  }
  if (from.showcsslabels() != 0) {
    _internal_set_showcsslabels(from._internal_showcsslabels());
  }
  if (from.viewcssboresight() != 0) {
    _internal_set_viewcssboresight(from._internal_viewcssboresight());
  }
  if (from.showgenericsensorlabels() != 0) {
    _internal_set_showgenericsensorlabels(from._internal_showgenericsensorlabels());
  }
  if (from.showtransceiverlabels() != 0) {
    _internal_set_showtransceiverlabels(from._internal_showtransceiverlabels());
  }
  if (from.showtransceiverfrustrum() != 0) {
    _internal_set_showtransceiverfrustrum(from._internal_showtransceiverfrustrum());
  }
  if (from.showgenericstoragepanel() != 0) {
    _internal_set_showgenericstoragepanel(from._internal_showgenericstoragepanel());
  }
  if (from.showmultispherelabels() != 0) {
    _internal_set_showmultispherelabels(from._internal_showmultispherelabels());
  }
}

void VizMessage_InstrumentSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.InstrumentSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_InstrumentSettings::CopyFrom(const VizMessage_InstrumentSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.InstrumentSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_InstrumentSettings::IsInitialized() const {
  return true;
}

void VizMessage_InstrumentSettings::InternalSwap(VizMessage_InstrumentSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spacecraftname_, GetArenaForAllocation(),
      &other->spacecraftname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_InstrumentSettings, showmultispherelabels_)
      + sizeof(VizMessage_InstrumentSettings::showmultispherelabels_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_InstrumentSettings, viewcsspanel_)>(
          reinterpret_cast<char*>(&viewcsspanel_),
          reinterpret_cast<char*>(&other->viewcsspanel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_InstrumentSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[16]);
}

// ===================================================================

class VizMessage_CustomModel::_Internal {
 public:
};

VizMessage_CustomModel::VizMessage_CustomModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  simbodiestomodify_(arena),
  offset_(arena),
  rotation_(arena),
  scale_(arena),
  color_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.CustomModel)
}
VizMessage_CustomModel::VizMessage_CustomModel(const VizMessage_CustomModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      simbodiestomodify_(from.simbodiestomodify_),
      offset_(from.offset_),
      rotation_(from.rotation_),
      scale_(from.scale_),
      color_(from.color_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modelpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modelpath().empty()) {
    modelpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelpath(), 
      GetArenaForAllocation());
  }
  customtexturepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customtexturepath().empty()) {
    customtexturepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customtexturepath(), 
      GetArenaForAllocation());
  }
  normalmappath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_normalmappath().empty()) {
    normalmappath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_normalmappath(), 
      GetArenaForAllocation());
  }
  shader_ = from.shader_;
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.CustomModel)
}

void VizMessage_CustomModel::SharedCtor() {
modelpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customtexturepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
normalmappath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shader_ = 0;
}

VizMessage_CustomModel::~VizMessage_CustomModel() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.CustomModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_CustomModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modelpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customtexturepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normalmappath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_CustomModel::ArenaDtor(void* object) {
  VizMessage_CustomModel* _this = reinterpret_cast< VizMessage_CustomModel* >(object);
  (void)_this;
}
void VizMessage_CustomModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_CustomModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_CustomModel::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.CustomModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  simbodiestomodify_.Clear();
  offset_.Clear();
  rotation_.Clear();
  scale_.Clear();
  color_.Clear();
  modelpath_.ClearToEmpty();
  customtexturepath_.ClearToEmpty();
  normalmappath_.ClearToEmpty();
  shader_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_CustomModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string modelPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_modelpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.CustomModel.modelPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string simBodiesToModify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_simbodiestomodify();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_offset(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rotation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_rotation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_scale(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string customTexturePath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_customtexturepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.CustomModel.customTexturePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string normalMapPath = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_normalmappath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.CustomModel.normalMapPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shader = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          shader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 color = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_color(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_CustomModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.CustomModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelPath = 1;
  if (!this->modelpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelpath().data(), static_cast<int>(this->_internal_modelpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.modelPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_modelpath(), target);
  }

  // repeated string simBodiesToModify = 2;
  for (int i = 0, n = this->_internal_simbodiestomodify_size(); i < n; i++) {
    const auto& s = this->_internal_simbodiestomodify(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.simBodiesToModify");
    target = stream->WriteString(2, s, target);
  }

  // repeated double offset = 3;
  if (this->_internal_offset_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_offset(), target);
  }

  // repeated double rotation = 4;
  if (this->_internal_rotation_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_rotation(), target);
  }

  // repeated double scale = 5;
  if (this->_internal_scale_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_scale(), target);
  }

  // string customTexturePath = 6;
  if (!this->customtexturepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customtexturepath().data(), static_cast<int>(this->_internal_customtexturepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.customTexturePath");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_customtexturepath(), target);
  }

  // string normalMapPath = 7;
  if (!this->normalmappath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_normalmappath().data(), static_cast<int>(this->_internal_normalmappath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.CustomModel.normalMapPath");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_normalmappath(), target);
  }

  // int32 shader = 8;
  if (this->shader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_shader(), target);
  }

  // repeated int32 color = 9;
  {
    int byte_size = _color_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_color(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.CustomModel)
  return target;
}

size_t VizMessage_CustomModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.CustomModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string simBodiesToModify = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(simbodiestomodify_.size());
  for (int i = 0, n = simbodiestomodify_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      simbodiestomodify_.Get(i));
  }

  // repeated double offset = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_offset_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double rotation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double scale = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scale_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 color = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->color_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string modelPath = 1;
  if (!this->modelpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelpath());
  }

  // string customTexturePath = 6;
  if (!this->customtexturepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customtexturepath());
  }

  // string normalMapPath = 7;
  if (!this->normalmappath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_normalmappath());
  }

  // int32 shader = 8;
  if (this->shader() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shader());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_CustomModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.CustomModel)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_CustomModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_CustomModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.CustomModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.CustomModel)
    MergeFrom(*source);
  }
}

void VizMessage_CustomModel::MergeFrom(const VizMessage_CustomModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.CustomModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  simbodiestomodify_.MergeFrom(from.simbodiestomodify_);
  offset_.MergeFrom(from.offset_);
  rotation_.MergeFrom(from.rotation_);
  scale_.MergeFrom(from.scale_);
  color_.MergeFrom(from.color_);
  if (!from.modelpath().empty()) {
    _internal_set_modelpath(from._internal_modelpath());
  }
  if (!from.customtexturepath().empty()) {
    _internal_set_customtexturepath(from._internal_customtexturepath());
  }
  if (!from.normalmappath().empty()) {
    _internal_set_normalmappath(from._internal_normalmappath());
  }
  if (from.shader() != 0) {
    _internal_set_shader(from._internal_shader());
  }
}

void VizMessage_CustomModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.CustomModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_CustomModel::CopyFrom(const VizMessage_CustomModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.CustomModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_CustomModel::IsInitialized() const {
  return true;
}

void VizMessage_CustomModel::InternalSwap(VizMessage_CustomModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  simbodiestomodify_.InternalSwap(&other->simbodiestomodify_);
  offset_.InternalSwap(&other->offset_);
  rotation_.InternalSwap(&other->rotation_);
  scale_.InternalSwap(&other->scale_);
  color_.InternalSwap(&other->color_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelpath_, GetArenaForAllocation(),
      &other->modelpath_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &customtexturepath_, GetArenaForAllocation(),
      &other->customtexturepath_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &normalmappath_, GetArenaForAllocation(),
      &other->normalmappath_, other->GetArenaForAllocation()
  );
  swap(shader_, other->shader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_CustomModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[17]);
}

// ===================================================================

class VizMessage_LiveVizSettingsPb::_Internal {
 public:
};

VizMessage_LiveVizSettingsPb::VizMessage_LiveVizSettingsPb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targetlines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
}
VizMessage_LiveVizSettingsPb::VizMessage_LiveVizSettingsPb(const VizMessage_LiveVizSettingsPb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targetlines_(from.targetlines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  relativeorbitchief_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_relativeorbitchief().empty()) {
    relativeorbitchief_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_relativeorbitchief(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
}

void VizMessage_LiveVizSettingsPb::SharedCtor() {
relativeorbitchief_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VizMessage_LiveVizSettingsPb::~VizMessage_LiveVizSettingsPb() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_LiveVizSettingsPb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  relativeorbitchief_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_LiveVizSettingsPb::ArenaDtor(void* object) {
  VizMessage_LiveVizSettingsPb* _this = reinterpret_cast< VizMessage_LiveVizSettingsPb* >(object);
  (void)_this;
}
void VizMessage_LiveVizSettingsPb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_LiveVizSettingsPb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_LiveVizSettingsPb::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetlines_.Clear();
  relativeorbitchief_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_LiveVizSettingsPb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .vizProtobufferMessage.VizMessage.PointLine targetLines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targetlines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string relativeOrbitChief = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_relativeorbitchief();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.LiveVizSettingsPb.relativeOrbitChief"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_LiveVizSettingsPb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vizProtobufferMessage.VizMessage.PointLine targetLines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_targetlines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_targetlines(i), target, stream);
  }

  // string relativeOrbitChief = 2;
  if (!this->relativeorbitchief().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_relativeorbitchief().data(), static_cast<int>(this->_internal_relativeorbitchief().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.LiveVizSettingsPb.relativeOrbitChief");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_relativeorbitchief(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
  return target;
}

size_t VizMessage_LiveVizSettingsPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vizProtobufferMessage.VizMessage.PointLine targetLines = 1;
  total_size += 1UL * this->_internal_targetlines_size();
  for (const auto& msg : this->targetlines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string relativeOrbitChief = 2;
  if (!this->relativeorbitchief().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relativeorbitchief());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_LiveVizSettingsPb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_LiveVizSettingsPb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_LiveVizSettingsPb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
    MergeFrom(*source);
  }
}

void VizMessage_LiveVizSettingsPb::MergeFrom(const VizMessage_LiveVizSettingsPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targetlines_.MergeFrom(from.targetlines_);
  if (!from.relativeorbitchief().empty()) {
    _internal_set_relativeorbitchief(from._internal_relativeorbitchief());
  }
}

void VizMessage_LiveVizSettingsPb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_LiveVizSettingsPb::CopyFrom(const VizMessage_LiveVizSettingsPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.LiveVizSettingsPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_LiveVizSettingsPb::IsInitialized() const {
  return true;
}

void VizMessage_LiveVizSettingsPb::InternalSwap(VizMessage_LiveVizSettingsPb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  targetlines_.InternalSwap(&other->targetlines_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &relativeorbitchief_, GetArenaForAllocation(),
      &other->relativeorbitchief_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_LiveVizSettingsPb::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[18]);
}

// ===================================================================

class VizMessage_VizSettingsPb::_Internal {
 public:
};

VizMessage_VizSettingsPb::VizMessage_VizSettingsPb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pointlines_(arena),
  keepoutincones_(arena),
  standardcamerasettings_(arena),
  instrumentsettings_(arena),
  actuatorsettings_(arena),
  custommodels_(arena),
  defaultthrustercolor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.VizSettingsPb)
}
VizMessage_VizSettingsPb::VizMessage_VizSettingsPb(const VizMessage_VizSettingsPb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pointlines_(from.pointlines_),
      keepoutincones_(from.keepoutincones_),
      standardcamerasettings_(from.standardcamerasettings_),
      instrumentsettings_(from.instrumentsettings_),
      actuatorsettings_(from.actuatorsettings_),
      custommodels_(from.custommodels_),
      defaultthrustercolor_(from.defaultthrustercolor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skybox_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skybox().empty()) {
    skybox_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_skybox(), 
      GetArenaForAllocation());
  }
  defaultspacecraftsprite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_defaultspacecraftsprite().empty()) {
    defaultspacecraftsprite_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_defaultspacecraftsprite(), 
      GetArenaForAllocation());
  }
  maincameratarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maincameratarget().empty()) {
    maincameratarget_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maincameratarget(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ambient_, &from.ambient_,
    static_cast<size_t>(reinterpret_cast<char*>(&forcestartatspacecraftlocalview_) -
    reinterpret_cast<char*>(&ambient_)) + sizeof(forcestartatspacecraftlocalview_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.VizSettingsPb)
}

void VizMessage_VizSettingsPb::SharedCtor() {
skybox_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
defaultspacecraftsprite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
maincameratarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ambient_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&forcestartatspacecraftlocalview_) -
    reinterpret_cast<char*>(&ambient_)) + sizeof(forcestartatspacecraftlocalview_));
}

VizMessage_VizSettingsPb::~VizMessage_VizSettingsPb() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.VizSettingsPb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_VizSettingsPb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  skybox_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defaultspacecraftsprite_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maincameratarget_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_VizSettingsPb::ArenaDtor(void* object) {
  VizMessage_VizSettingsPb* _this = reinterpret_cast< VizMessage_VizSettingsPb* >(object);
  (void)_this;
}
void VizMessage_VizSettingsPb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_VizSettingsPb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_VizSettingsPb::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pointlines_.Clear();
  keepoutincones_.Clear();
  standardcamerasettings_.Clear();
  instrumentsettings_.Clear();
  actuatorsettings_.Clear();
  custommodels_.Clear();
  defaultthrustercolor_.Clear();
  skybox_.ClearToEmpty();
  defaultspacecraftsprite_.ClearToEmpty();
  maincameratarget_.ClearToEmpty();
  ::memset(&ambient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forcestartatspacecraftlocalview_) -
      reinterpret_cast<char*>(&ambient_)) + sizeof(forcestartatspacecraftlocalview_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_VizSettingsPb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double ambient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ambient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 orbitLinesOn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          orbitlineson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 spacecraftCSon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          spacecraftcson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 planetCSon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          planetcson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.PointLine pointLines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pointlines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.KeepOutInCone keepOutInCones = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keepoutincones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.StandardCameraSettings standardCameraSettings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_standardcamerasettings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.InstrumentSettings instrumentSettings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrumentsettings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.ActuatorSettings actuatorSettings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actuatorsettings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // string skybox = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_skybox();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.VizSettingsPb.skybox"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.CustomModel customModels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custommodels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 viewCameraBoresightHUD = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          viewcameraboresighthud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 viewCameraConeHUD = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          viewcameraconehud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showCSLabels = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          showcslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showCelestialBodyLabels = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          showcelestialbodylabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showSpacecraftLabels = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          showspacecraftlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showCameraLabels = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          showcameralabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double customGUIScale = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          customguiscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string defaultSpacecraftSprite = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_defaultspacecraftsprite();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.VizSettingsPb.defaultSpacecraftSprite"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showSpacecraftAsSprites = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          showspacecraftassprites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showCelestialBodiesAsSprites = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          showcelestialbodiesassprites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 show24hrClock = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          show24hrclock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showDataRateDisplay = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          showdataratedisplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double keyboardAngularRate = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          keyboardangularrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double keyboardZoomRate = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          keyboardzoomrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 defaultThrusterColor = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_defaultthrustercolor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_defaultthrustercolor(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double defaultThrusterPlumeLifeScalar = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          defaultthrusterplumelifescalar_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 orbitLineSegments = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          orbitlinesegments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 relativeOrbitRange = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          relativeorbitrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showHillFrame = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          showhillframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showVelocityFrame = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          showvelocityframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 relativeOrbitFrame = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          relativeorbitframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mainCameraTarget = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_maincameratarget();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.VizSettingsPb.mainCameraTarget"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double spacecraftShadowBrightness = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          spacecraftshadowbrightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double spacecraftSizeMultiplier = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          spacecraftsizemultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 showLocationCommLines = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          showlocationcommlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showLocationCones = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          showlocationcones_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showLocationLabels = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          showlocationlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trueTrajectoryLinesOn = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          truetrajectorylineson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 atmospheresOff = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          atmospheresoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scViewToPlanetViewBoundaryMultiplier = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          scviewtoplanetviewboundarymultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 planetViewToHelioViewBoundaryMultiplier = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          planetviewtohelioviewboundarymultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double sunIntensity = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          sunintensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 attenuateSunLightWithDistance = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          attenuatesunlightwithdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showLightLabels = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          showlightlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double celestialBodyHelioViewSizeMultiplier = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          celestialbodyhelioviewsizemultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 showMissionTime = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          showmissiontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double spacecraftHelioViewSizeMultiplier = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          spacecrafthelioviewsizemultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 forceStartAtSpacecraftLocalView = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          forcestartatspacecraftlocalview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_VizSettingsPb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ambient = 1;
  if (!(this->ambient() <= 0 && this->ambient() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ambient(), target);
  }

  // int32 orbitLinesOn = 2;
  if (this->orbitlineson() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_orbitlineson(), target);
  }

  // int32 spacecraftCSon = 3;
  if (this->spacecraftcson() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_spacecraftcson(), target);
  }

  // int32 planetCSon = 4;
  if (this->planetcson() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_planetcson(), target);
  }

  // repeated .vizProtobufferMessage.VizMessage.PointLine pointLines = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pointlines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pointlines(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.KeepOutInCone keepOutInCones = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keepoutincones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_keepoutincones(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.StandardCameraSettings standardCameraSettings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_standardcamerasettings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_standardcamerasettings(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.InstrumentSettings instrumentSettings = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrumentsettings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_instrumentsettings(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.ActuatorSettings actuatorSettings = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actuatorsettings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_actuatorsettings(i), target, stream);
  }

  // string skybox = 11;
  if (!this->skybox().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skybox().data(), static_cast<int>(this->_internal_skybox().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.VizSettingsPb.skybox");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_skybox(), target);
  }

  // repeated .vizProtobufferMessage.VizMessage.CustomModel customModels = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custommodels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_custommodels(i), target, stream);
  }

  // int32 viewCameraBoresightHUD = 13;
  if (this->viewcameraboresighthud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_viewcameraboresighthud(), target);
  }

  // int32 viewCameraConeHUD = 14;
  if (this->viewcameraconehud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_viewcameraconehud(), target);
  }

  // int32 showCSLabels = 15;
  if (this->showcslabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_showcslabels(), target);
  }

  // int32 showCelestialBodyLabels = 16;
  if (this->showcelestialbodylabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_showcelestialbodylabels(), target);
  }

  // int32 showSpacecraftLabels = 17;
  if (this->showspacecraftlabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_showspacecraftlabels(), target);
  }

  // int32 showCameraLabels = 18;
  if (this->showcameralabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_showcameralabels(), target);
  }

  // double customGUIScale = 19;
  if (!(this->customguiscale() <= 0 && this->customguiscale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_customguiscale(), target);
  }

  // string defaultSpacecraftSprite = 20;
  if (!this->defaultspacecraftsprite().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defaultspacecraftsprite().data(), static_cast<int>(this->_internal_defaultspacecraftsprite().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.VizSettingsPb.defaultSpacecraftSprite");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_defaultspacecraftsprite(), target);
  }

  // int32 showSpacecraftAsSprites = 21;
  if (this->showspacecraftassprites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_showspacecraftassprites(), target);
  }

  // int32 showCelestialBodiesAsSprites = 22;
  if (this->showcelestialbodiesassprites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_showcelestialbodiesassprites(), target);
  }

  // int32 show24hrClock = 23;
  if (this->show24hrclock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_show24hrclock(), target);
  }

  // int32 showDataRateDisplay = 24;
  if (this->showdataratedisplay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_showdataratedisplay(), target);
  }

  // double keyboardAngularRate = 25;
  if (!(this->keyboardangularrate() <= 0 && this->keyboardangularrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_keyboardangularrate(), target);
  }

  // double keyboardZoomRate = 26;
  if (!(this->keyboardzoomrate() <= 0 && this->keyboardzoomrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_keyboardzoomrate(), target);
  }

  // repeated int32 defaultThrusterColor = 27;
  {
    int byte_size = _defaultthrustercolor_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          27, _internal_defaultthrustercolor(), byte_size, target);
    }
  }

  // double defaultThrusterPlumeLifeScalar = 28;
  if (!(this->defaultthrusterplumelifescalar() <= 0 && this->defaultthrusterplumelifescalar() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_defaultthrusterplumelifescalar(), target);
  }

  // int32 orbitLineSegments = 29;
  if (this->orbitlinesegments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_orbitlinesegments(), target);
  }

  // int32 relativeOrbitRange = 30;
  if (this->relativeorbitrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_relativeorbitrange(), target);
  }

  // int32 showHillFrame = 31;
  if (this->showhillframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_showhillframe(), target);
  }

  // int32 showVelocityFrame = 32;
  if (this->showvelocityframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_showvelocityframe(), target);
  }

  // int32 relativeOrbitFrame = 33;
  if (this->relativeorbitframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_relativeorbitframe(), target);
  }

  // string mainCameraTarget = 34;
  if (!this->maincameratarget().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maincameratarget().data(), static_cast<int>(this->_internal_maincameratarget().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.VizSettingsPb.mainCameraTarget");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_maincameratarget(), target);
  }

  // double spacecraftShadowBrightness = 35;
  if (!(this->spacecraftshadowbrightness() <= 0 && this->spacecraftshadowbrightness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_spacecraftshadowbrightness(), target);
  }

  // double spacecraftSizeMultiplier = 36;
  if (!(this->spacecraftsizemultiplier() <= 0 && this->spacecraftsizemultiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_spacecraftsizemultiplier(), target);
  }

  // int32 showLocationCommLines = 37;
  if (this->showlocationcommlines() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_showlocationcommlines(), target);
  }

  // int32 showLocationCones = 38;
  if (this->showlocationcones() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_showlocationcones(), target);
  }

  // int32 showLocationLabels = 39;
  if (this->showlocationlabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_showlocationlabels(), target);
  }

  // int32 trueTrajectoryLinesOn = 40;
  if (this->truetrajectorylineson() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_truetrajectorylineson(), target);
  }

  // int32 atmospheresOff = 41;
  if (this->atmospheresoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_atmospheresoff(), target);
  }

  // int32 scViewToPlanetViewBoundaryMultiplier = 42;
  if (this->scviewtoplanetviewboundarymultiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_scviewtoplanetviewboundarymultiplier(), target);
  }

  // int32 planetViewToHelioViewBoundaryMultiplier = 43;
  if (this->planetviewtohelioviewboundarymultiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_planetviewtohelioviewboundarymultiplier(), target);
  }

  // double sunIntensity = 44;
  if (!(this->sunintensity() <= 0 && this->sunintensity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(44, this->_internal_sunintensity(), target);
  }

  // int32 attenuateSunLightWithDistance = 45;
  if (this->attenuatesunlightwithdistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(45, this->_internal_attenuatesunlightwithdistance(), target);
  }

  // int32 showLightLabels = 46;
  if (this->showlightlabels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_showlightlabels(), target);
  }

  // double celestialBodyHelioViewSizeMultiplier = 47;
  if (!(this->celestialbodyhelioviewsizemultiplier() <= 0 && this->celestialbodyhelioviewsizemultiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->_internal_celestialbodyhelioviewsizemultiplier(), target);
  }

  // int32 showMissionTime = 48;
  if (this->showmissiontime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_showmissiontime(), target);
  }

  // double spacecraftHelioViewSizeMultiplier = 49;
  if (!(this->spacecrafthelioviewsizemultiplier() <= 0 && this->spacecrafthelioviewsizemultiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(49, this->_internal_spacecrafthelioviewsizemultiplier(), target);
  }

  // int32 forceStartAtSpacecraftLocalView = 50;
  if (this->forcestartatspacecraftlocalview() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_forcestartatspacecraftlocalview(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.VizSettingsPb)
  return target;
}

size_t VizMessage_VizSettingsPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vizProtobufferMessage.VizMessage.PointLine pointLines = 5;
  total_size += 1UL * this->_internal_pointlines_size();
  for (const auto& msg : this->pointlines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.KeepOutInCone keepOutInCones = 6;
  total_size += 1UL * this->_internal_keepoutincones_size();
  for (const auto& msg : this->keepoutincones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.StandardCameraSettings standardCameraSettings = 7;
  total_size += 1UL * this->_internal_standardcamerasettings_size();
  for (const auto& msg : this->standardcamerasettings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.InstrumentSettings instrumentSettings = 9;
  total_size += 1UL * this->_internal_instrumentsettings_size();
  for (const auto& msg : this->instrumentsettings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.ActuatorSettings actuatorSettings = 10;
  total_size += 1UL * this->_internal_actuatorsettings_size();
  for (const auto& msg : this->actuatorsettings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.CustomModel customModels = 12;
  total_size += 1UL * this->_internal_custommodels_size();
  for (const auto& msg : this->custommodels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 defaultThrusterColor = 27;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->defaultthrustercolor_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _defaultthrustercolor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string skybox = 11;
  if (!this->skybox().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skybox());
  }

  // string defaultSpacecraftSprite = 20;
  if (!this->defaultspacecraftsprite().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaultspacecraftsprite());
  }

  // string mainCameraTarget = 34;
  if (!this->maincameratarget().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maincameratarget());
  }

  // double ambient = 1;
  if (!(this->ambient() <= 0 && this->ambient() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 orbitLinesOn = 2;
  if (this->orbitlineson() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orbitlineson());
  }

  // int32 spacecraftCSon = 3;
  if (this->spacecraftcson() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spacecraftcson());
  }

  // int32 planetCSon = 4;
  if (this->planetcson() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_planetcson());
  }

  // int32 viewCameraBoresightHUD = 13;
  if (this->viewcameraboresighthud() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewcameraboresighthud());
  }

  // int32 viewCameraConeHUD = 14;
  if (this->viewcameraconehud() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewcameraconehud());
  }

  // int32 showCSLabels = 15;
  if (this->showcslabels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showcslabels());
  }

  // int32 showCelestialBodyLabels = 16;
  if (this->showcelestialbodylabels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showcelestialbodylabels());
  }

  // int32 showSpacecraftLabels = 17;
  if (this->showspacecraftlabels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showspacecraftlabels());
  }

  // double customGUIScale = 19;
  if (!(this->customguiscale() <= 0 && this->customguiscale() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 showCameraLabels = 18;
  if (this->showcameralabels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showcameralabels());
  }

  // int32 showSpacecraftAsSprites = 21;
  if (this->showspacecraftassprites() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showspacecraftassprites());
  }

  // int32 showCelestialBodiesAsSprites = 22;
  if (this->showcelestialbodiesassprites() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showcelestialbodiesassprites());
  }

  // int32 show24hrClock = 23;
  if (this->show24hrclock() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_show24hrclock());
  }

  // double keyboardAngularRate = 25;
  if (!(this->keyboardangularrate() <= 0 && this->keyboardangularrate() >= 0)) {
    total_size += 2 + 8;
  }

  // double keyboardZoomRate = 26;
  if (!(this->keyboardzoomrate() <= 0 && this->keyboardzoomrate() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 showDataRateDisplay = 24;
  if (this->showdataratedisplay() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showdataratedisplay());
  }

  // int32 orbitLineSegments = 29;
  if (this->orbitlinesegments() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orbitlinesegments());
  }

  // double defaultThrusterPlumeLifeScalar = 28;
  if (!(this->defaultthrusterplumelifescalar() <= 0 && this->defaultthrusterplumelifescalar() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 relativeOrbitRange = 30;
  if (this->relativeorbitrange() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_relativeorbitrange());
  }

  // int32 showHillFrame = 31;
  if (this->showhillframe() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showhillframe());
  }

  // int32 showVelocityFrame = 32;
  if (this->showvelocityframe() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showvelocityframe());
  }

  // int32 relativeOrbitFrame = 33;
  if (this->relativeorbitframe() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_relativeorbitframe());
  }

  // double spacecraftShadowBrightness = 35;
  if (!(this->spacecraftshadowbrightness() <= 0 && this->spacecraftshadowbrightness() >= 0)) {
    total_size += 2 + 8;
  }

  // double spacecraftSizeMultiplier = 36;
  if (!(this->spacecraftsizemultiplier() <= 0 && this->spacecraftsizemultiplier() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 showLocationCommLines = 37;
  if (this->showlocationcommlines() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showlocationcommlines());
  }

  // int32 showLocationCones = 38;
  if (this->showlocationcones() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showlocationcones());
  }

  // int32 showLocationLabels = 39;
  if (this->showlocationlabels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showlocationlabels());
  }

  // int32 trueTrajectoryLinesOn = 40;
  if (this->truetrajectorylineson() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_truetrajectorylineson());
  }

  // int32 atmospheresOff = 41;
  if (this->atmospheresoff() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_atmospheresoff());
  }

  // int32 scViewToPlanetViewBoundaryMultiplier = 42;
  if (this->scviewtoplanetviewboundarymultiplier() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scviewtoplanetviewboundarymultiplier());
  }

  // double sunIntensity = 44;
  if (!(this->sunintensity() <= 0 && this->sunintensity() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 planetViewToHelioViewBoundaryMultiplier = 43;
  if (this->planetviewtohelioviewboundarymultiplier() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_planetviewtohelioviewboundarymultiplier());
  }

  // int32 attenuateSunLightWithDistance = 45;
  if (this->attenuatesunlightwithdistance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuatesunlightwithdistance());
  }

  // double celestialBodyHelioViewSizeMultiplier = 47;
  if (!(this->celestialbodyhelioviewsizemultiplier() <= 0 && this->celestialbodyhelioviewsizemultiplier() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 showLightLabels = 46;
  if (this->showlightlabels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showlightlabels());
  }

  // int32 showMissionTime = 48;
  if (this->showmissiontime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showmissiontime());
  }

  // double spacecraftHelioViewSizeMultiplier = 49;
  if (!(this->spacecrafthelioviewsizemultiplier() <= 0 && this->spacecrafthelioviewsizemultiplier() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 forceStartAtSpacecraftLocalView = 50;
  if (this->forcestartatspacecraftlocalview() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_forcestartatspacecraftlocalview());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_VizSettingsPb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_VizSettingsPb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_VizSettingsPb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.VizSettingsPb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.VizSettingsPb)
    MergeFrom(*source);
  }
}

void VizMessage_VizSettingsPb::MergeFrom(const VizMessage_VizSettingsPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pointlines_.MergeFrom(from.pointlines_);
  keepoutincones_.MergeFrom(from.keepoutincones_);
  standardcamerasettings_.MergeFrom(from.standardcamerasettings_);
  instrumentsettings_.MergeFrom(from.instrumentsettings_);
  actuatorsettings_.MergeFrom(from.actuatorsettings_);
  custommodels_.MergeFrom(from.custommodels_);
  defaultthrustercolor_.MergeFrom(from.defaultthrustercolor_);
  if (!from.skybox().empty()) {
    _internal_set_skybox(from._internal_skybox());
  }
  if (!from.defaultspacecraftsprite().empty()) {
    _internal_set_defaultspacecraftsprite(from._internal_defaultspacecraftsprite());
  }
  if (!from.maincameratarget().empty()) {
    _internal_set_maincameratarget(from._internal_maincameratarget());
  }
  if (!(from.ambient() <= 0 && from.ambient() >= 0)) {
    _internal_set_ambient(from._internal_ambient());
  }
  if (from.orbitlineson() != 0) {
    _internal_set_orbitlineson(from._internal_orbitlineson());
  }
  if (from.spacecraftcson() != 0) {
    _internal_set_spacecraftcson(from._internal_spacecraftcson());
  }
  if (from.planetcson() != 0) {
    _internal_set_planetcson(from._internal_planetcson());
  }
  if (from.viewcameraboresighthud() != 0) {
    _internal_set_viewcameraboresighthud(from._internal_viewcameraboresighthud());
  }
  if (from.viewcameraconehud() != 0) {
    _internal_set_viewcameraconehud(from._internal_viewcameraconehud());
  }
  if (from.showcslabels() != 0) {
    _internal_set_showcslabels(from._internal_showcslabels());
  }
  if (from.showcelestialbodylabels() != 0) {
    _internal_set_showcelestialbodylabels(from._internal_showcelestialbodylabels());
  }
  if (from.showspacecraftlabels() != 0) {
    _internal_set_showspacecraftlabels(from._internal_showspacecraftlabels());
  }
  if (!(from.customguiscale() <= 0 && from.customguiscale() >= 0)) {
    _internal_set_customguiscale(from._internal_customguiscale());
  }
  if (from.showcameralabels() != 0) {
    _internal_set_showcameralabels(from._internal_showcameralabels());
  }
  if (from.showspacecraftassprites() != 0) {
    _internal_set_showspacecraftassprites(from._internal_showspacecraftassprites());
  }
  if (from.showcelestialbodiesassprites() != 0) {
    _internal_set_showcelestialbodiesassprites(from._internal_showcelestialbodiesassprites());
  }
  if (from.show24hrclock() != 0) {
    _internal_set_show24hrclock(from._internal_show24hrclock());
  }
  if (!(from.keyboardangularrate() <= 0 && from.keyboardangularrate() >= 0)) {
    _internal_set_keyboardangularrate(from._internal_keyboardangularrate());
  }
  if (!(from.keyboardzoomrate() <= 0 && from.keyboardzoomrate() >= 0)) {
    _internal_set_keyboardzoomrate(from._internal_keyboardzoomrate());
  }
  if (from.showdataratedisplay() != 0) {
    _internal_set_showdataratedisplay(from._internal_showdataratedisplay());
  }
  if (from.orbitlinesegments() != 0) {
    _internal_set_orbitlinesegments(from._internal_orbitlinesegments());
  }
  if (!(from.defaultthrusterplumelifescalar() <= 0 && from.defaultthrusterplumelifescalar() >= 0)) {
    _internal_set_defaultthrusterplumelifescalar(from._internal_defaultthrusterplumelifescalar());
  }
  if (from.relativeorbitrange() != 0) {
    _internal_set_relativeorbitrange(from._internal_relativeorbitrange());
  }
  if (from.showhillframe() != 0) {
    _internal_set_showhillframe(from._internal_showhillframe());
  }
  if (from.showvelocityframe() != 0) {
    _internal_set_showvelocityframe(from._internal_showvelocityframe());
  }
  if (from.relativeorbitframe() != 0) {
    _internal_set_relativeorbitframe(from._internal_relativeorbitframe());
  }
  if (!(from.spacecraftshadowbrightness() <= 0 && from.spacecraftshadowbrightness() >= 0)) {
    _internal_set_spacecraftshadowbrightness(from._internal_spacecraftshadowbrightness());
  }
  if (!(from.spacecraftsizemultiplier() <= 0 && from.spacecraftsizemultiplier() >= 0)) {
    _internal_set_spacecraftsizemultiplier(from._internal_spacecraftsizemultiplier());
  }
  if (from.showlocationcommlines() != 0) {
    _internal_set_showlocationcommlines(from._internal_showlocationcommlines());
  }
  if (from.showlocationcones() != 0) {
    _internal_set_showlocationcones(from._internal_showlocationcones());
  }
  if (from.showlocationlabels() != 0) {
    _internal_set_showlocationlabels(from._internal_showlocationlabels());
  }
  if (from.truetrajectorylineson() != 0) {
    _internal_set_truetrajectorylineson(from._internal_truetrajectorylineson());
  }
  if (from.atmospheresoff() != 0) {
    _internal_set_atmospheresoff(from._internal_atmospheresoff());
  }
  if (from.scviewtoplanetviewboundarymultiplier() != 0) {
    _internal_set_scviewtoplanetviewboundarymultiplier(from._internal_scviewtoplanetviewboundarymultiplier());
  }
  if (!(from.sunintensity() <= 0 && from.sunintensity() >= 0)) {
    _internal_set_sunintensity(from._internal_sunintensity());
  }
  if (from.planetviewtohelioviewboundarymultiplier() != 0) {
    _internal_set_planetviewtohelioviewboundarymultiplier(from._internal_planetviewtohelioviewboundarymultiplier());
  }
  if (from.attenuatesunlightwithdistance() != 0) {
    _internal_set_attenuatesunlightwithdistance(from._internal_attenuatesunlightwithdistance());
  }
  if (!(from.celestialbodyhelioviewsizemultiplier() <= 0 && from.celestialbodyhelioviewsizemultiplier() >= 0)) {
    _internal_set_celestialbodyhelioviewsizemultiplier(from._internal_celestialbodyhelioviewsizemultiplier());
  }
  if (from.showlightlabels() != 0) {
    _internal_set_showlightlabels(from._internal_showlightlabels());
  }
  if (from.showmissiontime() != 0) {
    _internal_set_showmissiontime(from._internal_showmissiontime());
  }
  if (!(from.spacecrafthelioviewsizemultiplier() <= 0 && from.spacecrafthelioviewsizemultiplier() >= 0)) {
    _internal_set_spacecrafthelioviewsizemultiplier(from._internal_spacecrafthelioviewsizemultiplier());
  }
  if (from.forcestartatspacecraftlocalview() != 0) {
    _internal_set_forcestartatspacecraftlocalview(from._internal_forcestartatspacecraftlocalview());
  }
}

void VizMessage_VizSettingsPb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_VizSettingsPb::CopyFrom(const VizMessage_VizSettingsPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.VizSettingsPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_VizSettingsPb::IsInitialized() const {
  return true;
}

void VizMessage_VizSettingsPb::InternalSwap(VizMessage_VizSettingsPb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pointlines_.InternalSwap(&other->pointlines_);
  keepoutincones_.InternalSwap(&other->keepoutincones_);
  standardcamerasettings_.InternalSwap(&other->standardcamerasettings_);
  instrumentsettings_.InternalSwap(&other->instrumentsettings_);
  actuatorsettings_.InternalSwap(&other->actuatorsettings_);
  custommodels_.InternalSwap(&other->custommodels_);
  defaultthrustercolor_.InternalSwap(&other->defaultthrustercolor_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &skybox_, GetArenaForAllocation(),
      &other->skybox_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &defaultspacecraftsprite_, GetArenaForAllocation(),
      &other->defaultspacecraftsprite_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maincameratarget_, GetArenaForAllocation(),
      &other->maincameratarget_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_VizSettingsPb, forcestartatspacecraftlocalview_)
      + sizeof(VizMessage_VizSettingsPb::forcestartatspacecraftlocalview_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_VizSettingsPb, ambient_)>(
          reinterpret_cast<char*>(&ambient_),
          reinterpret_cast<char*>(&other->ambient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_VizSettingsPb::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[19]);
}

// ===================================================================

class VizMessage_MultiSphere::_Internal {
 public:
};

VizMessage_MultiSphere::VizMessage_MultiSphere(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  positivecolor_(arena),
  negativecolor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.MultiSphere)
}
VizMessage_MultiSphere::VizMessage_MultiSphere(const VizMessage_MultiSphere& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      positivecolor_(from.positivecolor_),
      negativecolor_(from.negativecolor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxvalue_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(maxvalue_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.MultiSphere)
}

void VizMessage_MultiSphere::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&radius_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxvalue_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(maxvalue_));
}

VizMessage_MultiSphere::~VizMessage_MultiSphere() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.MultiSphere)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_MultiSphere::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VizMessage_MultiSphere::ArenaDtor(void* object) {
  VizMessage_MultiSphere* _this = reinterpret_cast< VizMessage_MultiSphere* >(object);
  (void)_this;
}
void VizMessage_MultiSphere::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_MultiSphere::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_MultiSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.MultiSphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  positivecolor_.Clear();
  negativecolor_.Clear();
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxvalue_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(maxvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_MultiSphere::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 isOn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ison_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double currentValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          currentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          maxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 positiveColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_positivecolor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_positivecolor(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 negativeColor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_negativecolor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_negativecolor(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 neutralOpacity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          neutralopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_MultiSphere::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.MultiSphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isOn = 1;
  if (this->ison() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ison(), target);
  }

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // double radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_radius(), target);
  }

  // double currentValue = 4;
  if (!(this->currentvalue() <= 0 && this->currentvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_currentvalue(), target);
  }

  // double maxValue = 5;
  if (!(this->maxvalue() <= 0 && this->maxvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_maxvalue(), target);
  }

  // repeated int32 positiveColor = 6;
  {
    int byte_size = _positivecolor_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_positivecolor(), byte_size, target);
    }
  }

  // repeated int32 negativeColor = 7;
  {
    int byte_size = _negativecolor_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_negativecolor(), byte_size, target);
    }
  }

  // int32 neutralOpacity = 8;
  if (this->neutralopacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_neutralopacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.MultiSphere)
  return target;
}

size_t VizMessage_MultiSphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.MultiSphere)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 positiveColor = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->positivecolor_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _positivecolor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 negativeColor = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->negativecolor_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _negativecolor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  // double currentValue = 4;
  if (!(this->currentvalue() <= 0 && this->currentvalue() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 isOn = 1;
  if (this->ison() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ison());
  }

  // int32 neutralOpacity = 8;
  if (this->neutralopacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_neutralopacity());
  }

  // double maxValue = 5;
  if (!(this->maxvalue() <= 0 && this->maxvalue() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_MultiSphere::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.MultiSphere)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_MultiSphere* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_MultiSphere>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.MultiSphere)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.MultiSphere)
    MergeFrom(*source);
  }
}

void VizMessage_MultiSphere::MergeFrom(const VizMessage_MultiSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.MultiSphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  positivecolor_.MergeFrom(from.positivecolor_);
  negativecolor_.MergeFrom(from.negativecolor_);
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (!(from.currentvalue() <= 0 && from.currentvalue() >= 0)) {
    _internal_set_currentvalue(from._internal_currentvalue());
  }
  if (from.ison() != 0) {
    _internal_set_ison(from._internal_ison());
  }
  if (from.neutralopacity() != 0) {
    _internal_set_neutralopacity(from._internal_neutralopacity());
  }
  if (!(from.maxvalue() <= 0 && from.maxvalue() >= 0)) {
    _internal_set_maxvalue(from._internal_maxvalue());
  }
}

void VizMessage_MultiSphere::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.MultiSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_MultiSphere::CopyFrom(const VizMessage_MultiSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.MultiSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_MultiSphere::IsInitialized() const {
  return true;
}

void VizMessage_MultiSphere::InternalSwap(VizMessage_MultiSphere* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  positivecolor_.InternalSwap(&other->positivecolor_);
  negativecolor_.InternalSwap(&other->negativecolor_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_MultiSphere, maxvalue_)
      + sizeof(VizMessage_MultiSphere::maxvalue_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_MultiSphere, radius_)>(
          reinterpret_cast<char*>(&radius_),
          reinterpret_cast<char*>(&other->radius_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_MultiSphere::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[20]);
}

// ===================================================================

class VizMessage_Location::_Internal {
 public:
};

VizMessage_Location::VizMessage_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  r_gp_p_(arena),
  ghat_p_(arena),
  color_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.Location)
}
VizMessage_Location::VizMessage_Location(const VizMessage_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      r_gp_p_(from.r_gp_p_),
      ghat_p_(from.ghat_p_),
      color_(from.color_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stationname().empty()) {
    stationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stationname(), 
      GetArenaForAllocation());
  }
  parentbodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parentbodyname().empty()) {
    parentbodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parentbodyname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fieldofview_, &from.fieldofview_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(range_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Location)
}

void VizMessage_Location::SharedCtor() {
stationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parentbodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fieldofview_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&fieldofview_)) + sizeof(range_));
}

VizMessage_Location::~VizMessage_Location() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stationname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentbodyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VizMessage_Location::ArenaDtor(void* object) {
  VizMessage_Location* _this = reinterpret_cast< VizMessage_Location* >(object);
  (void)_this;
}
void VizMessage_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  r_gp_p_.Clear();
  ghat_p_.Clear();
  color_.Clear();
  stationname_.ClearToEmpty();
  parentbodyname_.ClearToEmpty();
  ::memset(&fieldofview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&fieldofview_)) + sizeof(range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stationName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stationname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Location.stationName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parentBodyName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parentbodyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vizProtobufferMessage.VizMessage.Location.parentBodyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double r_GP_P = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_r_gp_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_r_gp_p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double gHat_P = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ghat_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_ghat_p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fieldOfView = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          fieldofview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_color(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stationName = 1;
  if (!this->stationname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stationname().data(), static_cast<int>(this->_internal_stationname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Location.stationName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stationname(), target);
  }

  // string parentBodyName = 2;
  if (!this->parentbodyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentbodyname().data(), static_cast<int>(this->_internal_parentbodyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vizProtobufferMessage.VizMessage.Location.parentBodyName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parentbodyname(), target);
  }

  // repeated double r_GP_P = 3;
  if (this->_internal_r_gp_p_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_r_gp_p(), target);
  }

  // repeated double gHat_P = 4;
  if (this->_internal_ghat_p_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_ghat_p(), target);
  }

  // double fieldOfView = 5;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_fieldofview(), target);
  }

  // repeated int32 color = 6;
  {
    int byte_size = _color_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_color(), byte_size, target);
    }
  }

  // double range = 7;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Location)
  return target;
}

size_t VizMessage_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double r_GP_P = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_r_gp_p_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double gHat_P = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ghat_p_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 color = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->color_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string stationName = 1;
  if (!this->stationname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stationname());
  }

  // string parentBodyName = 2;
  if (!this->parentbodyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentbodyname());
  }

  // double fieldOfView = 5;
  if (!(this->fieldofview() <= 0 && this->fieldofview() >= 0)) {
    total_size += 1 + 8;
  }

  // double range = 7;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Location)
    MergeFrom(*source);
  }
}

void VizMessage_Location::MergeFrom(const VizMessage_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  r_gp_p_.MergeFrom(from.r_gp_p_);
  ghat_p_.MergeFrom(from.ghat_p_);
  color_.MergeFrom(from.color_);
  if (!from.stationname().empty()) {
    _internal_set_stationname(from._internal_stationname());
  }
  if (!from.parentbodyname().empty()) {
    _internal_set_parentbodyname(from._internal_parentbodyname());
  }
  if (!(from.fieldofview() <= 0 && from.fieldofview() >= 0)) {
    _internal_set_fieldofview(from._internal_fieldofview());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
}

void VizMessage_Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Location::CopyFrom(const VizMessage_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Location::IsInitialized() const {
  return true;
}

void VizMessage_Location::InternalSwap(VizMessage_Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  r_gp_p_.InternalSwap(&other->r_gp_p_);
  ghat_p_.InternalSwap(&other->ghat_p_);
  color_.InternalSwap(&other->color_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stationname_, GetArenaForAllocation(),
      &other->stationname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parentbodyname_, GetArenaForAllocation(),
      &other->parentbodyname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_Location, range_)
      + sizeof(VizMessage_Location::range_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_Location, fieldofview_)>(
          reinterpret_cast<char*>(&fieldofview_),
          reinterpret_cast<char*>(&other->fieldofview_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[21]);
}

// ===================================================================

class VizMessage_Ellipsoid::_Internal {
 public:
};

VizMessage_Ellipsoid::VizMessage_Ellipsoid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  semimajoraxes_(arena),
  color_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage.Ellipsoid)
}
VizMessage_Ellipsoid::VizMessage_Ellipsoid(const VizMessage_Ellipsoid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      semimajoraxes_(from.semimajoraxes_),
      color_(from.color_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ison_, &from.ison_,
    static_cast<size_t>(reinterpret_cast<char*>(&showgridlines_) -
    reinterpret_cast<char*>(&ison_)) + sizeof(showgridlines_));
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage.Ellipsoid)
}

void VizMessage_Ellipsoid::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ison_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&showgridlines_) -
    reinterpret_cast<char*>(&ison_)) + sizeof(showgridlines_));
}

VizMessage_Ellipsoid::~VizMessage_Ellipsoid() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage.Ellipsoid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage_Ellipsoid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VizMessage_Ellipsoid::ArenaDtor(void* object) {
  VizMessage_Ellipsoid* _this = reinterpret_cast< VizMessage_Ellipsoid* >(object);
  (void)_this;
}
void VizMessage_Ellipsoid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage_Ellipsoid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage_Ellipsoid::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage.Ellipsoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  semimajoraxes_.Clear();
  color_.Clear();
  ::memset(&ison_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showgridlines_) -
      reinterpret_cast<char*>(&ison_)) + sizeof(showgridlines_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage_Ellipsoid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 isOn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ison_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 useBodyFrame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          usebodyframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double semiMajorAxes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_semimajoraxes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_semimajoraxes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_color(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_color(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 showGridLines = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          showgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage_Ellipsoid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage.Ellipsoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isOn = 1;
  if (this->ison() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ison(), target);
  }

  // int32 useBodyFrame = 2;
  if (this->usebodyframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_usebodyframe(), target);
  }

  // repeated double position = 3;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_position(), target);
  }

  // repeated double semiMajorAxes = 4;
  if (this->_internal_semimajoraxes_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_semimajoraxes(), target);
  }

  // repeated int32 color = 5;
  {
    int byte_size = _color_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_color(), byte_size, target);
    }
  }

  // int32 showGridLines = 6;
  if (this->showgridlines() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_showgridlines(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage.Ellipsoid)
  return target;
}

size_t VizMessage_Ellipsoid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage.Ellipsoid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double semiMajorAxes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_semimajoraxes_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 color = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->color_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _color_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 isOn = 1;
  if (this->ison() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ison());
  }

  // int32 useBodyFrame = 2;
  if (this->usebodyframe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usebodyframe());
  }

  // int32 showGridLines = 6;
  if (this->showgridlines() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showgridlines());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage_Ellipsoid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage.Ellipsoid)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage_Ellipsoid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage_Ellipsoid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage.Ellipsoid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage.Ellipsoid)
    MergeFrom(*source);
  }
}

void VizMessage_Ellipsoid::MergeFrom(const VizMessage_Ellipsoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage.Ellipsoid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  semimajoraxes_.MergeFrom(from.semimajoraxes_);
  color_.MergeFrom(from.color_);
  if (from.ison() != 0) {
    _internal_set_ison(from._internal_ison());
  }
  if (from.usebodyframe() != 0) {
    _internal_set_usebodyframe(from._internal_usebodyframe());
  }
  if (from.showgridlines() != 0) {
    _internal_set_showgridlines(from._internal_showgridlines());
  }
}

void VizMessage_Ellipsoid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage.Ellipsoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage_Ellipsoid::CopyFrom(const VizMessage_Ellipsoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage.Ellipsoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage_Ellipsoid::IsInitialized() const {
  return true;
}

void VizMessage_Ellipsoid::InternalSwap(VizMessage_Ellipsoid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  semimajoraxes_.InternalSwap(&other->semimajoraxes_);
  color_.InternalSwap(&other->color_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage_Ellipsoid, showgridlines_)
      + sizeof(VizMessage_Ellipsoid::showgridlines_)
      - PROTOBUF_FIELD_OFFSET(VizMessage_Ellipsoid, ison_)>(
          reinterpret_cast<char*>(&ison_),
          reinterpret_cast<char*>(&other->ison_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage_Ellipsoid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[22]);
}

// ===================================================================

class VizMessage::_Internal {
 public:
  static const ::vizProtobufferMessage::VizMessage_TimeStamp& currenttime(const VizMessage* msg);
  static const ::vizProtobufferMessage::VizMessage_VizSettingsPb& settings(const VizMessage* msg);
  static const ::vizProtobufferMessage::VizMessage_EpochDateTime& epoch(const VizMessage* msg);
  static const ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb& livesettings(const VizMessage* msg);
};

const ::vizProtobufferMessage::VizMessage_TimeStamp&
VizMessage::_Internal::currenttime(const VizMessage* msg) {
  return *msg->currenttime_;
}
const ::vizProtobufferMessage::VizMessage_VizSettingsPb&
VizMessage::_Internal::settings(const VizMessage* msg) {
  return *msg->settings_;
}
const ::vizProtobufferMessage::VizMessage_EpochDateTime&
VizMessage::_Internal::epoch(const VizMessage* msg) {
  return *msg->epoch_;
}
const ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb&
VizMessage::_Internal::livesettings(const VizMessage* msg) {
  return *msg->livesettings_;
}
VizMessage::VizMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  celestialbodies_(arena),
  spacecraft_(arena),
  cameras_(arena),
  locations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vizProtobufferMessage.VizMessage)
}
VizMessage::VizMessage(const VizMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      celestialbodies_(from.celestialbodies_),
      spacecraft_(from.spacecraft_),
      cameras_(from.cameras_),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currenttime()) {
    currenttime_ = new ::vizProtobufferMessage::VizMessage_TimeStamp(*from.currenttime_);
  } else {
    currenttime_ = nullptr;
  }
  if (from._internal_has_settings()) {
    settings_ = new ::vizProtobufferMessage::VizMessage_VizSettingsPb(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_epoch()) {
    epoch_ = new ::vizProtobufferMessage::VizMessage_EpochDateTime(*from.epoch_);
  } else {
    epoch_ = nullptr;
  }
  if (from._internal_has_livesettings()) {
    livesettings_ = new ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb(*from.livesettings_);
  } else {
    livesettings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vizProtobufferMessage.VizMessage)
}

void VizMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&currenttime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&livesettings_) -
    reinterpret_cast<char*>(&currenttime_)) + sizeof(livesettings_));
}

VizMessage::~VizMessage() {
  // @@protoc_insertion_point(destructor:vizProtobufferMessage.VizMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VizMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete currenttime_;
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete epoch_;
  if (this != internal_default_instance()) delete livesettings_;
}

void VizMessage::ArenaDtor(void* object) {
  VizMessage* _this = reinterpret_cast< VizMessage* >(object);
  (void)_this;
}
void VizMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VizMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VizMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:vizProtobufferMessage.VizMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  celestialbodies_.Clear();
  spacecraft_.Clear();
  cameras_.Clear();
  locations_.Clear();
  if (GetArenaForAllocation() == nullptr && currenttime_ != nullptr) {
    delete currenttime_;
  }
  currenttime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && epoch_ != nullptr) {
    delete epoch_;
  }
  epoch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && livesettings_ != nullptr) {
    delete livesettings_;
  }
  livesettings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VizMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currenttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_celestialbodies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spacecraft(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cameras(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vizProtobufferMessage.VizMessage.EpochDateTime epoch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vizProtobufferMessage.VizMessage.Location locations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .vizProtobufferMessage.VizMessage.LiveVizSettingsPb liveSettings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_livesettings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VizMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vizProtobufferMessage.VizMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  if (this->has_currenttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::currenttime(this), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_celestialbodies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_celestialbodies(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spacecraft_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_spacecraft(i), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cameras_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_cameras(i), target, stream);
  }

  // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::settings(this), target, stream);
  }

  // .vizProtobufferMessage.VizMessage.EpochDateTime epoch = 8;
  if (this->has_epoch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::epoch(this), target, stream);
  }

  // repeated .vizProtobufferMessage.VizMessage.Location locations = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_locations(i), target, stream);
  }

  // .vizProtobufferMessage.VizMessage.LiveVizSettingsPb liveSettings = 10;
  if (this->has_livesettings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::livesettings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vizProtobufferMessage.VizMessage)
  return target;
}

size_t VizMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vizProtobufferMessage.VizMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vizProtobufferMessage.VizMessage.CelestialBody celestialBodies = 2;
  total_size += 1UL * this->_internal_celestialbodies_size();
  for (const auto& msg : this->celestialbodies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.Spacecraft spacecraft = 3;
  total_size += 1UL * this->_internal_spacecraft_size();
  for (const auto& msg : this->spacecraft_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.CameraConfig cameras = 4;
  total_size += 1UL * this->_internal_cameras_size();
  for (const auto& msg : this->cameras_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vizProtobufferMessage.VizMessage.Location locations = 9;
  total_size += 1UL * this->_internal_locations_size();
  for (const auto& msg : this->locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vizProtobufferMessage.VizMessage.TimeStamp currentTime = 1;
  if (this->has_currenttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currenttime_);
  }

  // .vizProtobufferMessage.VizMessage.VizSettingsPb settings = 7;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .vizProtobufferMessage.VizMessage.EpochDateTime epoch = 8;
  if (this->has_epoch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_);
  }

  // .vizProtobufferMessage.VizMessage.LiveVizSettingsPb liveSettings = 10;
  if (this->has_livesettings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *livesettings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VizMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vizProtobufferMessage.VizMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const VizMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VizMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vizProtobufferMessage.VizMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vizProtobufferMessage.VizMessage)
    MergeFrom(*source);
  }
}

void VizMessage::MergeFrom(const VizMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vizProtobufferMessage.VizMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  celestialbodies_.MergeFrom(from.celestialbodies_);
  spacecraft_.MergeFrom(from.spacecraft_);
  cameras_.MergeFrom(from.cameras_);
  locations_.MergeFrom(from.locations_);
  if (from.has_currenttime()) {
    _internal_mutable_currenttime()->::vizProtobufferMessage::VizMessage_TimeStamp::MergeFrom(from._internal_currenttime());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::vizProtobufferMessage::VizMessage_VizSettingsPb::MergeFrom(from._internal_settings());
  }
  if (from.has_epoch()) {
    _internal_mutable_epoch()->::vizProtobufferMessage::VizMessage_EpochDateTime::MergeFrom(from._internal_epoch());
  }
  if (from.has_livesettings()) {
    _internal_mutable_livesettings()->::vizProtobufferMessage::VizMessage_LiveVizSettingsPb::MergeFrom(from._internal_livesettings());
  }
}

void VizMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vizProtobufferMessage.VizMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VizMessage::CopyFrom(const VizMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vizProtobufferMessage.VizMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VizMessage::IsInitialized() const {
  return true;
}

void VizMessage::InternalSwap(VizMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  celestialbodies_.InternalSwap(&other->celestialbodies_);
  spacecraft_.InternalSwap(&other->spacecraft_);
  cameras_.InternalSwap(&other->cameras_);
  locations_.InternalSwap(&other->locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VizMessage, livesettings_)
      + sizeof(VizMessage::livesettings_)
      - PROTOBUF_FIELD_OFFSET(VizMessage, currenttime_)>(
          reinterpret_cast<char*>(&currenttime_),
          reinterpret_cast<char*>(&other->currenttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VizMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vizMessage_2eproto_getter, &descriptor_table_vizMessage_2eproto_once,
      file_level_metadata_vizMessage_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vizProtobufferMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_EpochDateTime* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_EpochDateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_EpochDateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_TimeStamp* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_TimeStamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_TimeStamp >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_CelestialBody* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_CelestialBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_CelestialBody >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_Spacecraft* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_Spacecraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_Spacecraft >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_ReactionWheel* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_ReactionWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_ReactionWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_Thruster* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_Thruster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_Thruster >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_CoarseSunSensor* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_CoarseSunSensor >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_GenericSensor* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_GenericSensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_GenericSensor >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_GenericStorage* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_GenericStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_GenericStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_Light* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_Light >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_Light >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_Transceiver* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_Transceiver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_Transceiver >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_CameraConfig* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_CameraConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_CameraConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_PointLine* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_PointLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_PointLine >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_KeepOutInCone* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_KeepOutInCone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_KeepOutInCone >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_StandardCameraSettings* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_StandardCameraSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_StandardCameraSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_ActuatorSettings* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_ActuatorSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_ActuatorSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_InstrumentSettings* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_InstrumentSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_InstrumentSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_CustomModel* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_CustomModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_CustomModel >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_LiveVizSettingsPb >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_VizSettingsPb* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_VizSettingsPb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_VizSettingsPb >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_MultiSphere* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_MultiSphere >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_MultiSphere >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_Location* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage_Ellipsoid* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage_Ellipsoid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage_Ellipsoid >(arena);
}
template<> PROTOBUF_NOINLINE ::vizProtobufferMessage::VizMessage* Arena::CreateMaybeMessage< ::vizProtobufferMessage::VizMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vizProtobufferMessage::VizMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
